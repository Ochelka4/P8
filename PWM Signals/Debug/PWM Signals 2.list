
PWM Signals 2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008a2c  080001c8  080001c8  000011c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000420  08008bf4  08008bf4  00009bf4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009014  08009014  0000b084  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08009014  08009014  0000a014  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800901c  0800901c  0000b084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800901c  0800901c  0000a01c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009020  08009020  0000a020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000084  20000000  08009024  0000b000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000007a4  20000088  080090a8  0000b088  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000082c  080090a8  0000b82c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b084  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015e82  00000000  00000000  0000b0b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002c9d  00000000  00000000  00020f36  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001260  00000000  00000000  00023bd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e5e  00000000  00000000  00024e38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000278b0  00000000  00000000  00025c96  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017013  00000000  00000000  0004d546  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f897b  00000000  00000000  00064559  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0015ced4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005438  00000000  00000000  0015cf18  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  00162350  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	@ (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	@ (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	20000088 	.word	0x20000088
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08008bdc 	.word	0x08008bdc

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	@ (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	@ (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	@ (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	2000008c 	.word	0x2000008c
 8000204:	08008bdc 	.word	0x08008bdc

08000208 <__aeabi_drsub>:
 8000208:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800020c:	e002      	b.n	8000214 <__adddf3>
 800020e:	bf00      	nop

08000210 <__aeabi_dsub>:
 8000210:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000214 <__adddf3>:
 8000214:	b530      	push	{r4, r5, lr}
 8000216:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800021a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800021e:	ea94 0f05 	teq	r4, r5
 8000222:	bf08      	it	eq
 8000224:	ea90 0f02 	teqeq	r0, r2
 8000228:	bf1f      	itttt	ne
 800022a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800022e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000232:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000236:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800023a:	f000 80e2 	beq.w	8000402 <__adddf3+0x1ee>
 800023e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000242:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000246:	bfb8      	it	lt
 8000248:	426d      	neglt	r5, r5
 800024a:	dd0c      	ble.n	8000266 <__adddf3+0x52>
 800024c:	442c      	add	r4, r5
 800024e:	ea80 0202 	eor.w	r2, r0, r2
 8000252:	ea81 0303 	eor.w	r3, r1, r3
 8000256:	ea82 0000 	eor.w	r0, r2, r0
 800025a:	ea83 0101 	eor.w	r1, r3, r1
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	2d36      	cmp	r5, #54	@ 0x36
 8000268:	bf88      	it	hi
 800026a:	bd30      	pophi	{r4, r5, pc}
 800026c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000270:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000274:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000278:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800027c:	d002      	beq.n	8000284 <__adddf3+0x70>
 800027e:	4240      	negs	r0, r0
 8000280:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000284:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000288:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800028c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000290:	d002      	beq.n	8000298 <__adddf3+0x84>
 8000292:	4252      	negs	r2, r2
 8000294:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000298:	ea94 0f05 	teq	r4, r5
 800029c:	f000 80a7 	beq.w	80003ee <__adddf3+0x1da>
 80002a0:	f1a4 0401 	sub.w	r4, r4, #1
 80002a4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a8:	db0d      	blt.n	80002c6 <__adddf3+0xb2>
 80002aa:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ae:	fa22 f205 	lsr.w	r2, r2, r5
 80002b2:	1880      	adds	r0, r0, r2
 80002b4:	f141 0100 	adc.w	r1, r1, #0
 80002b8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002bc:	1880      	adds	r0, r0, r2
 80002be:	fa43 f305 	asr.w	r3, r3, r5
 80002c2:	4159      	adcs	r1, r3
 80002c4:	e00e      	b.n	80002e4 <__adddf3+0xd0>
 80002c6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ca:	f10e 0e20 	add.w	lr, lr, #32
 80002ce:	2a01      	cmp	r2, #1
 80002d0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002d4:	bf28      	it	cs
 80002d6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002da:	fa43 f305 	asr.w	r3, r3, r5
 80002de:	18c0      	adds	r0, r0, r3
 80002e0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002e4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002e8:	d507      	bpl.n	80002fa <__adddf3+0xe6>
 80002ea:	f04f 0e00 	mov.w	lr, #0
 80002ee:	f1dc 0c00 	rsbs	ip, ip, #0
 80002f2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002f6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002fa:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002fe:	d31b      	bcc.n	8000338 <__adddf3+0x124>
 8000300:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000304:	d30c      	bcc.n	8000320 <__adddf3+0x10c>
 8000306:	0849      	lsrs	r1, r1, #1
 8000308:	ea5f 0030 	movs.w	r0, r0, rrx
 800030c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000310:	f104 0401 	add.w	r4, r4, #1
 8000314:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000318:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800031c:	f080 809a 	bcs.w	8000454 <__adddf3+0x240>
 8000320:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	ea41 0105 	orr.w	r1, r1, r5
 8000336:	bd30      	pop	{r4, r5, pc}
 8000338:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800033c:	4140      	adcs	r0, r0
 800033e:	eb41 0101 	adc.w	r1, r1, r1
 8000342:	3c01      	subs	r4, #1
 8000344:	bf28      	it	cs
 8000346:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800034a:	d2e9      	bcs.n	8000320 <__adddf3+0x10c>
 800034c:	f091 0f00 	teq	r1, #0
 8000350:	bf04      	itt	eq
 8000352:	4601      	moveq	r1, r0
 8000354:	2000      	moveq	r0, #0
 8000356:	fab1 f381 	clz	r3, r1
 800035a:	bf08      	it	eq
 800035c:	3320      	addeq	r3, #32
 800035e:	f1a3 030b 	sub.w	r3, r3, #11
 8000362:	f1b3 0220 	subs.w	r2, r3, #32
 8000366:	da0c      	bge.n	8000382 <__adddf3+0x16e>
 8000368:	320c      	adds	r2, #12
 800036a:	dd08      	ble.n	800037e <__adddf3+0x16a>
 800036c:	f102 0c14 	add.w	ip, r2, #20
 8000370:	f1c2 020c 	rsb	r2, r2, #12
 8000374:	fa01 f00c 	lsl.w	r0, r1, ip
 8000378:	fa21 f102 	lsr.w	r1, r1, r2
 800037c:	e00c      	b.n	8000398 <__adddf3+0x184>
 800037e:	f102 0214 	add.w	r2, r2, #20
 8000382:	bfd8      	it	le
 8000384:	f1c2 0c20 	rsble	ip, r2, #32
 8000388:	fa01 f102 	lsl.w	r1, r1, r2
 800038c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000390:	bfdc      	itt	le
 8000392:	ea41 010c 	orrle.w	r1, r1, ip
 8000396:	4090      	lslle	r0, r2
 8000398:	1ae4      	subs	r4, r4, r3
 800039a:	bfa2      	ittt	ge
 800039c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003a0:	4329      	orrge	r1, r5
 80003a2:	bd30      	popge	{r4, r5, pc}
 80003a4:	ea6f 0404 	mvn.w	r4, r4
 80003a8:	3c1f      	subs	r4, #31
 80003aa:	da1c      	bge.n	80003e6 <__adddf3+0x1d2>
 80003ac:	340c      	adds	r4, #12
 80003ae:	dc0e      	bgt.n	80003ce <__adddf3+0x1ba>
 80003b0:	f104 0414 	add.w	r4, r4, #20
 80003b4:	f1c4 0220 	rsb	r2, r4, #32
 80003b8:	fa20 f004 	lsr.w	r0, r0, r4
 80003bc:	fa01 f302 	lsl.w	r3, r1, r2
 80003c0:	ea40 0003 	orr.w	r0, r0, r3
 80003c4:	fa21 f304 	lsr.w	r3, r1, r4
 80003c8:	ea45 0103 	orr.w	r1, r5, r3
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	f1c4 040c 	rsb	r4, r4, #12
 80003d2:	f1c4 0220 	rsb	r2, r4, #32
 80003d6:	fa20 f002 	lsr.w	r0, r0, r2
 80003da:	fa01 f304 	lsl.w	r3, r1, r4
 80003de:	ea40 0003 	orr.w	r0, r0, r3
 80003e2:	4629      	mov	r1, r5
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ea:	4629      	mov	r1, r5
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f094 0f00 	teq	r4, #0
 80003f2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003f6:	bf06      	itte	eq
 80003f8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003fc:	3401      	addeq	r4, #1
 80003fe:	3d01      	subne	r5, #1
 8000400:	e74e      	b.n	80002a0 <__adddf3+0x8c>
 8000402:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000406:	bf18      	it	ne
 8000408:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800040c:	d029      	beq.n	8000462 <__adddf3+0x24e>
 800040e:	ea94 0f05 	teq	r4, r5
 8000412:	bf08      	it	eq
 8000414:	ea90 0f02 	teqeq	r0, r2
 8000418:	d005      	beq.n	8000426 <__adddf3+0x212>
 800041a:	ea54 0c00 	orrs.w	ip, r4, r0
 800041e:	bf04      	itt	eq
 8000420:	4619      	moveq	r1, r3
 8000422:	4610      	moveq	r0, r2
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	ea91 0f03 	teq	r1, r3
 800042a:	bf1e      	ittt	ne
 800042c:	2100      	movne	r1, #0
 800042e:	2000      	movne	r0, #0
 8000430:	bd30      	popne	{r4, r5, pc}
 8000432:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000436:	d105      	bne.n	8000444 <__adddf3+0x230>
 8000438:	0040      	lsls	r0, r0, #1
 800043a:	4149      	adcs	r1, r1
 800043c:	bf28      	it	cs
 800043e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000442:	bd30      	pop	{r4, r5, pc}
 8000444:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000448:	bf3c      	itt	cc
 800044a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800044e:	bd30      	popcc	{r4, r5, pc}
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000454:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000458:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800045c:	f04f 0000 	mov.w	r0, #0
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000466:	bf1a      	itte	ne
 8000468:	4619      	movne	r1, r3
 800046a:	4610      	movne	r0, r2
 800046c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000470:	bf1c      	itt	ne
 8000472:	460b      	movne	r3, r1
 8000474:	4602      	movne	r2, r0
 8000476:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800047a:	bf06      	itte	eq
 800047c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000480:	ea91 0f03 	teqeq	r1, r3
 8000484:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	bf00      	nop

0800048c <__aeabi_ui2d>:
 800048c:	f090 0f00 	teq	r0, #0
 8000490:	bf04      	itt	eq
 8000492:	2100      	moveq	r1, #0
 8000494:	4770      	bxeq	lr
 8000496:	b530      	push	{r4, r5, lr}
 8000498:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800049c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004a0:	f04f 0500 	mov.w	r5, #0
 80004a4:	f04f 0100 	mov.w	r1, #0
 80004a8:	e750      	b.n	800034c <__adddf3+0x138>
 80004aa:	bf00      	nop

080004ac <__aeabi_i2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004c0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004c4:	bf48      	it	mi
 80004c6:	4240      	negmi	r0, r0
 80004c8:	f04f 0100 	mov.w	r1, #0
 80004cc:	e73e      	b.n	800034c <__adddf3+0x138>
 80004ce:	bf00      	nop

080004d0 <__aeabi_f2d>:
 80004d0:	0042      	lsls	r2, r0, #1
 80004d2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004d6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004da:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004de:	bf1f      	itttt	ne
 80004e0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004e4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004e8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004ec:	4770      	bxne	lr
 80004ee:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004f2:	bf08      	it	eq
 80004f4:	4770      	bxeq	lr
 80004f6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004fa:	bf04      	itt	eq
 80004fc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000500:	4770      	bxeq	lr
 8000502:	b530      	push	{r4, r5, lr}
 8000504:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800050c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000510:	e71c      	b.n	800034c <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_ul2d>:
 8000514:	ea50 0201 	orrs.w	r2, r0, r1
 8000518:	bf08      	it	eq
 800051a:	4770      	bxeq	lr
 800051c:	b530      	push	{r4, r5, lr}
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	e00a      	b.n	800053a <__aeabi_l2d+0x16>

08000524 <__aeabi_l2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000532:	d502      	bpl.n	800053a <__aeabi_l2d+0x16>
 8000534:	4240      	negs	r0, r0
 8000536:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800053a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800053e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000542:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000546:	f43f aed8 	beq.w	80002fa <__adddf3+0xe6>
 800054a:	f04f 0203 	mov.w	r2, #3
 800054e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000552:	bf18      	it	ne
 8000554:	3203      	addne	r2, #3
 8000556:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800055a:	bf18      	it	ne
 800055c:	3203      	addne	r2, #3
 800055e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000562:	f1c2 0320 	rsb	r3, r2, #32
 8000566:	fa00 fc03 	lsl.w	ip, r0, r3
 800056a:	fa20 f002 	lsr.w	r0, r0, r2
 800056e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000572:	ea40 000e 	orr.w	r0, r0, lr
 8000576:	fa21 f102 	lsr.w	r1, r1, r2
 800057a:	4414      	add	r4, r2
 800057c:	e6bd      	b.n	80002fa <__adddf3+0xe6>
 800057e:	bf00      	nop

08000580 <__aeabi_dmul>:
 8000580:	b570      	push	{r4, r5, r6, lr}
 8000582:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000586:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800058a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800058e:	bf1d      	ittte	ne
 8000590:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000594:	ea94 0f0c 	teqne	r4, ip
 8000598:	ea95 0f0c 	teqne	r5, ip
 800059c:	f000 f8de 	bleq	800075c <__aeabi_dmul+0x1dc>
 80005a0:	442c      	add	r4, r5
 80005a2:	ea81 0603 	eor.w	r6, r1, r3
 80005a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005b2:	bf18      	it	ne
 80005b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005bc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005c0:	d038      	beq.n	8000634 <__aeabi_dmul+0xb4>
 80005c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ce:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005d6:	f04f 0600 	mov.w	r6, #0
 80005da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005de:	f09c 0f00 	teq	ip, #0
 80005e2:	bf18      	it	ne
 80005e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005e8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005ec:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005f0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005f4:	d204      	bcs.n	8000600 <__aeabi_dmul+0x80>
 80005f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005fa:	416d      	adcs	r5, r5
 80005fc:	eb46 0606 	adc.w	r6, r6, r6
 8000600:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000604:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000608:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800060c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000610:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000614:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000618:	bf88      	it	hi
 800061a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800061e:	d81e      	bhi.n	800065e <__aeabi_dmul+0xde>
 8000620:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000624:	bf08      	it	eq
 8000626:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800062a:	f150 0000 	adcs.w	r0, r0, #0
 800062e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000632:	bd70      	pop	{r4, r5, r6, pc}
 8000634:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000638:	ea46 0101 	orr.w	r1, r6, r1
 800063c:	ea40 0002 	orr.w	r0, r0, r2
 8000640:	ea81 0103 	eor.w	r1, r1, r3
 8000644:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000648:	bfc2      	ittt	gt
 800064a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800064e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000652:	bd70      	popgt	{r4, r5, r6, pc}
 8000654:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000658:	f04f 0e00 	mov.w	lr, #0
 800065c:	3c01      	subs	r4, #1
 800065e:	f300 80ab 	bgt.w	80007b8 <__aeabi_dmul+0x238>
 8000662:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000666:	bfde      	ittt	le
 8000668:	2000      	movle	r0, #0
 800066a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800066e:	bd70      	pople	{r4, r5, r6, pc}
 8000670:	f1c4 0400 	rsb	r4, r4, #0
 8000674:	3c20      	subs	r4, #32
 8000676:	da35      	bge.n	80006e4 <__aeabi_dmul+0x164>
 8000678:	340c      	adds	r4, #12
 800067a:	dc1b      	bgt.n	80006b4 <__aeabi_dmul+0x134>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f305 	lsl.w	r3, r0, r5
 8000688:	fa20 f004 	lsr.w	r0, r0, r4
 800068c:	fa01 f205 	lsl.w	r2, r1, r5
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000698:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800069c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a0:	fa21 f604 	lsr.w	r6, r1, r4
 80006a4:	eb42 0106 	adc.w	r1, r2, r6
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 040c 	rsb	r4, r4, #12
 80006b8:	f1c4 0520 	rsb	r5, r4, #32
 80006bc:	fa00 f304 	lsl.w	r3, r0, r4
 80006c0:	fa20 f005 	lsr.w	r0, r0, r5
 80006c4:	fa01 f204 	lsl.w	r2, r1, r4
 80006c8:	ea40 0002 	orr.w	r0, r0, r2
 80006cc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d4:	f141 0100 	adc.w	r1, r1, #0
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 0520 	rsb	r5, r4, #32
 80006e8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80006f0:	fa20 f304 	lsr.w	r3, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea43 0302 	orr.w	r3, r3, r2
 80006fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000704:	fa21 f204 	lsr.w	r2, r1, r4
 8000708:	ea20 0002 	bic.w	r0, r0, r2
 800070c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f094 0f00 	teq	r4, #0
 8000720:	d10f      	bne.n	8000742 <__aeabi_dmul+0x1c2>
 8000722:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000726:	0040      	lsls	r0, r0, #1
 8000728:	eb41 0101 	adc.w	r1, r1, r1
 800072c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000730:	bf08      	it	eq
 8000732:	3c01      	subeq	r4, #1
 8000734:	d0f7      	beq.n	8000726 <__aeabi_dmul+0x1a6>
 8000736:	ea41 0106 	orr.w	r1, r1, r6
 800073a:	f095 0f00 	teq	r5, #0
 800073e:	bf18      	it	ne
 8000740:	4770      	bxne	lr
 8000742:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000746:	0052      	lsls	r2, r2, #1
 8000748:	eb43 0303 	adc.w	r3, r3, r3
 800074c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000750:	bf08      	it	eq
 8000752:	3d01      	subeq	r5, #1
 8000754:	d0f7      	beq.n	8000746 <__aeabi_dmul+0x1c6>
 8000756:	ea43 0306 	orr.w	r3, r3, r6
 800075a:	4770      	bx	lr
 800075c:	ea94 0f0c 	teq	r4, ip
 8000760:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000764:	bf18      	it	ne
 8000766:	ea95 0f0c 	teqne	r5, ip
 800076a:	d00c      	beq.n	8000786 <__aeabi_dmul+0x206>
 800076c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000770:	bf18      	it	ne
 8000772:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000776:	d1d1      	bne.n	800071c <__aeabi_dmul+0x19c>
 8000778:	ea81 0103 	eor.w	r1, r1, r3
 800077c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000780:	f04f 0000 	mov.w	r0, #0
 8000784:	bd70      	pop	{r4, r5, r6, pc}
 8000786:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800078a:	bf06      	itte	eq
 800078c:	4610      	moveq	r0, r2
 800078e:	4619      	moveq	r1, r3
 8000790:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000794:	d019      	beq.n	80007ca <__aeabi_dmul+0x24a>
 8000796:	ea94 0f0c 	teq	r4, ip
 800079a:	d102      	bne.n	80007a2 <__aeabi_dmul+0x222>
 800079c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007a0:	d113      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007a2:	ea95 0f0c 	teq	r5, ip
 80007a6:	d105      	bne.n	80007b4 <__aeabi_dmul+0x234>
 80007a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007ac:	bf1c      	itt	ne
 80007ae:	4610      	movne	r0, r2
 80007b0:	4619      	movne	r1, r3
 80007b2:	d10a      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007b4:	ea81 0103 	eor.w	r1, r1, r3
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007bc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007c0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007c4:	f04f 0000 	mov.w	r0, #0
 80007c8:	bd70      	pop	{r4, r5, r6, pc}
 80007ca:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007ce:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007d2:	bd70      	pop	{r4, r5, r6, pc}

080007d4 <__aeabi_ddiv>:
 80007d4:	b570      	push	{r4, r5, r6, lr}
 80007d6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007da:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007de:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007e2:	bf1d      	ittte	ne
 80007e4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007e8:	ea94 0f0c 	teqne	r4, ip
 80007ec:	ea95 0f0c 	teqne	r5, ip
 80007f0:	f000 f8a7 	bleq	8000942 <__aeabi_ddiv+0x16e>
 80007f4:	eba4 0405 	sub.w	r4, r4, r5
 80007f8:	ea81 0e03 	eor.w	lr, r1, r3
 80007fc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000800:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000804:	f000 8088 	beq.w	8000918 <__aeabi_ddiv+0x144>
 8000808:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800080c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000810:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000814:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000818:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800081c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000820:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000824:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000828:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800082c:	429d      	cmp	r5, r3
 800082e:	bf08      	it	eq
 8000830:	4296      	cmpeq	r6, r2
 8000832:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000836:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800083a:	d202      	bcs.n	8000842 <__aeabi_ddiv+0x6e>
 800083c:	085b      	lsrs	r3, r3, #1
 800083e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000842:	1ab6      	subs	r6, r6, r2
 8000844:	eb65 0503 	sbc.w	r5, r5, r3
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000852:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 000c 	orrcs.w	r0, r0, ip
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008b0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008b4:	d018      	beq.n	80008e8 <__aeabi_ddiv+0x114>
 80008b6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ba:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008be:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008c2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008c6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ca:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ce:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008d2:	d1c0      	bne.n	8000856 <__aeabi_ddiv+0x82>
 80008d4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008d8:	d10b      	bne.n	80008f2 <__aeabi_ddiv+0x11e>
 80008da:	ea41 0100 	orr.w	r1, r1, r0
 80008de:	f04f 0000 	mov.w	r0, #0
 80008e2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008e6:	e7b6      	b.n	8000856 <__aeabi_ddiv+0x82>
 80008e8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008ec:	bf04      	itt	eq
 80008ee:	4301      	orreq	r1, r0
 80008f0:	2000      	moveq	r0, #0
 80008f2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008f6:	bf88      	it	hi
 80008f8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008fc:	f63f aeaf 	bhi.w	800065e <__aeabi_dmul+0xde>
 8000900:	ebb5 0c03 	subs.w	ip, r5, r3
 8000904:	bf04      	itt	eq
 8000906:	ebb6 0c02 	subseq.w	ip, r6, r2
 800090a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800090e:	f150 0000 	adcs.w	r0, r0, #0
 8000912:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000916:	bd70      	pop	{r4, r5, r6, pc}
 8000918:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800091c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000920:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000924:	bfc2      	ittt	gt
 8000926:	ebd4 050c 	rsbsgt	r5, r4, ip
 800092a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800092e:	bd70      	popgt	{r4, r5, r6, pc}
 8000930:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000934:	f04f 0e00 	mov.w	lr, #0
 8000938:	3c01      	subs	r4, #1
 800093a:	e690      	b.n	800065e <__aeabi_dmul+0xde>
 800093c:	ea45 0e06 	orr.w	lr, r5, r6
 8000940:	e68d      	b.n	800065e <__aeabi_dmul+0xde>
 8000942:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000946:	ea94 0f0c 	teq	r4, ip
 800094a:	bf08      	it	eq
 800094c:	ea95 0f0c 	teqeq	r5, ip
 8000950:	f43f af3b 	beq.w	80007ca <__aeabi_dmul+0x24a>
 8000954:	ea94 0f0c 	teq	r4, ip
 8000958:	d10a      	bne.n	8000970 <__aeabi_ddiv+0x19c>
 800095a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800095e:	f47f af34 	bne.w	80007ca <__aeabi_dmul+0x24a>
 8000962:	ea95 0f0c 	teq	r5, ip
 8000966:	f47f af25 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800096a:	4610      	mov	r0, r2
 800096c:	4619      	mov	r1, r3
 800096e:	e72c      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000970:	ea95 0f0c 	teq	r5, ip
 8000974:	d106      	bne.n	8000984 <__aeabi_ddiv+0x1b0>
 8000976:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800097a:	f43f aefd 	beq.w	8000778 <__aeabi_dmul+0x1f8>
 800097e:	4610      	mov	r0, r2
 8000980:	4619      	mov	r1, r3
 8000982:	e722      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000984:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800098e:	f47f aec5 	bne.w	800071c <__aeabi_dmul+0x19c>
 8000992:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000996:	f47f af0d 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800099a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800099e:	f47f aeeb 	bne.w	8000778 <__aeabi_dmul+0x1f8>
 80009a2:	e712      	b.n	80007ca <__aeabi_dmul+0x24a>

080009a4 <__gedf2>:
 80009a4:	f04f 3cff 	mov.w	ip, #4294967295
 80009a8:	e006      	b.n	80009b8 <__cmpdf2+0x4>
 80009aa:	bf00      	nop

080009ac <__ledf2>:
 80009ac:	f04f 0c01 	mov.w	ip, #1
 80009b0:	e002      	b.n	80009b8 <__cmpdf2+0x4>
 80009b2:	bf00      	nop

080009b4 <__cmpdf2>:
 80009b4:	f04f 0c01 	mov.w	ip, #1
 80009b8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009bc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009c0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009c4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009c8:	bf18      	it	ne
 80009ca:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009ce:	d01b      	beq.n	8000a08 <__cmpdf2+0x54>
 80009d0:	b001      	add	sp, #4
 80009d2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009d6:	bf0c      	ite	eq
 80009d8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009dc:	ea91 0f03 	teqne	r1, r3
 80009e0:	bf02      	ittt	eq
 80009e2:	ea90 0f02 	teqeq	r0, r2
 80009e6:	2000      	moveq	r0, #0
 80009e8:	4770      	bxeq	lr
 80009ea:	f110 0f00 	cmn.w	r0, #0
 80009ee:	ea91 0f03 	teq	r1, r3
 80009f2:	bf58      	it	pl
 80009f4:	4299      	cmppl	r1, r3
 80009f6:	bf08      	it	eq
 80009f8:	4290      	cmpeq	r0, r2
 80009fa:	bf2c      	ite	cs
 80009fc:	17d8      	asrcs	r0, r3, #31
 80009fe:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a02:	f040 0001 	orr.w	r0, r0, #1
 8000a06:	4770      	bx	lr
 8000a08:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a0c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a10:	d102      	bne.n	8000a18 <__cmpdf2+0x64>
 8000a12:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a16:	d107      	bne.n	8000a28 <__cmpdf2+0x74>
 8000a18:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d1d6      	bne.n	80009d0 <__cmpdf2+0x1c>
 8000a22:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a26:	d0d3      	beq.n	80009d0 <__cmpdf2+0x1c>
 8000a28:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a2c:	4770      	bx	lr
 8000a2e:	bf00      	nop

08000a30 <__aeabi_cdrcmple>:
 8000a30:	4684      	mov	ip, r0
 8000a32:	4610      	mov	r0, r2
 8000a34:	4662      	mov	r2, ip
 8000a36:	468c      	mov	ip, r1
 8000a38:	4619      	mov	r1, r3
 8000a3a:	4663      	mov	r3, ip
 8000a3c:	e000      	b.n	8000a40 <__aeabi_cdcmpeq>
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdcmpeq>:
 8000a40:	b501      	push	{r0, lr}
 8000a42:	f7ff ffb7 	bl	80009b4 <__cmpdf2>
 8000a46:	2800      	cmp	r0, #0
 8000a48:	bf48      	it	mi
 8000a4a:	f110 0f00 	cmnmi.w	r0, #0
 8000a4e:	bd01      	pop	{r0, pc}

08000a50 <__aeabi_dcmpeq>:
 8000a50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a54:	f7ff fff4 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a58:	bf0c      	ite	eq
 8000a5a:	2001      	moveq	r0, #1
 8000a5c:	2000      	movne	r0, #0
 8000a5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a62:	bf00      	nop

08000a64 <__aeabi_dcmplt>:
 8000a64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a68:	f7ff ffea 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a6c:	bf34      	ite	cc
 8000a6e:	2001      	movcc	r0, #1
 8000a70:	2000      	movcs	r0, #0
 8000a72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a76:	bf00      	nop

08000a78 <__aeabi_dcmple>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff ffe0 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a80:	bf94      	ite	ls
 8000a82:	2001      	movls	r0, #1
 8000a84:	2000      	movhi	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmpge>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffce 	bl	8000a30 <__aeabi_cdrcmple>
 8000a94:	bf94      	ite	ls
 8000a96:	2001      	movls	r0, #1
 8000a98:	2000      	movhi	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmpgt>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffc4 	bl	8000a30 <__aeabi_cdrcmple>
 8000aa8:	bf34      	ite	cc
 8000aaa:	2001      	movcc	r0, #1
 8000aac:	2000      	movcs	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_d2uiz>:
 8000ab4:	004a      	lsls	r2, r1, #1
 8000ab6:	d211      	bcs.n	8000adc <__aeabi_d2uiz+0x28>
 8000ab8:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000abc:	d211      	bcs.n	8000ae2 <__aeabi_d2uiz+0x2e>
 8000abe:	d50d      	bpl.n	8000adc <__aeabi_d2uiz+0x28>
 8000ac0:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000ac4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ac8:	d40e      	bmi.n	8000ae8 <__aeabi_d2uiz+0x34>
 8000aca:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ace:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ad2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ad6:	fa23 f002 	lsr.w	r0, r3, r2
 8000ada:	4770      	bx	lr
 8000adc:	f04f 0000 	mov.w	r0, #0
 8000ae0:	4770      	bx	lr
 8000ae2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ae6:	d102      	bne.n	8000aee <__aeabi_d2uiz+0x3a>
 8000ae8:	f04f 30ff 	mov.w	r0, #4294967295
 8000aec:	4770      	bx	lr
 8000aee:	f04f 0000 	mov.w	r0, #0
 8000af2:	4770      	bx	lr

08000af4 <__aeabi_d2f>:
 8000af4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000af8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000afc:	bf24      	itt	cs
 8000afe:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000b02:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000b06:	d90d      	bls.n	8000b24 <__aeabi_d2f+0x30>
 8000b08:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000b0c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b10:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b14:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000b18:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b1c:	bf08      	it	eq
 8000b1e:	f020 0001 	biceq.w	r0, r0, #1
 8000b22:	4770      	bx	lr
 8000b24:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000b28:	d121      	bne.n	8000b6e <__aeabi_d2f+0x7a>
 8000b2a:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b2e:	bfbc      	itt	lt
 8000b30:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b34:	4770      	bxlt	lr
 8000b36:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b3a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b3e:	f1c2 0218 	rsb	r2, r2, #24
 8000b42:	f1c2 0c20 	rsb	ip, r2, #32
 8000b46:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b4a:	fa20 f002 	lsr.w	r0, r0, r2
 8000b4e:	bf18      	it	ne
 8000b50:	f040 0001 	orrne.w	r0, r0, #1
 8000b54:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b58:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b5c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b60:	ea40 000c 	orr.w	r0, r0, ip
 8000b64:	fa23 f302 	lsr.w	r3, r3, r2
 8000b68:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b6c:	e7cc      	b.n	8000b08 <__aeabi_d2f+0x14>
 8000b6e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b72:	d107      	bne.n	8000b84 <__aeabi_d2f+0x90>
 8000b74:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b78:	bf1e      	ittt	ne
 8000b7a:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b7e:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b82:	4770      	bxne	lr
 8000b84:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b88:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b8c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b90:	4770      	bx	lr
 8000b92:	bf00      	nop

08000b94 <__aeabi_uldivmod>:
 8000b94:	b953      	cbnz	r3, 8000bac <__aeabi_uldivmod+0x18>
 8000b96:	b94a      	cbnz	r2, 8000bac <__aeabi_uldivmod+0x18>
 8000b98:	2900      	cmp	r1, #0
 8000b9a:	bf08      	it	eq
 8000b9c:	2800      	cmpeq	r0, #0
 8000b9e:	bf1c      	itt	ne
 8000ba0:	f04f 31ff 	movne.w	r1, #4294967295
 8000ba4:	f04f 30ff 	movne.w	r0, #4294967295
 8000ba8:	f000 b988 	b.w	8000ebc <__aeabi_idiv0>
 8000bac:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bb0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bb4:	f000 f806 	bl	8000bc4 <__udivmoddi4>
 8000bb8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bbc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bc0:	b004      	add	sp, #16
 8000bc2:	4770      	bx	lr

08000bc4 <__udivmoddi4>:
 8000bc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bc8:	9d08      	ldr	r5, [sp, #32]
 8000bca:	468e      	mov	lr, r1
 8000bcc:	4604      	mov	r4, r0
 8000bce:	4688      	mov	r8, r1
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d14a      	bne.n	8000c6a <__udivmoddi4+0xa6>
 8000bd4:	428a      	cmp	r2, r1
 8000bd6:	4617      	mov	r7, r2
 8000bd8:	d962      	bls.n	8000ca0 <__udivmoddi4+0xdc>
 8000bda:	fab2 f682 	clz	r6, r2
 8000bde:	b14e      	cbz	r6, 8000bf4 <__udivmoddi4+0x30>
 8000be0:	f1c6 0320 	rsb	r3, r6, #32
 8000be4:	fa01 f806 	lsl.w	r8, r1, r6
 8000be8:	fa20 f303 	lsr.w	r3, r0, r3
 8000bec:	40b7      	lsls	r7, r6
 8000bee:	ea43 0808 	orr.w	r8, r3, r8
 8000bf2:	40b4      	lsls	r4, r6
 8000bf4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000bf8:	fa1f fc87 	uxth.w	ip, r7
 8000bfc:	fbb8 f1fe 	udiv	r1, r8, lr
 8000c00:	0c23      	lsrs	r3, r4, #16
 8000c02:	fb0e 8811 	mls	r8, lr, r1, r8
 8000c06:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c0a:	fb01 f20c 	mul.w	r2, r1, ip
 8000c0e:	429a      	cmp	r2, r3
 8000c10:	d909      	bls.n	8000c26 <__udivmoddi4+0x62>
 8000c12:	18fb      	adds	r3, r7, r3
 8000c14:	f101 30ff 	add.w	r0, r1, #4294967295
 8000c18:	f080 80ea 	bcs.w	8000df0 <__udivmoddi4+0x22c>
 8000c1c:	429a      	cmp	r2, r3
 8000c1e:	f240 80e7 	bls.w	8000df0 <__udivmoddi4+0x22c>
 8000c22:	3902      	subs	r1, #2
 8000c24:	443b      	add	r3, r7
 8000c26:	1a9a      	subs	r2, r3, r2
 8000c28:	b2a3      	uxth	r3, r4
 8000c2a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c2e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c32:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c36:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c3a:	459c      	cmp	ip, r3
 8000c3c:	d909      	bls.n	8000c52 <__udivmoddi4+0x8e>
 8000c3e:	18fb      	adds	r3, r7, r3
 8000c40:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c44:	f080 80d6 	bcs.w	8000df4 <__udivmoddi4+0x230>
 8000c48:	459c      	cmp	ip, r3
 8000c4a:	f240 80d3 	bls.w	8000df4 <__udivmoddi4+0x230>
 8000c4e:	443b      	add	r3, r7
 8000c50:	3802      	subs	r0, #2
 8000c52:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c56:	eba3 030c 	sub.w	r3, r3, ip
 8000c5a:	2100      	movs	r1, #0
 8000c5c:	b11d      	cbz	r5, 8000c66 <__udivmoddi4+0xa2>
 8000c5e:	40f3      	lsrs	r3, r6
 8000c60:	2200      	movs	r2, #0
 8000c62:	e9c5 3200 	strd	r3, r2, [r5]
 8000c66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c6a:	428b      	cmp	r3, r1
 8000c6c:	d905      	bls.n	8000c7a <__udivmoddi4+0xb6>
 8000c6e:	b10d      	cbz	r5, 8000c74 <__udivmoddi4+0xb0>
 8000c70:	e9c5 0100 	strd	r0, r1, [r5]
 8000c74:	2100      	movs	r1, #0
 8000c76:	4608      	mov	r0, r1
 8000c78:	e7f5      	b.n	8000c66 <__udivmoddi4+0xa2>
 8000c7a:	fab3 f183 	clz	r1, r3
 8000c7e:	2900      	cmp	r1, #0
 8000c80:	d146      	bne.n	8000d10 <__udivmoddi4+0x14c>
 8000c82:	4573      	cmp	r3, lr
 8000c84:	d302      	bcc.n	8000c8c <__udivmoddi4+0xc8>
 8000c86:	4282      	cmp	r2, r0
 8000c88:	f200 8105 	bhi.w	8000e96 <__udivmoddi4+0x2d2>
 8000c8c:	1a84      	subs	r4, r0, r2
 8000c8e:	eb6e 0203 	sbc.w	r2, lr, r3
 8000c92:	2001      	movs	r0, #1
 8000c94:	4690      	mov	r8, r2
 8000c96:	2d00      	cmp	r5, #0
 8000c98:	d0e5      	beq.n	8000c66 <__udivmoddi4+0xa2>
 8000c9a:	e9c5 4800 	strd	r4, r8, [r5]
 8000c9e:	e7e2      	b.n	8000c66 <__udivmoddi4+0xa2>
 8000ca0:	2a00      	cmp	r2, #0
 8000ca2:	f000 8090 	beq.w	8000dc6 <__udivmoddi4+0x202>
 8000ca6:	fab2 f682 	clz	r6, r2
 8000caa:	2e00      	cmp	r6, #0
 8000cac:	f040 80a4 	bne.w	8000df8 <__udivmoddi4+0x234>
 8000cb0:	1a8a      	subs	r2, r1, r2
 8000cb2:	0c03      	lsrs	r3, r0, #16
 8000cb4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cb8:	b280      	uxth	r0, r0
 8000cba:	b2bc      	uxth	r4, r7
 8000cbc:	2101      	movs	r1, #1
 8000cbe:	fbb2 fcfe 	udiv	ip, r2, lr
 8000cc2:	fb0e 221c 	mls	r2, lr, ip, r2
 8000cc6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000cca:	fb04 f20c 	mul.w	r2, r4, ip
 8000cce:	429a      	cmp	r2, r3
 8000cd0:	d907      	bls.n	8000ce2 <__udivmoddi4+0x11e>
 8000cd2:	18fb      	adds	r3, r7, r3
 8000cd4:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000cd8:	d202      	bcs.n	8000ce0 <__udivmoddi4+0x11c>
 8000cda:	429a      	cmp	r2, r3
 8000cdc:	f200 80e0 	bhi.w	8000ea0 <__udivmoddi4+0x2dc>
 8000ce0:	46c4      	mov	ip, r8
 8000ce2:	1a9b      	subs	r3, r3, r2
 8000ce4:	fbb3 f2fe 	udiv	r2, r3, lr
 8000ce8:	fb0e 3312 	mls	r3, lr, r2, r3
 8000cec:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000cf0:	fb02 f404 	mul.w	r4, r2, r4
 8000cf4:	429c      	cmp	r4, r3
 8000cf6:	d907      	bls.n	8000d08 <__udivmoddi4+0x144>
 8000cf8:	18fb      	adds	r3, r7, r3
 8000cfa:	f102 30ff 	add.w	r0, r2, #4294967295
 8000cfe:	d202      	bcs.n	8000d06 <__udivmoddi4+0x142>
 8000d00:	429c      	cmp	r4, r3
 8000d02:	f200 80ca 	bhi.w	8000e9a <__udivmoddi4+0x2d6>
 8000d06:	4602      	mov	r2, r0
 8000d08:	1b1b      	subs	r3, r3, r4
 8000d0a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000d0e:	e7a5      	b.n	8000c5c <__udivmoddi4+0x98>
 8000d10:	f1c1 0620 	rsb	r6, r1, #32
 8000d14:	408b      	lsls	r3, r1
 8000d16:	fa22 f706 	lsr.w	r7, r2, r6
 8000d1a:	431f      	orrs	r7, r3
 8000d1c:	fa0e f401 	lsl.w	r4, lr, r1
 8000d20:	fa20 f306 	lsr.w	r3, r0, r6
 8000d24:	fa2e fe06 	lsr.w	lr, lr, r6
 8000d28:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000d2c:	4323      	orrs	r3, r4
 8000d2e:	fa00 f801 	lsl.w	r8, r0, r1
 8000d32:	fa1f fc87 	uxth.w	ip, r7
 8000d36:	fbbe f0f9 	udiv	r0, lr, r9
 8000d3a:	0c1c      	lsrs	r4, r3, #16
 8000d3c:	fb09 ee10 	mls	lr, r9, r0, lr
 8000d40:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000d44:	fb00 fe0c 	mul.w	lr, r0, ip
 8000d48:	45a6      	cmp	lr, r4
 8000d4a:	fa02 f201 	lsl.w	r2, r2, r1
 8000d4e:	d909      	bls.n	8000d64 <__udivmoddi4+0x1a0>
 8000d50:	193c      	adds	r4, r7, r4
 8000d52:	f100 3aff 	add.w	sl, r0, #4294967295
 8000d56:	f080 809c 	bcs.w	8000e92 <__udivmoddi4+0x2ce>
 8000d5a:	45a6      	cmp	lr, r4
 8000d5c:	f240 8099 	bls.w	8000e92 <__udivmoddi4+0x2ce>
 8000d60:	3802      	subs	r0, #2
 8000d62:	443c      	add	r4, r7
 8000d64:	eba4 040e 	sub.w	r4, r4, lr
 8000d68:	fa1f fe83 	uxth.w	lr, r3
 8000d6c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d70:	fb09 4413 	mls	r4, r9, r3, r4
 8000d74:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000d78:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d7c:	45a4      	cmp	ip, r4
 8000d7e:	d908      	bls.n	8000d92 <__udivmoddi4+0x1ce>
 8000d80:	193c      	adds	r4, r7, r4
 8000d82:	f103 3eff 	add.w	lr, r3, #4294967295
 8000d86:	f080 8082 	bcs.w	8000e8e <__udivmoddi4+0x2ca>
 8000d8a:	45a4      	cmp	ip, r4
 8000d8c:	d97f      	bls.n	8000e8e <__udivmoddi4+0x2ca>
 8000d8e:	3b02      	subs	r3, #2
 8000d90:	443c      	add	r4, r7
 8000d92:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000d96:	eba4 040c 	sub.w	r4, r4, ip
 8000d9a:	fba0 ec02 	umull	lr, ip, r0, r2
 8000d9e:	4564      	cmp	r4, ip
 8000da0:	4673      	mov	r3, lr
 8000da2:	46e1      	mov	r9, ip
 8000da4:	d362      	bcc.n	8000e6c <__udivmoddi4+0x2a8>
 8000da6:	d05f      	beq.n	8000e68 <__udivmoddi4+0x2a4>
 8000da8:	b15d      	cbz	r5, 8000dc2 <__udivmoddi4+0x1fe>
 8000daa:	ebb8 0203 	subs.w	r2, r8, r3
 8000dae:	eb64 0409 	sbc.w	r4, r4, r9
 8000db2:	fa04 f606 	lsl.w	r6, r4, r6
 8000db6:	fa22 f301 	lsr.w	r3, r2, r1
 8000dba:	431e      	orrs	r6, r3
 8000dbc:	40cc      	lsrs	r4, r1
 8000dbe:	e9c5 6400 	strd	r6, r4, [r5]
 8000dc2:	2100      	movs	r1, #0
 8000dc4:	e74f      	b.n	8000c66 <__udivmoddi4+0xa2>
 8000dc6:	fbb1 fcf2 	udiv	ip, r1, r2
 8000dca:	0c01      	lsrs	r1, r0, #16
 8000dcc:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000dd0:	b280      	uxth	r0, r0
 8000dd2:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000dd6:	463b      	mov	r3, r7
 8000dd8:	4638      	mov	r0, r7
 8000dda:	463c      	mov	r4, r7
 8000ddc:	46b8      	mov	r8, r7
 8000dde:	46be      	mov	lr, r7
 8000de0:	2620      	movs	r6, #32
 8000de2:	fbb1 f1f7 	udiv	r1, r1, r7
 8000de6:	eba2 0208 	sub.w	r2, r2, r8
 8000dea:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000dee:	e766      	b.n	8000cbe <__udivmoddi4+0xfa>
 8000df0:	4601      	mov	r1, r0
 8000df2:	e718      	b.n	8000c26 <__udivmoddi4+0x62>
 8000df4:	4610      	mov	r0, r2
 8000df6:	e72c      	b.n	8000c52 <__udivmoddi4+0x8e>
 8000df8:	f1c6 0220 	rsb	r2, r6, #32
 8000dfc:	fa2e f302 	lsr.w	r3, lr, r2
 8000e00:	40b7      	lsls	r7, r6
 8000e02:	40b1      	lsls	r1, r6
 8000e04:	fa20 f202 	lsr.w	r2, r0, r2
 8000e08:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e0c:	430a      	orrs	r2, r1
 8000e0e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000e12:	b2bc      	uxth	r4, r7
 8000e14:	fb0e 3318 	mls	r3, lr, r8, r3
 8000e18:	0c11      	lsrs	r1, r2, #16
 8000e1a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e1e:	fb08 f904 	mul.w	r9, r8, r4
 8000e22:	40b0      	lsls	r0, r6
 8000e24:	4589      	cmp	r9, r1
 8000e26:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000e2a:	b280      	uxth	r0, r0
 8000e2c:	d93e      	bls.n	8000eac <__udivmoddi4+0x2e8>
 8000e2e:	1879      	adds	r1, r7, r1
 8000e30:	f108 3cff 	add.w	ip, r8, #4294967295
 8000e34:	d201      	bcs.n	8000e3a <__udivmoddi4+0x276>
 8000e36:	4589      	cmp	r9, r1
 8000e38:	d81f      	bhi.n	8000e7a <__udivmoddi4+0x2b6>
 8000e3a:	eba1 0109 	sub.w	r1, r1, r9
 8000e3e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e42:	fb09 f804 	mul.w	r8, r9, r4
 8000e46:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e4a:	b292      	uxth	r2, r2
 8000e4c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e50:	4542      	cmp	r2, r8
 8000e52:	d229      	bcs.n	8000ea8 <__udivmoddi4+0x2e4>
 8000e54:	18ba      	adds	r2, r7, r2
 8000e56:	f109 31ff 	add.w	r1, r9, #4294967295
 8000e5a:	d2c4      	bcs.n	8000de6 <__udivmoddi4+0x222>
 8000e5c:	4542      	cmp	r2, r8
 8000e5e:	d2c2      	bcs.n	8000de6 <__udivmoddi4+0x222>
 8000e60:	f1a9 0102 	sub.w	r1, r9, #2
 8000e64:	443a      	add	r2, r7
 8000e66:	e7be      	b.n	8000de6 <__udivmoddi4+0x222>
 8000e68:	45f0      	cmp	r8, lr
 8000e6a:	d29d      	bcs.n	8000da8 <__udivmoddi4+0x1e4>
 8000e6c:	ebbe 0302 	subs.w	r3, lr, r2
 8000e70:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000e74:	3801      	subs	r0, #1
 8000e76:	46e1      	mov	r9, ip
 8000e78:	e796      	b.n	8000da8 <__udivmoddi4+0x1e4>
 8000e7a:	eba7 0909 	sub.w	r9, r7, r9
 8000e7e:	4449      	add	r1, r9
 8000e80:	f1a8 0c02 	sub.w	ip, r8, #2
 8000e84:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e88:	fb09 f804 	mul.w	r8, r9, r4
 8000e8c:	e7db      	b.n	8000e46 <__udivmoddi4+0x282>
 8000e8e:	4673      	mov	r3, lr
 8000e90:	e77f      	b.n	8000d92 <__udivmoddi4+0x1ce>
 8000e92:	4650      	mov	r0, sl
 8000e94:	e766      	b.n	8000d64 <__udivmoddi4+0x1a0>
 8000e96:	4608      	mov	r0, r1
 8000e98:	e6fd      	b.n	8000c96 <__udivmoddi4+0xd2>
 8000e9a:	443b      	add	r3, r7
 8000e9c:	3a02      	subs	r2, #2
 8000e9e:	e733      	b.n	8000d08 <__udivmoddi4+0x144>
 8000ea0:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ea4:	443b      	add	r3, r7
 8000ea6:	e71c      	b.n	8000ce2 <__udivmoddi4+0x11e>
 8000ea8:	4649      	mov	r1, r9
 8000eaa:	e79c      	b.n	8000de6 <__udivmoddi4+0x222>
 8000eac:	eba1 0109 	sub.w	r1, r1, r9
 8000eb0:	46c4      	mov	ip, r8
 8000eb2:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eb6:	fb09 f804 	mul.w	r8, r9, r4
 8000eba:	e7c4      	b.n	8000e46 <__udivmoddi4+0x282>

08000ebc <__aeabi_idiv0>:
 8000ebc:	4770      	bx	lr
 8000ebe:	bf00      	nop

08000ec0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	af00      	add	r7, sp, #0

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */

	HAL_Init();
 8000ec4:	f001 ffaf 	bl	8002e26 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ec8:	f000 f832 	bl	8000f30 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ecc:	f000 f9d6 	bl	800127c <MX_GPIO_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000ed0:	f000 f9a6 	bl	8001220 <MX_USB_OTG_FS_PCD_Init>
  MX_ADC1_Init();
 8000ed4:	f000 f894 	bl	8001000 <MX_ADC1_Init>
  MX_TIM3_Init();
 8000ed8:	f000 f8e4 	bl	80010a4 <MX_TIM3_Init>
  MX_USART2_UART_Init();
 8000edc:	f000 f970 	bl	80011c0 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);                   //Red LED
 8000ee0:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000ee4:	480f      	ldr	r0, [pc, #60]	@ (8000f24 <main+0x64>)
 8000ee6:	f003 f834 	bl	8003f52 <HAL_GPIO_TogglePin>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_ADC_Start_IT(&hadc1); //Potentiometer trigger
 8000eea:	480f      	ldr	r0, [pc, #60]	@ (8000f28 <main+0x68>)
 8000eec:	f002 f860 	bl	8002fb0 <HAL_ADC_Start_IT>

	  if (toggle_ISR3 == 1)   // Reset pulse signal | Needed here as HAL_Delay doesn't work in ISR
 8000ef0:	4b0e      	ldr	r3, [pc, #56]	@ (8000f2c <main+0x6c>)
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	2b01      	cmp	r3, #1
 8000ef6:	d111      	bne.n	8000f1c <main+0x5c>
	  {
		  toggle_ISR3 = 0;
 8000ef8:	4b0c      	ldr	r3, [pc, #48]	@ (8000f2c <main+0x6c>)
 8000efa:	2200      	movs	r2, #0
 8000efc:	601a      	str	r2, [r3, #0]
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET); //Reset signal pulse on
 8000efe:	2201      	movs	r2, #1
 8000f00:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000f04:	4807      	ldr	r0, [pc, #28]	@ (8000f24 <main+0x64>)
 8000f06:	f003 f80b 	bl	8003f20 <HAL_GPIO_WritePin>
		  HAL_Delay(100);
 8000f0a:	2064      	movs	r0, #100	@ 0x64
 8000f0c:	f001 ffe8 	bl	8002ee0 <HAL_Delay>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_RESET);  //Reset signal pulse off
 8000f10:	2200      	movs	r2, #0
 8000f12:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000f16:	4803      	ldr	r0, [pc, #12]	@ (8000f24 <main+0x64>)
 8000f18:	f003 f802 	bl	8003f20 <HAL_GPIO_WritePin>
	  }
	  HAL_Delay(250); // Delay by quarter second
 8000f1c:	20fa      	movs	r0, #250	@ 0xfa
 8000f1e:	f001 ffdf 	bl	8002ee0 <HAL_Delay>
	  HAL_ADC_Start_IT(&hadc1); //Potentiometer trigger
 8000f22:	e7e2      	b.n	8000eea <main+0x2a>
 8000f24:	40020400 	.word	0x40020400
 8000f28:	200000a4 	.word	0x200000a4
 8000f2c:	200006ac 	.word	0x200006ac

08000f30 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b094      	sub	sp, #80	@ 0x50
 8000f34:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f36:	f107 0320 	add.w	r3, r7, #32
 8000f3a:	2230      	movs	r2, #48	@ 0x30
 8000f3c:	2100      	movs	r1, #0
 8000f3e:	4618      	mov	r0, r3
 8000f40:	f006 ff52 	bl	8007de8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f44:	f107 030c 	add.w	r3, r7, #12
 8000f48:	2200      	movs	r2, #0
 8000f4a:	601a      	str	r2, [r3, #0]
 8000f4c:	605a      	str	r2, [r3, #4]
 8000f4e:	609a      	str	r2, [r3, #8]
 8000f50:	60da      	str	r2, [r3, #12]
 8000f52:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000f54:	f003 f96a 	bl	800422c <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f58:	4b27      	ldr	r3, [pc, #156]	@ (8000ff8 <SystemClock_Config+0xc8>)
 8000f5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f5c:	4a26      	ldr	r2, [pc, #152]	@ (8000ff8 <SystemClock_Config+0xc8>)
 8000f5e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f62:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f64:	4b24      	ldr	r3, [pc, #144]	@ (8000ff8 <SystemClock_Config+0xc8>)
 8000f66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f68:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f6c:	60bb      	str	r3, [r7, #8]
 8000f6e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000f70:	4b22      	ldr	r3, [pc, #136]	@ (8000ffc <SystemClock_Config+0xcc>)
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000f78:	4a20      	ldr	r2, [pc, #128]	@ (8000ffc <SystemClock_Config+0xcc>)
 8000f7a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000f7e:	6013      	str	r3, [r2, #0]
 8000f80:	4b1e      	ldr	r3, [pc, #120]	@ (8000ffc <SystemClock_Config+0xcc>)
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000f88:	607b      	str	r3, [r7, #4]
 8000f8a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000f8c:	2301      	movs	r3, #1
 8000f8e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000f90:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000f94:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f96:	2302      	movs	r3, #2
 8000f98:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f9a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000f9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000fa0:	2304      	movs	r3, #4
 8000fa2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000fa4:	2348      	movs	r3, #72	@ 0x48
 8000fa6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000fa8:	2302      	movs	r3, #2
 8000faa:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000fac:	2303      	movs	r3, #3
 8000fae:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fb0:	f107 0320 	add.w	r3, r7, #32
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	f003 f949 	bl	800424c <HAL_RCC_OscConfig>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d001      	beq.n	8000fc4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000fc0:	f001 fcd0 	bl	8002964 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fc4:	230f      	movs	r3, #15
 8000fc6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fc8:	2302      	movs	r3, #2
 8000fca:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000fd0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000fd4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000fda:	f107 030c 	add.w	r3, r7, #12
 8000fde:	2102      	movs	r1, #2
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	f003 fbd7 	bl	8004794 <HAL_RCC_ClockConfig>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d001      	beq.n	8000ff0 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000fec:	f001 fcba 	bl	8002964 <Error_Handler>
  }
}
 8000ff0:	bf00      	nop
 8000ff2:	3750      	adds	r7, #80	@ 0x50
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	bd80      	pop	{r7, pc}
 8000ff8:	40023800 	.word	0x40023800
 8000ffc:	40007000 	.word	0x40007000

08001000 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b084      	sub	sp, #16
 8001004:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001006:	463b      	mov	r3, r7
 8001008:	2200      	movs	r2, #0
 800100a:	601a      	str	r2, [r3, #0]
 800100c:	605a      	str	r2, [r3, #4]
 800100e:	609a      	str	r2, [r3, #8]
 8001010:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001012:	4b21      	ldr	r3, [pc, #132]	@ (8001098 <MX_ADC1_Init+0x98>)
 8001014:	4a21      	ldr	r2, [pc, #132]	@ (800109c <MX_ADC1_Init+0x9c>)
 8001016:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001018:	4b1f      	ldr	r3, [pc, #124]	@ (8001098 <MX_ADC1_Init+0x98>)
 800101a:	2200      	movs	r2, #0
 800101c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800101e:	4b1e      	ldr	r3, [pc, #120]	@ (8001098 <MX_ADC1_Init+0x98>)
 8001020:	2200      	movs	r2, #0
 8001022:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001024:	4b1c      	ldr	r3, [pc, #112]	@ (8001098 <MX_ADC1_Init+0x98>)
 8001026:	2200      	movs	r2, #0
 8001028:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800102a:	4b1b      	ldr	r3, [pc, #108]	@ (8001098 <MX_ADC1_Init+0x98>)
 800102c:	2200      	movs	r2, #0
 800102e:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001030:	4b19      	ldr	r3, [pc, #100]	@ (8001098 <MX_ADC1_Init+0x98>)
 8001032:	2200      	movs	r2, #0
 8001034:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001038:	4b17      	ldr	r3, [pc, #92]	@ (8001098 <MX_ADC1_Init+0x98>)
 800103a:	2200      	movs	r2, #0
 800103c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800103e:	4b16      	ldr	r3, [pc, #88]	@ (8001098 <MX_ADC1_Init+0x98>)
 8001040:	4a17      	ldr	r2, [pc, #92]	@ (80010a0 <MX_ADC1_Init+0xa0>)
 8001042:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001044:	4b14      	ldr	r3, [pc, #80]	@ (8001098 <MX_ADC1_Init+0x98>)
 8001046:	2200      	movs	r2, #0
 8001048:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800104a:	4b13      	ldr	r3, [pc, #76]	@ (8001098 <MX_ADC1_Init+0x98>)
 800104c:	2201      	movs	r2, #1
 800104e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001050:	4b11      	ldr	r3, [pc, #68]	@ (8001098 <MX_ADC1_Init+0x98>)
 8001052:	2200      	movs	r2, #0
 8001054:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001058:	4b0f      	ldr	r3, [pc, #60]	@ (8001098 <MX_ADC1_Init+0x98>)
 800105a:	2201      	movs	r2, #1
 800105c:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800105e:	480e      	ldr	r0, [pc, #56]	@ (8001098 <MX_ADC1_Init+0x98>)
 8001060:	f001 ff62 	bl	8002f28 <HAL_ADC_Init>
 8001064:	4603      	mov	r3, r0
 8001066:	2b00      	cmp	r3, #0
 8001068:	d001      	beq.n	800106e <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800106a:	f001 fc7b 	bl	8002964 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800106e:	2300      	movs	r3, #0
 8001070:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001072:	2301      	movs	r3, #1
 8001074:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001076:	2300      	movs	r3, #0
 8001078:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800107a:	463b      	mov	r3, r7
 800107c:	4619      	mov	r1, r3
 800107e:	4806      	ldr	r0, [pc, #24]	@ (8001098 <MX_ADC1_Init+0x98>)
 8001080:	f002 f9a0 	bl	80033c4 <HAL_ADC_ConfigChannel>
 8001084:	4603      	mov	r3, r0
 8001086:	2b00      	cmp	r3, #0
 8001088:	d001      	beq.n	800108e <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 800108a:	f001 fc6b 	bl	8002964 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800108e:	bf00      	nop
 8001090:	3710      	adds	r7, #16
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}
 8001096:	bf00      	nop
 8001098:	200000a4 	.word	0x200000a4
 800109c:	40012000 	.word	0x40012000
 80010a0:	0f000001 	.word	0x0f000001

080010a4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b08e      	sub	sp, #56	@ 0x38
 80010a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */
     //Timer 3 is set to 10kHz with best possible resolution
  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80010aa:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80010ae:	2200      	movs	r2, #0
 80010b0:	601a      	str	r2, [r3, #0]
 80010b2:	605a      	str	r2, [r3, #4]
 80010b4:	609a      	str	r2, [r3, #8]
 80010b6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010b8:	f107 031c 	add.w	r3, r7, #28
 80010bc:	2200      	movs	r2, #0
 80010be:	601a      	str	r2, [r3, #0]
 80010c0:	605a      	str	r2, [r3, #4]
 80010c2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80010c4:	463b      	mov	r3, r7
 80010c6:	2200      	movs	r2, #0
 80010c8:	601a      	str	r2, [r3, #0]
 80010ca:	605a      	str	r2, [r3, #4]
 80010cc:	609a      	str	r2, [r3, #8]
 80010ce:	60da      	str	r2, [r3, #12]
 80010d0:	611a      	str	r2, [r3, #16]
 80010d2:	615a      	str	r2, [r3, #20]
 80010d4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80010d6:	4b38      	ldr	r3, [pc, #224]	@ (80011b8 <MX_TIM3_Init+0x114>)
 80010d8:	4a38      	ldr	r2, [pc, #224]	@ (80011bc <MX_TIM3_Init+0x118>)
 80010da:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80010dc:	4b36      	ldr	r3, [pc, #216]	@ (80011b8 <MX_TIM3_Init+0x114>)
 80010de:	2200      	movs	r2, #0
 80010e0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED3;
 80010e2:	4b35      	ldr	r3, [pc, #212]	@ (80011b8 <MX_TIM3_Init+0x114>)
 80010e4:	2260      	movs	r2, #96	@ 0x60
 80010e6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 7200 - 1;
 80010e8:	4b33      	ldr	r3, [pc, #204]	@ (80011b8 <MX_TIM3_Init+0x114>)
 80010ea:	f641 421f 	movw	r2, #7199	@ 0x1c1f
 80010ee:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010f0:	4b31      	ldr	r3, [pc, #196]	@ (80011b8 <MX_TIM3_Init+0x114>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80010f6:	4b30      	ldr	r3, [pc, #192]	@ (80011b8 <MX_TIM3_Init+0x114>)
 80010f8:	2280      	movs	r2, #128	@ 0x80
 80010fa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80010fc:	482e      	ldr	r0, [pc, #184]	@ (80011b8 <MX_TIM3_Init+0x114>)
 80010fe:	f004 f95f 	bl	80053c0 <HAL_TIM_Base_Init>
 8001102:	4603      	mov	r3, r0
 8001104:	2b00      	cmp	r3, #0
 8001106:	d001      	beq.n	800110c <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8001108:	f001 fc2c 	bl	8002964 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800110c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001110:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001112:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001116:	4619      	mov	r1, r3
 8001118:	4827      	ldr	r0, [pc, #156]	@ (80011b8 <MX_TIM3_Init+0x114>)
 800111a:	f004 fe49 	bl	8005db0 <HAL_TIM_ConfigClockSource>
 800111e:	4603      	mov	r3, r0
 8001120:	2b00      	cmp	r3, #0
 8001122:	d001      	beq.n	8001128 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8001124:	f001 fc1e 	bl	8002964 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001128:	4823      	ldr	r0, [pc, #140]	@ (80011b8 <MX_TIM3_Init+0x114>)
 800112a:	f004 fa49 	bl	80055c0 <HAL_TIM_PWM_Init>
 800112e:	4603      	mov	r3, r0
 8001130:	2b00      	cmp	r3, #0
 8001132:	d001      	beq.n	8001138 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8001134:	f001 fc16 	bl	8002964 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001138:	2300      	movs	r3, #0
 800113a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800113c:	2300      	movs	r3, #0
 800113e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001140:	f107 031c 	add.w	r3, r7, #28
 8001144:	4619      	mov	r1, r3
 8001146:	481c      	ldr	r0, [pc, #112]	@ (80011b8 <MX_TIM3_Init+0x114>)
 8001148:	f005 fae8 	bl	800671c <HAL_TIMEx_MasterConfigSynchronization>
 800114c:	4603      	mov	r3, r0
 800114e:	2b00      	cmp	r3, #0
 8001150:	d001      	beq.n	8001156 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8001152:	f001 fc07 	bl	8002964 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001156:	2360      	movs	r3, #96	@ 0x60
 8001158:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800115a:	2300      	movs	r3, #0
 800115c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800115e:	2300      	movs	r3, #0
 8001160:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001162:	2300      	movs	r3, #0
 8001164:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001166:	463b      	mov	r3, r7
 8001168:	2200      	movs	r2, #0
 800116a:	4619      	mov	r1, r3
 800116c:	4812      	ldr	r0, [pc, #72]	@ (80011b8 <MX_TIM3_Init+0x114>)
 800116e:	f004 fd0b 	bl	8005b88 <HAL_TIM_PWM_ConfigChannel>
 8001172:	4603      	mov	r3, r0
 8001174:	2b00      	cmp	r3, #0
 8001176:	d001      	beq.n	800117c <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8001178:	f001 fbf4 	bl	8002964 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800117c:	463b      	mov	r3, r7
 800117e:	2204      	movs	r2, #4
 8001180:	4619      	mov	r1, r3
 8001182:	480d      	ldr	r0, [pc, #52]	@ (80011b8 <MX_TIM3_Init+0x114>)
 8001184:	f004 fd00 	bl	8005b88 <HAL_TIM_PWM_ConfigChannel>
 8001188:	4603      	mov	r3, r0
 800118a:	2b00      	cmp	r3, #0
 800118c:	d001      	beq.n	8001192 <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 800118e:	f001 fbe9 	bl	8002964 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001192:	463b      	mov	r3, r7
 8001194:	2208      	movs	r2, #8
 8001196:	4619      	mov	r1, r3
 8001198:	4807      	ldr	r0, [pc, #28]	@ (80011b8 <MX_TIM3_Init+0x114>)
 800119a:	f004 fcf5 	bl	8005b88 <HAL_TIM_PWM_ConfigChannel>
 800119e:	4603      	mov	r3, r0
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d001      	beq.n	80011a8 <MX_TIM3_Init+0x104>
  {
    Error_Handler();
 80011a4:	f001 fbde 	bl	8002964 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80011a8:	4803      	ldr	r0, [pc, #12]	@ (80011b8 <MX_TIM3_Init+0x114>)
 80011aa:	f001 fc73 	bl	8002a94 <HAL_TIM_MspPostInit>

}
 80011ae:	bf00      	nop
 80011b0:	3738      	adds	r7, #56	@ 0x38
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}
 80011b6:	bf00      	nop
 80011b8:	200000ec 	.word	0x200000ec
 80011bc:	40000400 	.word	0x40000400

080011c0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80011c4:	4b14      	ldr	r3, [pc, #80]	@ (8001218 <MX_USART2_UART_Init+0x58>)
 80011c6:	4a15      	ldr	r2, [pc, #84]	@ (800121c <MX_USART2_UART_Init+0x5c>)
 80011c8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80011ca:	4b13      	ldr	r3, [pc, #76]	@ (8001218 <MX_USART2_UART_Init+0x58>)
 80011cc:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80011d0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80011d2:	4b11      	ldr	r3, [pc, #68]	@ (8001218 <MX_USART2_UART_Init+0x58>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80011d8:	4b0f      	ldr	r3, [pc, #60]	@ (8001218 <MX_USART2_UART_Init+0x58>)
 80011da:	2200      	movs	r2, #0
 80011dc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80011de:	4b0e      	ldr	r3, [pc, #56]	@ (8001218 <MX_USART2_UART_Init+0x58>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80011e4:	4b0c      	ldr	r3, [pc, #48]	@ (8001218 <MX_USART2_UART_Init+0x58>)
 80011e6:	220c      	movs	r2, #12
 80011e8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011ea:	4b0b      	ldr	r3, [pc, #44]	@ (8001218 <MX_USART2_UART_Init+0x58>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80011f0:	4b09      	ldr	r3, [pc, #36]	@ (8001218 <MX_USART2_UART_Init+0x58>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80011f6:	4b08      	ldr	r3, [pc, #32]	@ (8001218 <MX_USART2_UART_Init+0x58>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80011fc:	4b06      	ldr	r3, [pc, #24]	@ (8001218 <MX_USART2_UART_Init+0x58>)
 80011fe:	2200      	movs	r2, #0
 8001200:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001202:	4805      	ldr	r0, [pc, #20]	@ (8001218 <MX_USART2_UART_Init+0x58>)
 8001204:	f005 fb36 	bl	8006874 <HAL_UART_Init>
 8001208:	4603      	mov	r3, r0
 800120a:	2b00      	cmp	r3, #0
 800120c:	d001      	beq.n	8001212 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800120e:	f001 fba9 	bl	8002964 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001212:	bf00      	nop
 8001214:	bd80      	pop	{r7, pc}
 8001216:	bf00      	nop
 8001218:	20000138 	.word	0x20000138
 800121c:	40004400 	.word	0x40004400

08001220 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001224:	4b14      	ldr	r3, [pc, #80]	@ (8001278 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001226:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800122a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800122c:	4b12      	ldr	r3, [pc, #72]	@ (8001278 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800122e:	2206      	movs	r2, #6
 8001230:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001232:	4b11      	ldr	r3, [pc, #68]	@ (8001278 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001234:	2202      	movs	r2, #2
 8001236:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001238:	4b0f      	ldr	r3, [pc, #60]	@ (8001278 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800123a:	2200      	movs	r2, #0
 800123c:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800123e:	4b0e      	ldr	r3, [pc, #56]	@ (8001278 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001240:	2202      	movs	r2, #2
 8001242:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8001244:	4b0c      	ldr	r3, [pc, #48]	@ (8001278 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001246:	2201      	movs	r2, #1
 8001248:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800124a:	4b0b      	ldr	r3, [pc, #44]	@ (8001278 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800124c:	2200      	movs	r2, #0
 800124e:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001250:	4b09      	ldr	r3, [pc, #36]	@ (8001278 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001252:	2200      	movs	r2, #0
 8001254:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8001256:	4b08      	ldr	r3, [pc, #32]	@ (8001278 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001258:	2201      	movs	r2, #1
 800125a:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800125c:	4b06      	ldr	r3, [pc, #24]	@ (8001278 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800125e:	2200      	movs	r2, #0
 8001260:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001262:	4805      	ldr	r0, [pc, #20]	@ (8001278 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001264:	f002 fea8 	bl	8003fb8 <HAL_PCD_Init>
 8001268:	4603      	mov	r3, r0
 800126a:	2b00      	cmp	r3, #0
 800126c:	d001      	beq.n	8001272 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 800126e:	f001 fb79 	bl	8002964 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001272:	bf00      	nop
 8001274:	bd80      	pop	{r7, pc}
 8001276:	bf00      	nop
 8001278:	200001c0 	.word	0x200001c0

0800127c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b08c      	sub	sp, #48	@ 0x30
 8001280:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001282:	f107 031c 	add.w	r3, r7, #28
 8001286:	2200      	movs	r2, #0
 8001288:	601a      	str	r2, [r3, #0]
 800128a:	605a      	str	r2, [r3, #4]
 800128c:	609a      	str	r2, [r3, #8]
 800128e:	60da      	str	r2, [r3, #12]
 8001290:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001292:	4ba4      	ldr	r3, [pc, #656]	@ (8001524 <MX_GPIO_Init+0x2a8>)
 8001294:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001296:	4aa3      	ldr	r2, [pc, #652]	@ (8001524 <MX_GPIO_Init+0x2a8>)
 8001298:	f043 0304 	orr.w	r3, r3, #4
 800129c:	6313      	str	r3, [r2, #48]	@ 0x30
 800129e:	4ba1      	ldr	r3, [pc, #644]	@ (8001524 <MX_GPIO_Init+0x2a8>)
 80012a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012a2:	f003 0304 	and.w	r3, r3, #4
 80012a6:	61bb      	str	r3, [r7, #24]
 80012a8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80012aa:	4b9e      	ldr	r3, [pc, #632]	@ (8001524 <MX_GPIO_Init+0x2a8>)
 80012ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012ae:	4a9d      	ldr	r2, [pc, #628]	@ (8001524 <MX_GPIO_Init+0x2a8>)
 80012b0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80012b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80012b6:	4b9b      	ldr	r3, [pc, #620]	@ (8001524 <MX_GPIO_Init+0x2a8>)
 80012b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80012be:	617b      	str	r3, [r7, #20]
 80012c0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012c2:	4b98      	ldr	r3, [pc, #608]	@ (8001524 <MX_GPIO_Init+0x2a8>)
 80012c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012c6:	4a97      	ldr	r2, [pc, #604]	@ (8001524 <MX_GPIO_Init+0x2a8>)
 80012c8:	f043 0301 	orr.w	r3, r3, #1
 80012cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80012ce:	4b95      	ldr	r3, [pc, #596]	@ (8001524 <MX_GPIO_Init+0x2a8>)
 80012d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012d2:	f003 0301 	and.w	r3, r3, #1
 80012d6:	613b      	str	r3, [r7, #16]
 80012d8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012da:	4b92      	ldr	r3, [pc, #584]	@ (8001524 <MX_GPIO_Init+0x2a8>)
 80012dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012de:	4a91      	ldr	r2, [pc, #580]	@ (8001524 <MX_GPIO_Init+0x2a8>)
 80012e0:	f043 0302 	orr.w	r3, r3, #2
 80012e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80012e6:	4b8f      	ldr	r3, [pc, #572]	@ (8001524 <MX_GPIO_Init+0x2a8>)
 80012e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012ea:	f003 0302 	and.w	r3, r3, #2
 80012ee:	60fb      	str	r3, [r7, #12]
 80012f0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80012f2:	4b8c      	ldr	r3, [pc, #560]	@ (8001524 <MX_GPIO_Init+0x2a8>)
 80012f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012f6:	4a8b      	ldr	r2, [pc, #556]	@ (8001524 <MX_GPIO_Init+0x2a8>)
 80012f8:	f043 0308 	orr.w	r3, r3, #8
 80012fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80012fe:	4b89      	ldr	r3, [pc, #548]	@ (8001524 <MX_GPIO_Init+0x2a8>)
 8001300:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001302:	f003 0308 	and.w	r3, r3, #8
 8001306:	60bb      	str	r3, [r7, #8]
 8001308:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800130a:	4b86      	ldr	r3, [pc, #536]	@ (8001524 <MX_GPIO_Init+0x2a8>)
 800130c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800130e:	4a85      	ldr	r2, [pc, #532]	@ (8001524 <MX_GPIO_Init+0x2a8>)
 8001310:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001314:	6313      	str	r3, [r2, #48]	@ 0x30
 8001316:	4b83      	ldr	r3, [pc, #524]	@ (8001524 <MX_GPIO_Init+0x2a8>)
 8001318:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800131a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800131e:	607b      	str	r3, [r7, #4]
 8001320:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 8001322:	2200      	movs	r2, #0
 8001324:	2130      	movs	r1, #48	@ 0x30
 8001326:	4880      	ldr	r0, [pc, #512]	@ (8001528 <MX_GPIO_Init+0x2ac>)
 8001328:	f002 fdfa 	bl	8003f20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin|GPIO_PIN_9, GPIO_PIN_RESET);
 800132c:	2200      	movs	r2, #0
 800132e:	f244 2181 	movw	r1, #17025	@ 0x4281
 8001332:	487e      	ldr	r0, [pc, #504]	@ (800152c <MX_GPIO_Init+0x2b0>)
 8001334:	f002 fdf4 	bl	8003f20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8001338:	2200      	movs	r2, #0
 800133a:	2140      	movs	r1, #64	@ 0x40
 800133c:	487c      	ldr	r0, [pc, #496]	@ (8001530 <MX_GPIO_Init+0x2b4>)
 800133e:	f002 fdef 	bl	8003f20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8001342:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001346:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001348:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800134c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800134e:	2300      	movs	r3, #0
 8001350:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8001352:	f107 031c 	add.w	r3, r7, #28
 8001356:	4619      	mov	r1, r3
 8001358:	4876      	ldr	r0, [pc, #472]	@ (8001534 <MX_GPIO_Init+0x2b8>)
 800135a:	f002 fc35 	bl	8003bc8 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800135e:	2332      	movs	r3, #50	@ 0x32
 8001360:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001362:	2302      	movs	r3, #2
 8001364:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001366:	2300      	movs	r3, #0
 8001368:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800136a:	2303      	movs	r3, #3
 800136c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800136e:	230b      	movs	r3, #11
 8001370:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001372:	f107 031c 	add.w	r3, r7, #28
 8001376:	4619      	mov	r1, r3
 8001378:	486e      	ldr	r0, [pc, #440]	@ (8001534 <MX_GPIO_Init+0x2b8>)
 800137a:	f002 fc25 	bl	8003bc8 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_REF_CLK_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin;
 800137e:	2302      	movs	r3, #2
 8001380:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001382:	2302      	movs	r3, #2
 8001384:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001386:	2300      	movs	r3, #0
 8001388:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800138a:	2303      	movs	r3, #3
 800138c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800138e:	230b      	movs	r3, #11
 8001390:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(RMII_REF_CLK_GPIO_Port, &GPIO_InitStruct);
 8001392:	f107 031c 	add.w	r3, r7, #28
 8001396:	4619      	mov	r1, r3
 8001398:	4863      	ldr	r0, [pc, #396]	@ (8001528 <MX_GPIO_Init+0x2ac>)
 800139a:	f002 fc15 	bl	8003bc8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800139e:	2330      	movs	r3, #48	@ 0x30
 80013a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013a2:	2301      	movs	r3, #1
 80013a4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a6:	2300      	movs	r3, #0
 80013a8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013aa:	2300      	movs	r3, #0
 80013ac:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013ae:	f107 031c 	add.w	r3, r7, #28
 80013b2:	4619      	mov	r1, r3
 80013b4:	485c      	ldr	r0, [pc, #368]	@ (8001528 <MX_GPIO_Init+0x2ac>)
 80013b6:	f002 fc07 	bl	8003bc8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin PB9 */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin|GPIO_PIN_9;
 80013ba:	f244 2381 	movw	r3, #17025	@ 0x4281
 80013be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013c0:	2301      	movs	r3, #1
 80013c2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c4:	2300      	movs	r3, #0
 80013c6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013c8:	2300      	movs	r3, #0
 80013ca:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013cc:	f107 031c 	add.w	r3, r7, #28
 80013d0:	4619      	mov	r1, r3
 80013d2:	4856      	ldr	r0, [pc, #344]	@ (800152c <MX_GPIO_Init+0x2b0>)
 80013d4:	f002 fbf8 	bl	8003bc8 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80013d8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80013dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013de:	2302      	movs	r3, #2
 80013e0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e2:	2300      	movs	r3, #0
 80013e4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013e6:	2303      	movs	r3, #3
 80013e8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80013ea:	230b      	movs	r3, #11
 80013ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80013ee:	f107 031c 	add.w	r3, r7, #28
 80013f2:	4619      	mov	r1, r3
 80013f4:	484d      	ldr	r0, [pc, #308]	@ (800152c <MX_GPIO_Init+0x2b0>)
 80013f6:	f002 fbe7 	bl	8003bc8 <HAL_GPIO_Init>

  /*Configure GPIO pins : STLK_RX_Pin STLK_TX_Pin */
  GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80013fa:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80013fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001400:	2302      	movs	r3, #2
 8001402:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001404:	2301      	movs	r3, #1
 8001406:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001408:	2303      	movs	r3, #3
 800140a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800140c:	2307      	movs	r3, #7
 800140e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001410:	f107 031c 	add.w	r3, r7, #28
 8001414:	4619      	mov	r1, r3
 8001416:	4848      	ldr	r0, [pc, #288]	@ (8001538 <MX_GPIO_Init+0x2bc>)
 8001418:	f002 fbd6 	bl	8003bc8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800141c:	2340      	movs	r3, #64	@ 0x40
 800141e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001420:	2301      	movs	r3, #1
 8001422:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001424:	2300      	movs	r3, #0
 8001426:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001428:	2300      	movs	r3, #0
 800142a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800142c:	f107 031c 	add.w	r3, r7, #28
 8001430:	4619      	mov	r1, r3
 8001432:	483f      	ldr	r0, [pc, #252]	@ (8001530 <MX_GPIO_Init+0x2b4>)
 8001434:	f002 fbc8 	bl	8003bc8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001438:	2380      	movs	r3, #128	@ 0x80
 800143a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800143c:	2300      	movs	r3, #0
 800143e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001440:	2300      	movs	r3, #0
 8001442:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001444:	f107 031c 	add.w	r3, r7, #28
 8001448:	4619      	mov	r1, r3
 800144a:	4839      	ldr	r0, [pc, #228]	@ (8001530 <MX_GPIO_Init+0x2b4>)
 800144c:	f002 fbbc 	bl	8003bc8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD6 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001450:	23c0      	movs	r3, #192	@ 0xc0
 8001452:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001454:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001458:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800145a:	2300      	movs	r3, #0
 800145c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800145e:	f107 031c 	add.w	r3, r7, #28
 8001462:	4619      	mov	r1, r3
 8001464:	4834      	ldr	r0, [pc, #208]	@ (8001538 <MX_GPIO_Init+0x2bc>)
 8001466:	f002 fbaf 	bl	8003bc8 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800146a:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 800146e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001470:	2302      	movs	r3, #2
 8001472:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001474:	2300      	movs	r3, #0
 8001476:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001478:	2303      	movs	r3, #3
 800147a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800147c:	230b      	movs	r3, #11
 800147e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001480:	f107 031c 	add.w	r3, r7, #28
 8001484:	4619      	mov	r1, r3
 8001486:	482a      	ldr	r0, [pc, #168]	@ (8001530 <MX_GPIO_Init+0x2b4>)
 8001488:	f002 fb9e 	bl	8003bc8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 800148c:	2308      	movs	r3, #8
 800148e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001490:	2303      	movs	r3, #3
 8001492:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001494:	2300      	movs	r3, #0
 8001496:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001498:	f107 031c 	add.w	r3, r7, #28
 800149c:	4619      	mov	r1, r3
 800149e:	4823      	ldr	r0, [pc, #140]	@ (800152c <MX_GPIO_Init+0x2b0>)
 80014a0:	f002 fb92 	bl	8003bc8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80014a4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80014a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80014aa:	2312      	movs	r3, #18
 80014ac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ae:	2300      	movs	r3, #0
 80014b0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014b2:	2303      	movs	r3, #3
 80014b4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80014b6:	2304      	movs	r3, #4
 80014b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014ba:	f107 031c 	add.w	r3, r7, #28
 80014be:	4619      	mov	r1, r3
 80014c0:	481a      	ldr	r0, [pc, #104]	@ (800152c <MX_GPIO_Init+0x2b0>)
 80014c2:	f002 fb81 	bl	8003bc8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80014c6:	2200      	movs	r2, #0
 80014c8:	2100      	movs	r1, #0
 80014ca:	2017      	movs	r0, #23
 80014cc:	f002 fab3 	bl	8003a36 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80014d0:	2017      	movs	r0, #23
 80014d2:	f002 facc 	bl	8003a6e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  // Enable GPIO Clocks
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014d6:	4b13      	ldr	r3, [pc, #76]	@ (8001524 <MX_GPIO_Init+0x2a8>)
 80014d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014da:	4a12      	ldr	r2, [pc, #72]	@ (8001524 <MX_GPIO_Init+0x2a8>)
 80014dc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80014e0:	6453      	str	r3, [r2, #68]	@ 0x44
 80014e2:	4b10      	ldr	r3, [pc, #64]	@ (8001524 <MX_GPIO_Init+0x2a8>)
 80014e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014e6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80014ea:	603b      	str	r3, [r7, #0]
 80014ec:	683b      	ldr	r3, [r7, #0]

  // Configure Button (e.g., PC13 on Nucleo boards)
   GPIO_InitStruct.Pin = GPIO_PIN_13;
 80014ee:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80014f2:	61fb      	str	r3, [r7, #28]
   GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;  // Falling edge interrupt
 80014f4:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80014f8:	623b      	str	r3, [r7, #32]
   GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014fa:	2300      	movs	r3, #0
 80014fc:	627b      	str	r3, [r7, #36]	@ 0x24
   HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014fe:	f107 031c 	add.w	r3, r7, #28
 8001502:	4619      	mov	r1, r3
 8001504:	480b      	ldr	r0, [pc, #44]	@ (8001534 <MX_GPIO_Init+0x2b8>)
 8001506:	f002 fb5f 	bl	8003bc8 <HAL_GPIO_Init>

   // Enable and set EXTI line 15_10 Interrupt to the lowest priority
   HAL_NVIC_SetPriority(EXTI15_10_IRQn, 2, 0);
 800150a:	2200      	movs	r2, #0
 800150c:	2102      	movs	r1, #2
 800150e:	2028      	movs	r0, #40	@ 0x28
 8001510:	f002 fa91 	bl	8003a36 <HAL_NVIC_SetPriority>
   HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001514:	2028      	movs	r0, #40	@ 0x28
 8001516:	f002 faaa 	bl	8003a6e <HAL_NVIC_EnableIRQ>
  /* USER CODE END MX_GPIO_Init_2 */
}
 800151a:	bf00      	nop
 800151c:	3730      	adds	r7, #48	@ 0x30
 800151e:	46bd      	mov	sp, r7
 8001520:	bd80      	pop	{r7, pc}
 8001522:	bf00      	nop
 8001524:	40023800 	.word	0x40023800
 8001528:	40020000 	.word	0x40020000
 800152c:	40020400 	.word	0x40020400
 8001530:	40021800 	.word	0x40021800
 8001534:	40020800 	.word	0x40020800
 8001538:	40020c00 	.word	0x40020c00

0800153c <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)  // Button ITR
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b082      	sub	sp, #8
 8001540:	af00      	add	r7, sp, #0
 8001542:	4603      	mov	r3, r0
 8001544:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin == GPIO_PIN_13)  // Start / Stop button ISR
 8001546:	88fb      	ldrh	r3, [r7, #6]
 8001548:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800154c:	d162      	bne.n	8001614 <HAL_GPIO_EXTI_Callback+0xd8>
    {
    	if (HAL_GetTick() - last_tick > 100)  // 100 ms debounce
 800154e:	f001 fcbb 	bl	8002ec8 <HAL_GetTick>
 8001552:	4602      	mov	r2, r0
 8001554:	4b56      	ldr	r3, [pc, #344]	@ (80016b0 <HAL_GPIO_EXTI_Callback+0x174>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	1ad3      	subs	r3, r2, r3
 800155a:	2b64      	cmp	r3, #100	@ 0x64
 800155c:	f240 80a3 	bls.w	80016a6 <HAL_GPIO_EXTI_Callback+0x16a>
    	{
            last_tick = HAL_GetTick();
 8001560:	f001 fcb2 	bl	8002ec8 <HAL_GetTick>
 8001564:	4603      	mov	r3, r0
 8001566:	4a52      	ldr	r2, [pc, #328]	@ (80016b0 <HAL_GPIO_EXTI_Callback+0x174>)
 8001568:	6013      	str	r3, [r2, #0]
            HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);  //Green led
 800156a:	2101      	movs	r1, #1
 800156c:	4851      	ldr	r0, [pc, #324]	@ (80016b4 <HAL_GPIO_EXTI_Callback+0x178>)
 800156e:	f002 fcf0 	bl	8003f52 <HAL_GPIO_TogglePin>
            HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14); //Red led
 8001572:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001576:	484f      	ldr	r0, [pc, #316]	@ (80016b4 <HAL_GPIO_EXTI_Callback+0x178>)
 8001578:	f002 fceb 	bl	8003f52 <HAL_GPIO_TogglePin>

            if (toggle_ISR1 == 0)
 800157c:	4b4e      	ldr	r3, [pc, #312]	@ (80016b8 <HAL_GPIO_EXTI_Callback+0x17c>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	2b00      	cmp	r3, #0
 8001582:	d117      	bne.n	80015b4 <HAL_GPIO_EXTI_Callback+0x78>
            {
            	HAL_TIM_Base_Start_IT(&htim3);
 8001584:	484d      	ldr	r0, [pc, #308]	@ (80016bc <HAL_GPIO_EXTI_Callback+0x180>)
 8001586:	f003 ff73 	bl	8005470 <HAL_TIM_Base_Start_IT>
                HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 800158a:	2100      	movs	r1, #0
 800158c:	484b      	ldr	r0, [pc, #300]	@ (80016bc <HAL_GPIO_EXTI_Callback+0x180>)
 800158e:	f004 f879 	bl	8005684 <HAL_TIM_PWM_Start>
                HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8001592:	2104      	movs	r1, #4
 8001594:	4849      	ldr	r0, [pc, #292]	@ (80016bc <HAL_GPIO_EXTI_Callback+0x180>)
 8001596:	f004 f875 	bl	8005684 <HAL_TIM_PWM_Start>
                HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 800159a:	2108      	movs	r1, #8
 800159c:	4847      	ldr	r0, [pc, #284]	@ (80016bc <HAL_GPIO_EXTI_Callback+0x180>)
 800159e:	f004 f871 	bl	8005684 <HAL_TIM_PWM_Start>
                HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET); //Enable signal for interface card
 80015a2:	2201      	movs	r2, #1
 80015a4:	2120      	movs	r1, #32
 80015a6:	4846      	ldr	r0, [pc, #280]	@ (80016c0 <HAL_GPIO_EXTI_Callback+0x184>)
 80015a8:	f002 fcba 	bl	8003f20 <HAL_GPIO_WritePin>
                toggle_ISR1 = 1;
 80015ac:	4b42      	ldr	r3, [pc, #264]	@ (80016b8 <HAL_GPIO_EXTI_Callback+0x17c>)
 80015ae:	2201      	movs	r2, #1
 80015b0:	601a      	str	r2, [r3, #0]
    		last_tick = HAL_GetTick();
    		toggle_ISR3 = 1;  // ISR only changes toggle variable as delay function doesn't work here, the rest is in the while loop
    	} 

	}
}
 80015b2:	e078      	b.n	80016a6 <HAL_GPIO_EXTI_Callback+0x16a>
            	DC_a = 0;       //Set duty cycles and speed to 0 when stopping
 80015b4:	4943      	ldr	r1, [pc, #268]	@ (80016c4 <HAL_GPIO_EXTI_Callback+0x188>)
 80015b6:	f04f 0200 	mov.w	r2, #0
 80015ba:	f04f 0300 	mov.w	r3, #0
 80015be:	e9c1 2300 	strd	r2, r3, [r1]
            	DC_b = 0;
 80015c2:	4941      	ldr	r1, [pc, #260]	@ (80016c8 <HAL_GPIO_EXTI_Callback+0x18c>)
 80015c4:	f04f 0200 	mov.w	r2, #0
 80015c8:	f04f 0300 	mov.w	r3, #0
 80015cc:	e9c1 2300 	strd	r2, r3, [r1]
            	DC_c = 0;
 80015d0:	493e      	ldr	r1, [pc, #248]	@ (80016cc <HAL_GPIO_EXTI_Callback+0x190>)
 80015d2:	f04f 0200 	mov.w	r2, #0
 80015d6:	f04f 0300 	mov.w	r3, #0
 80015da:	e9c1 2300 	strd	r2, r3, [r1]
            	N_current = 0;
 80015de:	4b3c      	ldr	r3, [pc, #240]	@ (80016d0 <HAL_GPIO_EXTI_Callback+0x194>)
 80015e0:	2200      	movs	r2, #0
 80015e2:	601a      	str	r2, [r3, #0]
         	HAL_TIM_Base_Stop_IT(&htim3);
 80015e4:	4835      	ldr	r0, [pc, #212]	@ (80016bc <HAL_GPIO_EXTI_Callback+0x180>)
 80015e6:	f003 ffbb 	bl	8005560 <HAL_TIM_Base_Stop_IT>
                HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1);
 80015ea:	2100      	movs	r1, #0
 80015ec:	4833      	ldr	r0, [pc, #204]	@ (80016bc <HAL_GPIO_EXTI_Callback+0x180>)
 80015ee:	f004 f943 	bl	8005878 <HAL_TIM_PWM_Stop>
                HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_2);
 80015f2:	2104      	movs	r1, #4
 80015f4:	4831      	ldr	r0, [pc, #196]	@ (80016bc <HAL_GPIO_EXTI_Callback+0x180>)
 80015f6:	f004 f93f 	bl	8005878 <HAL_TIM_PWM_Stop>
                HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_3);
 80015fa:	2108      	movs	r1, #8
 80015fc:	482f      	ldr	r0, [pc, #188]	@ (80016bc <HAL_GPIO_EXTI_Callback+0x180>)
 80015fe:	f004 f93b 	bl	8005878 <HAL_TIM_PWM_Stop>
                HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);  //Enable signal for interface card
 8001602:	2200      	movs	r2, #0
 8001604:	2120      	movs	r1, #32
 8001606:	482e      	ldr	r0, [pc, #184]	@ (80016c0 <HAL_GPIO_EXTI_Callback+0x184>)
 8001608:	f002 fc8a 	bl	8003f20 <HAL_GPIO_WritePin>
                toggle_ISR1 = 0;
 800160c:	4b2a      	ldr	r3, [pc, #168]	@ (80016b8 <HAL_GPIO_EXTI_Callback+0x17c>)
 800160e:	2200      	movs	r2, #0
 8001610:	601a      	str	r2, [r3, #0]
}
 8001612:	e048      	b.n	80016a6 <HAL_GPIO_EXTI_Callback+0x16a>
    else if (GPIO_Pin == GPIO_PIN_6)  // Directional change button ISR
 8001614:	88fb      	ldrh	r3, [r7, #6]
 8001616:	2b40      	cmp	r3, #64	@ 0x40
 8001618:	d132      	bne.n	8001680 <HAL_GPIO_EXTI_Callback+0x144>
    	if (HAL_GetTick() - last_tick > 100)  // 100 ms debounce
 800161a:	f001 fc55 	bl	8002ec8 <HAL_GetTick>
 800161e:	4602      	mov	r2, r0
 8001620:	4b23      	ldr	r3, [pc, #140]	@ (80016b0 <HAL_GPIO_EXTI_Callback+0x174>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	1ad3      	subs	r3, r2, r3
 8001626:	2b64      	cmp	r3, #100	@ 0x64
 8001628:	d93d      	bls.n	80016a6 <HAL_GPIO_EXTI_Callback+0x16a>
    		last_tick = HAL_GetTick();
 800162a:	f001 fc4d 	bl	8002ec8 <HAL_GetTick>
 800162e:	4603      	mov	r3, r0
 8001630:	4a1f      	ldr	r2, [pc, #124]	@ (80016b0 <HAL_GPIO_EXTI_Callback+0x174>)
 8001632:	6013      	str	r3, [r2, #0]
    		if (N_current == 0)     // Only change direction when speed is 0
 8001634:	4b26      	ldr	r3, [pc, #152]	@ (80016d0 <HAL_GPIO_EXTI_Callback+0x194>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	2b00      	cmp	r3, #0
 800163a:	d134      	bne.n	80016a6 <HAL_GPIO_EXTI_Callback+0x16a>
    			if (toggle_ISR2 == 0)
 800163c:	4b25      	ldr	r3, [pc, #148]	@ (80016d4 <HAL_GPIO_EXTI_Callback+0x198>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	2b00      	cmp	r3, #0
 8001642:	d10e      	bne.n	8001662 <HAL_GPIO_EXTI_Callback+0x126>
    			    direction1 = 4;    //Down
 8001644:	4b24      	ldr	r3, [pc, #144]	@ (80016d8 <HAL_GPIO_EXTI_Callback+0x19c>)
 8001646:	2204      	movs	r2, #4
 8001648:	601a      	str	r2, [r3, #0]
    			    direction2 = 2;
 800164a:	4b24      	ldr	r3, [pc, #144]	@ (80016dc <HAL_GPIO_EXTI_Callback+0x1a0>)
 800164c:	2202      	movs	r2, #2
 800164e:	601a      	str	r2, [r3, #0]
    			    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);  //Toggle blue led
 8001650:	2201      	movs	r2, #1
 8001652:	2180      	movs	r1, #128	@ 0x80
 8001654:	4817      	ldr	r0, [pc, #92]	@ (80016b4 <HAL_GPIO_EXTI_Callback+0x178>)
 8001656:	f002 fc63 	bl	8003f20 <HAL_GPIO_WritePin>
    			    toggle_ISR2 = 1;
 800165a:	4b1e      	ldr	r3, [pc, #120]	@ (80016d4 <HAL_GPIO_EXTI_Callback+0x198>)
 800165c:	2201      	movs	r2, #1
 800165e:	601a      	str	r2, [r3, #0]
}
 8001660:	e021      	b.n	80016a6 <HAL_GPIO_EXTI_Callback+0x16a>
    			    direction1 = 2;     //Up
 8001662:	4b1d      	ldr	r3, [pc, #116]	@ (80016d8 <HAL_GPIO_EXTI_Callback+0x19c>)
 8001664:	2202      	movs	r2, #2
 8001666:	601a      	str	r2, [r3, #0]
    			    direction2 = 4;
 8001668:	4b1c      	ldr	r3, [pc, #112]	@ (80016dc <HAL_GPIO_EXTI_Callback+0x1a0>)
 800166a:	2204      	movs	r2, #4
 800166c:	601a      	str	r2, [r3, #0]
    			    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);  //Toggle blue led
 800166e:	2200      	movs	r2, #0
 8001670:	2180      	movs	r1, #128	@ 0x80
 8001672:	4810      	ldr	r0, [pc, #64]	@ (80016b4 <HAL_GPIO_EXTI_Callback+0x178>)
 8001674:	f002 fc54 	bl	8003f20 <HAL_GPIO_WritePin>
    			    toggle_ISR2 = 0;
 8001678:	4b16      	ldr	r3, [pc, #88]	@ (80016d4 <HAL_GPIO_EXTI_Callback+0x198>)
 800167a:	2200      	movs	r2, #0
 800167c:	601a      	str	r2, [r3, #0]
}
 800167e:	e012      	b.n	80016a6 <HAL_GPIO_EXTI_Callback+0x16a>
    else if (GPIO_Pin == GPIO_PIN_7)  // Reset VFD button ISR
 8001680:	88fb      	ldrh	r3, [r7, #6]
 8001682:	2b80      	cmp	r3, #128	@ 0x80
 8001684:	d10f      	bne.n	80016a6 <HAL_GPIO_EXTI_Callback+0x16a>
    	if (HAL_GetTick() - last_tick > 100)   // 100 ms debounce
 8001686:	f001 fc1f 	bl	8002ec8 <HAL_GetTick>
 800168a:	4602      	mov	r2, r0
 800168c:	4b08      	ldr	r3, [pc, #32]	@ (80016b0 <HAL_GPIO_EXTI_Callback+0x174>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	1ad3      	subs	r3, r2, r3
 8001692:	2b64      	cmp	r3, #100	@ 0x64
 8001694:	d907      	bls.n	80016a6 <HAL_GPIO_EXTI_Callback+0x16a>
    		last_tick = HAL_GetTick();
 8001696:	f001 fc17 	bl	8002ec8 <HAL_GetTick>
 800169a:	4603      	mov	r3, r0
 800169c:	4a04      	ldr	r2, [pc, #16]	@ (80016b0 <HAL_GPIO_EXTI_Callback+0x174>)
 800169e:	6013      	str	r3, [r2, #0]
    		toggle_ISR3 = 1;  // ISR only changes toggle variable as delay function doesn't work here, the rest is in the while loop
 80016a0:	4b0f      	ldr	r3, [pc, #60]	@ (80016e0 <HAL_GPIO_EXTI_Callback+0x1a4>)
 80016a2:	2201      	movs	r2, #1
 80016a4:	601a      	str	r2, [r3, #0]
}
 80016a6:	bf00      	nop
 80016a8:	3708      	adds	r7, #8
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bd80      	pop	{r7, pc}
 80016ae:	bf00      	nop
 80016b0:	200006a0 	.word	0x200006a0
 80016b4:	40020400 	.word	0x40020400
 80016b8:	200006a4 	.word	0x200006a4
 80016bc:	200000ec 	.word	0x200000ec
 80016c0:	40020000 	.word	0x40020000
 80016c4:	200006b0 	.word	0x200006b0
 80016c8:	200006b8 	.word	0x200006b8
 80016cc:	200006c0 	.word	0x200006c0
 80016d0:	200006cc 	.word	0x200006cc
 80016d4:	200006a8 	.word	0x200006a8
 80016d8:	20000018 	.word	0x20000018
 80016dc:	2000001c 	.word	0x2000001c
 80016e0:	200006ac 	.word	0x200006ac

080016e4 <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler(void)   //Enables the button ITR
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	af00      	add	r7, sp, #0
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80016e8:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80016ec:	f002 fc4c 	bl	8003f88 <HAL_GPIO_EXTI_IRQHandler>
}
 80016f0:	bf00      	nop
 80016f2:	bd80      	pop	{r7, pc}
 80016f4:	0000      	movs	r0, r0
	...

080016f8 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b084      	sub	sp, #16
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
    if (hadc->Instance == ADC1)
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	4a5c      	ldr	r2, [pc, #368]	@ (8001878 <HAL_ADC_ConvCpltCallback+0x180>)
 8001706:	4293      	cmp	r3, r2
 8001708:	f040 80a8 	bne.w	800185c <HAL_ADC_ConvCpltCallback+0x164>
    {
         uint32_t readADC = HAL_ADC_GetValue(hadc);  //Read ADC signal from potentiometer
 800170c:	6878      	ldr	r0, [r7, #4]
 800170e:	f001 fe37 	bl	8003380 <HAL_ADC_GetValue>
 8001712:	60f8      	str	r0, [r7, #12]
         N_target = readADC * 1500/4096; // Calculate new speed based on readADC
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 800171a:	fb02 f303 	mul.w	r3, r2, r3
 800171e:	0b1b      	lsrs	r3, r3, #12
 8001720:	4a56      	ldr	r2, [pc, #344]	@ (800187c <HAL_ADC_ConvCpltCallback+0x184>)
 8001722:	6013      	str	r3, [r2, #0]
         //Volt = readADC * 400/4096; // Calculate volt from potentiometer for amplitude testing
         //if (Volt < 2) Volt = 1;   //Sets Volt to 1 if less than 2
         //N_current = 1500 ;

         float max_step = 25;      // Ramp of speed control
 8001724:	4b56      	ldr	r3, [pc, #344]	@ (8001880 <HAL_ADC_ConvCpltCallback+0x188>)
 8001726:	60bb      	str	r3, [r7, #8]
         if (N_current < N_target) {  //If statement for speed ramp in both directions
 8001728:	4b56      	ldr	r3, [pc, #344]	@ (8001884 <HAL_ADC_ConvCpltCallback+0x18c>)
 800172a:	681a      	ldr	r2, [r3, #0]
 800172c:	4b53      	ldr	r3, [pc, #332]	@ (800187c <HAL_ADC_ConvCpltCallback+0x184>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	429a      	cmp	r2, r3
 8001732:	d21a      	bcs.n	800176a <HAL_ADC_ConvCpltCallback+0x72>
                 N_current += max_step;
 8001734:	4b53      	ldr	r3, [pc, #332]	@ (8001884 <HAL_ADC_ConvCpltCallback+0x18c>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	ee07 3a90 	vmov	s15, r3
 800173c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001740:	edd7 7a02 	vldr	s15, [r7, #8]
 8001744:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001748:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800174c:	ee17 2a90 	vmov	r2, s15
 8001750:	4b4c      	ldr	r3, [pc, #304]	@ (8001884 <HAL_ADC_ConvCpltCallback+0x18c>)
 8001752:	601a      	str	r2, [r3, #0]
                 if (N_current > N_target) N_current = N_target;
 8001754:	4b4b      	ldr	r3, [pc, #300]	@ (8001884 <HAL_ADC_ConvCpltCallback+0x18c>)
 8001756:	681a      	ldr	r2, [r3, #0]
 8001758:	4b48      	ldr	r3, [pc, #288]	@ (800187c <HAL_ADC_ConvCpltCallback+0x184>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	429a      	cmp	r2, r3
 800175e:	d924      	bls.n	80017aa <HAL_ADC_ConvCpltCallback+0xb2>
 8001760:	4b46      	ldr	r3, [pc, #280]	@ (800187c <HAL_ADC_ConvCpltCallback+0x184>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	4a47      	ldr	r2, [pc, #284]	@ (8001884 <HAL_ADC_ConvCpltCallback+0x18c>)
 8001766:	6013      	str	r3, [r2, #0]
 8001768:	e01f      	b.n	80017aa <HAL_ADC_ConvCpltCallback+0xb2>
         } else if (N_current > N_target) {
 800176a:	4b46      	ldr	r3, [pc, #280]	@ (8001884 <HAL_ADC_ConvCpltCallback+0x18c>)
 800176c:	681a      	ldr	r2, [r3, #0]
 800176e:	4b43      	ldr	r3, [pc, #268]	@ (800187c <HAL_ADC_ConvCpltCallback+0x184>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	429a      	cmp	r2, r3
 8001774:	d919      	bls.n	80017aa <HAL_ADC_ConvCpltCallback+0xb2>
                 N_current -= max_step;
 8001776:	4b43      	ldr	r3, [pc, #268]	@ (8001884 <HAL_ADC_ConvCpltCallback+0x18c>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	ee07 3a90 	vmov	s15, r3
 800177e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001782:	edd7 7a02 	vldr	s15, [r7, #8]
 8001786:	ee77 7a67 	vsub.f32	s15, s14, s15
 800178a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800178e:	ee17 2a90 	vmov	r2, s15
 8001792:	4b3c      	ldr	r3, [pc, #240]	@ (8001884 <HAL_ADC_ConvCpltCallback+0x18c>)
 8001794:	601a      	str	r2, [r3, #0]
                 if (N_current < N_target) N_current = N_target;
 8001796:	4b3b      	ldr	r3, [pc, #236]	@ (8001884 <HAL_ADC_ConvCpltCallback+0x18c>)
 8001798:	681a      	ldr	r2, [r3, #0]
 800179a:	4b38      	ldr	r3, [pc, #224]	@ (800187c <HAL_ADC_ConvCpltCallback+0x184>)
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	429a      	cmp	r2, r3
 80017a0:	d203      	bcs.n	80017aa <HAL_ADC_ConvCpltCallback+0xb2>
 80017a2:	4b36      	ldr	r3, [pc, #216]	@ (800187c <HAL_ADC_ConvCpltCallback+0x184>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	4a37      	ldr	r2, [pc, #220]	@ (8001884 <HAL_ADC_ConvCpltCallback+0x18c>)
 80017a8:	6013      	str	r3, [r2, #0]
             }

    	if (N_current < 11) N_current = 0; //Sets the speed to 0 if the RPM current is less than 11
 80017aa:	4b36      	ldr	r3, [pc, #216]	@ (8001884 <HAL_ADC_ConvCpltCallback+0x18c>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	2b0a      	cmp	r3, #10
 80017b0:	d802      	bhi.n	80017b8 <HAL_ADC_ConvCpltCallback+0xc0>
 80017b2:	4b34      	ldr	r3, [pc, #208]	@ (8001884 <HAL_ADC_ConvCpltCallback+0x18c>)
 80017b4:	2200      	movs	r2, #0
 80017b6:	601a      	str	r2, [r3, #0]
    	if (N_current > 1489) N_current = 1500; //Sets the speed to 1500 if the RPM current is more than 1489
 80017b8:	4b32      	ldr	r3, [pc, #200]	@ (8001884 <HAL_ADC_ConvCpltCallback+0x18c>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	f240 52d1 	movw	r2, #1489	@ 0x5d1
 80017c0:	4293      	cmp	r3, r2
 80017c2:	d903      	bls.n	80017cc <HAL_ADC_ConvCpltCallback+0xd4>
 80017c4:	4b2f      	ldr	r3, [pc, #188]	@ (8001884 <HAL_ADC_ConvCpltCallback+0x18c>)
 80017c6:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 80017ca:	601a      	str	r2, [r3, #0]

         freq_sin = 2.25*(4*N_current/120);
 80017cc:	4b2d      	ldr	r3, [pc, #180]	@ (8001884 <HAL_ADC_ConvCpltCallback+0x18c>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	009b      	lsls	r3, r3, #2
 80017d2:	4a2d      	ldr	r2, [pc, #180]	@ (8001888 <HAL_ADC_ConvCpltCallback+0x190>)
 80017d4:	fba2 2303 	umull	r2, r3, r2, r3
 80017d8:	099b      	lsrs	r3, r3, #6
 80017da:	4618      	mov	r0, r3
 80017dc:	f7fe fe56 	bl	800048c <__aeabi_ui2d>
 80017e0:	f04f 0200 	mov.w	r2, #0
 80017e4:	4b29      	ldr	r3, [pc, #164]	@ (800188c <HAL_ADC_ConvCpltCallback+0x194>)
 80017e6:	f7fe fecb 	bl	8000580 <__aeabi_dmul>
 80017ea:	4602      	mov	r2, r0
 80017ec:	460b      	mov	r3, r1
 80017ee:	4610      	mov	r0, r2
 80017f0:	4619      	mov	r1, r3
 80017f2:	f7ff f97f 	bl	8000af4 <__aeabi_d2f>
 80017f6:	4603      	mov	r3, r0
 80017f8:	4a25      	ldr	r2, [pc, #148]	@ (8001890 <HAL_ADC_ConvCpltCallback+0x198>)
 80017fa:	6013      	str	r3, [r2, #0]
         freq_sine = freq_sin/2.25;
 80017fc:	4b24      	ldr	r3, [pc, #144]	@ (8001890 <HAL_ADC_ConvCpltCallback+0x198>)
 80017fe:	ed93 7a00 	vldr	s14, [r3]
 8001802:	eef0 6a02 	vmov.f32	s13, #2	@ 0x40100000  2.250
 8001806:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800180a:	4b22      	ldr	r3, [pc, #136]	@ (8001894 <HAL_ADC_ConvCpltCallback+0x19c>)
 800180c:	edc3 7a00 	vstr	s15, [r3]

         V_RL = freq_sine*8;   //RMS line to line voltage
 8001810:	4b20      	ldr	r3, [pc, #128]	@ (8001894 <HAL_ADC_ConvCpltCallback+0x19c>)
 8001812:	edd3 7a00 	vldr	s15, [r3]
 8001816:	eeb2 7a00 	vmov.f32	s14, #32	@ 0x41000000  8.0
 800181a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800181e:	4b1e      	ldr	r3, [pc, #120]	@ (8001898 <HAL_ADC_ConvCpltCallback+0x1a0>)
 8001820:	edc3 7a00 	vstr	s15, [r3]
         V_PP = V_RL*sqrt(2)/sqrt(3);   //peak phase voltage
 8001824:	4b1c      	ldr	r3, [pc, #112]	@ (8001898 <HAL_ADC_ConvCpltCallback+0x1a0>)
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	4618      	mov	r0, r3
 800182a:	f7fe fe51 	bl	80004d0 <__aeabi_f2d>
 800182e:	a30e      	add	r3, pc, #56	@ (adr r3, 8001868 <HAL_ADC_ConvCpltCallback+0x170>)
 8001830:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001834:	f7fe fea4 	bl	8000580 <__aeabi_dmul>
 8001838:	4602      	mov	r2, r0
 800183a:	460b      	mov	r3, r1
 800183c:	4610      	mov	r0, r2
 800183e:	4619      	mov	r1, r3
 8001840:	a30b      	add	r3, pc, #44	@ (adr r3, 8001870 <HAL_ADC_ConvCpltCallback+0x178>)
 8001842:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001846:	f7fe ffc5 	bl	80007d4 <__aeabi_ddiv>
 800184a:	4602      	mov	r2, r0
 800184c:	460b      	mov	r3, r1
 800184e:	4610      	mov	r0, r2
 8001850:	4619      	mov	r1, r3
 8001852:	f7ff f94f 	bl	8000af4 <__aeabi_d2f>
 8001856:	4603      	mov	r3, r0
 8001858:	4a10      	ldr	r2, [pc, #64]	@ (800189c <HAL_ADC_ConvCpltCallback+0x1a4>)
 800185a:	6013      	str	r3, [r2, #0]

    }
}
 800185c:	bf00      	nop
 800185e:	3710      	adds	r7, #16
 8001860:	46bd      	mov	sp, r7
 8001862:	bd80      	pop	{r7, pc}
 8001864:	f3af 8000 	nop.w
 8001868:	667f3bcd 	.word	0x667f3bcd
 800186c:	3ff6a09e 	.word	0x3ff6a09e
 8001870:	e8584caa 	.word	0xe8584caa
 8001874:	3ffbb67a 	.word	0x3ffbb67a
 8001878:	40012000 	.word	0x40012000
 800187c:	200006d0 	.word	0x200006d0
 8001880:	41c80000 	.word	0x41c80000
 8001884:	200006cc 	.word	0x200006cc
 8001888:	88888889 	.word	0x88888889
 800188c:	40020000 	.word	0x40020000
 8001890:	20000004 	.word	0x20000004
 8001894:	200006c8 	.word	0x200006c8
 8001898:	200006d4 	.word	0x200006d4
 800189c:	200006d8 	.word	0x200006d8

080018a0 <HAL_TIM_PeriodElapsedCallback>:



// Callback: timer has rolled over
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)      //Timer ITR to calculate and change the duty cycle
{
 80018a0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80018a4:	b098      	sub	sp, #96	@ 0x60
 80018a6:	af00      	add	r7, sp, #0
 80018a8:	6078      	str	r0, [r7, #4]
	 static int tick_count = 0;    // Counter variable 
	 static double t = 0.0;    //Timer variable for manual timer
	 static double t_step = 1.0/(72000000.0/(7200));   //Step for manual timer

  if (htim == &htim3) {    //Checking for timer 3 overflow
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	4a16      	ldr	r2, [pc, #88]	@ (8001908 <HAL_TIM_PeriodElapsedCallback+0x68>)
 80018ae:	4293      	cmp	r3, r2
 80018b0:	f041 804a 	bne.w	8002948 <HAL_TIM_PeriodElapsedCallback+0x10a8>
	  tick_count += 1;
 80018b4:	4b15      	ldr	r3, [pc, #84]	@ (800190c <HAL_TIM_PeriodElapsedCallback+0x6c>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	3301      	adds	r3, #1
 80018ba:	4a14      	ldr	r2, [pc, #80]	@ (800190c <HAL_TIM_PeriodElapsedCallback+0x6c>)
 80018bc:	6013      	str	r3, [r2, #0]
	  if (tick_count >= 9) {   //Counter for changing how much duty cycles is calculated
 80018be:	4b13      	ldr	r3, [pc, #76]	@ (800190c <HAL_TIM_PeriodElapsedCallback+0x6c>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	2b08      	cmp	r3, #8
 80018c4:	f341 8018 	ble.w	80028f8 <HAL_TIM_PeriodElapsedCallback+0x1058>
		  tick_count = 0;    //Resets counter
 80018c8:	4b10      	ldr	r3, [pc, #64]	@ (800190c <HAL_TIM_PeriodElapsedCallback+0x6c>)
 80018ca:	2200      	movs	r2, #0
 80018cc:	601a      	str	r2, [r3, #0]

	  	  	  if (freq_sin <= 10.0) boost = 0.03; //Boost at 3% until 10 Hz
 80018ce:	4b10      	ldr	r3, [pc, #64]	@ (8001910 <HAL_TIM_PeriodElapsedCallback+0x70>)
 80018d0:	edd3 7a00 	vldr	s15, [r3]
 80018d4:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 80018d8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80018dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018e0:	d803      	bhi.n	80018ea <HAL_TIM_PeriodElapsedCallback+0x4a>
 80018e2:	4b0c      	ldr	r3, [pc, #48]	@ (8001914 <HAL_TIM_PeriodElapsedCallback+0x74>)
 80018e4:	4a0c      	ldr	r2, [pc, #48]	@ (8001918 <HAL_TIM_PeriodElapsedCallback+0x78>)
 80018e6:	601a      	str	r2, [r3, #0]
 80018e8:	e046      	b.n	8001978 <HAL_TIM_PeriodElapsedCallback+0xd8>
	  	  	  else if (freq_sin >= 20.0) boost = 0.0; //Boost at 0% at 20 Hz
 80018ea:	4b09      	ldr	r3, [pc, #36]	@ (8001910 <HAL_TIM_PeriodElapsedCallback+0x70>)
 80018ec:	edd3 7a00 	vldr	s15, [r3]
 80018f0:	eeb3 7a04 	vmov.f32	s14, #52	@ 0x41a00000  20.0
 80018f4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80018f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018fc:	db0e      	blt.n	800191c <HAL_TIM_PeriodElapsedCallback+0x7c>
 80018fe:	4b05      	ldr	r3, [pc, #20]	@ (8001914 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8001900:	f04f 0200 	mov.w	r2, #0
 8001904:	601a      	str	r2, [r3, #0]
 8001906:	e037      	b.n	8001978 <HAL_TIM_PeriodElapsedCallback+0xd8>
 8001908:	200000ec 	.word	0x200000ec
 800190c:	200006e4 	.word	0x200006e4
 8001910:	20000004 	.word	0x20000004
 8001914:	20000008 	.word	0x20000008
 8001918:	3cf5c28f 	.word	0x3cf5c28f
	  	  	  else {
	  	  		  float fade = (20.0 - freq_sin) / 10.0;   //Fade out the voltage boost between 10 and 20Hz
 800191c:	4bda      	ldr	r3, [pc, #872]	@ (8001c88 <HAL_TIM_PeriodElapsedCallback+0x3e8>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	4618      	mov	r0, r3
 8001922:	f7fe fdd5 	bl	80004d0 <__aeabi_f2d>
 8001926:	4602      	mov	r2, r0
 8001928:	460b      	mov	r3, r1
 800192a:	f04f 0000 	mov.w	r0, #0
 800192e:	49d7      	ldr	r1, [pc, #860]	@ (8001c8c <HAL_TIM_PeriodElapsedCallback+0x3ec>)
 8001930:	f7fe fc6e 	bl	8000210 <__aeabi_dsub>
 8001934:	4602      	mov	r2, r0
 8001936:	460b      	mov	r3, r1
 8001938:	4610      	mov	r0, r2
 800193a:	4619      	mov	r1, r3
 800193c:	f04f 0200 	mov.w	r2, #0
 8001940:	4bd3      	ldr	r3, [pc, #844]	@ (8001c90 <HAL_TIM_PeriodElapsedCallback+0x3f0>)
 8001942:	f7fe ff47 	bl	80007d4 <__aeabi_ddiv>
 8001946:	4602      	mov	r2, r0
 8001948:	460b      	mov	r3, r1
 800194a:	4610      	mov	r0, r2
 800194c:	4619      	mov	r1, r3
 800194e:	f7ff f8d1 	bl	8000af4 <__aeabi_d2f>
 8001952:	4603      	mov	r3, r0
 8001954:	63fb      	str	r3, [r7, #60]	@ 0x3c
	  	  		  boost = 0.03 * fade;
 8001956:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8001958:	f7fe fdba 	bl	80004d0 <__aeabi_f2d>
 800195c:	a3c2      	add	r3, pc, #776	@ (adr r3, 8001c68 <HAL_TIM_PeriodElapsedCallback+0x3c8>)
 800195e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001962:	f7fe fe0d 	bl	8000580 <__aeabi_dmul>
 8001966:	4602      	mov	r2, r0
 8001968:	460b      	mov	r3, r1
 800196a:	4610      	mov	r0, r2
 800196c:	4619      	mov	r1, r3
 800196e:	f7ff f8c1 	bl	8000af4 <__aeabi_d2f>
 8001972:	4603      	mov	r3, r0
 8001974:	4ac7      	ldr	r2, [pc, #796]	@ (8001c94 <HAL_TIM_PeriodElapsedCallback+0x3f4>)
 8001976:	6013      	str	r3, [r2, #0]
	  	  	  }

	  	    V_boost = (230*boost + (400.0/(sqrtf(3.0)) - 230*boost)/50 * freq_sin) * sqrtf(2.0); //Voltage boost
 8001978:	4bc6      	ldr	r3, [pc, #792]	@ (8001c94 <HAL_TIM_PeriodElapsedCallback+0x3f4>)
 800197a:	edd3 7a00 	vldr	s15, [r3]
 800197e:	ed9f 7ac6 	vldr	s14, [pc, #792]	@ 8001c98 <HAL_TIM_PeriodElapsedCallback+0x3f8>
 8001982:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001986:	ee17 0a90 	vmov	r0, s15
 800198a:	f7fe fda1 	bl	80004d0 <__aeabi_f2d>
 800198e:	4604      	mov	r4, r0
 8001990:	460d      	mov	r5, r1
 8001992:	4bc0      	ldr	r3, [pc, #768]	@ (8001c94 <HAL_TIM_PeriodElapsedCallback+0x3f4>)
 8001994:	edd3 7a00 	vldr	s15, [r3]
 8001998:	ed9f 7abf 	vldr	s14, [pc, #764]	@ 8001c98 <HAL_TIM_PeriodElapsedCallback+0x3f8>
 800199c:	ee67 7a87 	vmul.f32	s15, s15, s14
 80019a0:	ee17 0a90 	vmov	r0, s15
 80019a4:	f7fe fd94 	bl	80004d0 <__aeabi_f2d>
 80019a8:	4602      	mov	r2, r0
 80019aa:	460b      	mov	r3, r1
 80019ac:	a1b0      	add	r1, pc, #704	@ (adr r1, 8001c70 <HAL_TIM_PeriodElapsedCallback+0x3d0>)
 80019ae:	e9d1 0100 	ldrd	r0, r1, [r1]
 80019b2:	f7fe fc2d 	bl	8000210 <__aeabi_dsub>
 80019b6:	4602      	mov	r2, r0
 80019b8:	460b      	mov	r3, r1
 80019ba:	4610      	mov	r0, r2
 80019bc:	4619      	mov	r1, r3
 80019be:	f04f 0200 	mov.w	r2, #0
 80019c2:	4bb6      	ldr	r3, [pc, #728]	@ (8001c9c <HAL_TIM_PeriodElapsedCallback+0x3fc>)
 80019c4:	f7fe ff06 	bl	80007d4 <__aeabi_ddiv>
 80019c8:	4602      	mov	r2, r0
 80019ca:	460b      	mov	r3, r1
 80019cc:	4690      	mov	r8, r2
 80019ce:	4699      	mov	r9, r3
 80019d0:	4bad      	ldr	r3, [pc, #692]	@ (8001c88 <HAL_TIM_PeriodElapsedCallback+0x3e8>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	4618      	mov	r0, r3
 80019d6:	f7fe fd7b 	bl	80004d0 <__aeabi_f2d>
 80019da:	4602      	mov	r2, r0
 80019dc:	460b      	mov	r3, r1
 80019de:	4640      	mov	r0, r8
 80019e0:	4649      	mov	r1, r9
 80019e2:	f7fe fdcd 	bl	8000580 <__aeabi_dmul>
 80019e6:	4602      	mov	r2, r0
 80019e8:	460b      	mov	r3, r1
 80019ea:	4620      	mov	r0, r4
 80019ec:	4629      	mov	r1, r5
 80019ee:	f7fe fc11 	bl	8000214 <__adddf3>
 80019f2:	4602      	mov	r2, r0
 80019f4:	460b      	mov	r3, r1
 80019f6:	4610      	mov	r0, r2
 80019f8:	4619      	mov	r1, r3
 80019fa:	a39f      	add	r3, pc, #636	@ (adr r3, 8001c78 <HAL_TIM_PeriodElapsedCallback+0x3d8>)
 80019fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a00:	f7fe fdbe 	bl	8000580 <__aeabi_dmul>
 8001a04:	4602      	mov	r2, r0
 8001a06:	460b      	mov	r3, r1
 8001a08:	4610      	mov	r0, r2
 8001a0a:	4619      	mov	r1, r3
 8001a0c:	f7ff f872 	bl	8000af4 <__aeabi_d2f>
 8001a10:	4603      	mov	r3, r0
 8001a12:	4aa3      	ldr	r2, [pc, #652]	@ (8001ca0 <HAL_TIM_PeriodElapsedCallback+0x400>)
 8001a14:	6013      	str	r3, [r2, #0]

	  	  	if (V_boost > 400) V_boost = 400; //Over current protection
 8001a16:	4ba2      	ldr	r3, [pc, #648]	@ (8001ca0 <HAL_TIM_PeriodElapsedCallback+0x400>)
 8001a18:	edd3 7a00 	vldr	s15, [r3]
 8001a1c:	ed9f 7aa1 	vldr	s14, [pc, #644]	@ 8001ca4 <HAL_TIM_PeriodElapsedCallback+0x404>
 8001a20:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001a24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a28:	dd02      	ble.n	8001a30 <HAL_TIM_PeriodElapsedCallback+0x190>
 8001a2a:	4b9d      	ldr	r3, [pc, #628]	@ (8001ca0 <HAL_TIM_PeriodElapsedCallback+0x400>)
 8001a2c:	4a9e      	ldr	r2, [pc, #632]	@ (8001ca8 <HAL_TIM_PeriodElapsedCallback+0x408>)
 8001a2e:	601a      	str	r2, [r3, #0]

	  	    float phase = (2.0*pi*freq_sin*t);   //Phase calculation
 8001a30:	4b9e      	ldr	r3, [pc, #632]	@ (8001cac <HAL_TIM_PeriodElapsedCallback+0x40c>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	4618      	mov	r0, r3
 8001a36:	f7fe fd4b 	bl	80004d0 <__aeabi_f2d>
 8001a3a:	4602      	mov	r2, r0
 8001a3c:	460b      	mov	r3, r1
 8001a3e:	f7fe fbe9 	bl	8000214 <__adddf3>
 8001a42:	4602      	mov	r2, r0
 8001a44:	460b      	mov	r3, r1
 8001a46:	4614      	mov	r4, r2
 8001a48:	461d      	mov	r5, r3
 8001a4a:	4b8f      	ldr	r3, [pc, #572]	@ (8001c88 <HAL_TIM_PeriodElapsedCallback+0x3e8>)
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	4618      	mov	r0, r3
 8001a50:	f7fe fd3e 	bl	80004d0 <__aeabi_f2d>
 8001a54:	4602      	mov	r2, r0
 8001a56:	460b      	mov	r3, r1
 8001a58:	4620      	mov	r0, r4
 8001a5a:	4629      	mov	r1, r5
 8001a5c:	f7fe fd90 	bl	8000580 <__aeabi_dmul>
 8001a60:	4602      	mov	r2, r0
 8001a62:	460b      	mov	r3, r1
 8001a64:	4610      	mov	r0, r2
 8001a66:	4619      	mov	r1, r3
 8001a68:	4b91      	ldr	r3, [pc, #580]	@ (8001cb0 <HAL_TIM_PeriodElapsedCallback+0x410>)
 8001a6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a6e:	f7fe fd87 	bl	8000580 <__aeabi_dmul>
 8001a72:	4602      	mov	r2, r0
 8001a74:	460b      	mov	r3, r1
 8001a76:	4610      	mov	r0, r2
 8001a78:	4619      	mov	r1, r3
 8001a7a:	f7ff f83b 	bl	8000af4 <__aeabi_d2f>
 8001a7e:	4603      	mov	r3, r0
 8001a80:	63bb      	str	r3, [r7, #56]	@ 0x38

	  	    //Sine waves
	  	  	float  s_a = V_PP * sinf(phase);
 8001a82:	ed97 0a0e 	vldr	s0, [r7, #56]	@ 0x38
 8001a86:	f006 fa01 	bl	8007e8c <sinf>
 8001a8a:	eeb0 7a40 	vmov.f32	s14, s0
 8001a8e:	4b89      	ldr	r3, [pc, #548]	@ (8001cb4 <HAL_TIM_PeriodElapsedCallback+0x414>)
 8001a90:	edd3 7a00 	vldr	s15, [r3]
 8001a94:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a98:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
	 		float  s_b = V_PP * sinf(phase - direction1*pi/3.0);
 8001a9c:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8001a9e:	f7fe fd17 	bl	80004d0 <__aeabi_f2d>
 8001aa2:	4604      	mov	r4, r0
 8001aa4:	460d      	mov	r5, r1
 8001aa6:	4b84      	ldr	r3, [pc, #528]	@ (8001cb8 <HAL_TIM_PeriodElapsedCallback+0x418>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	ee07 3a90 	vmov	s15, r3
 8001aae:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001ab2:	4b7e      	ldr	r3, [pc, #504]	@ (8001cac <HAL_TIM_PeriodElapsedCallback+0x40c>)
 8001ab4:	edd3 7a00 	vldr	s15, [r3]
 8001ab8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001abc:	ee17 0a90 	vmov	r0, s15
 8001ac0:	f7fe fd06 	bl	80004d0 <__aeabi_f2d>
 8001ac4:	f04f 0200 	mov.w	r2, #0
 8001ac8:	4b7c      	ldr	r3, [pc, #496]	@ (8001cbc <HAL_TIM_PeriodElapsedCallback+0x41c>)
 8001aca:	f7fe fe83 	bl	80007d4 <__aeabi_ddiv>
 8001ace:	4602      	mov	r2, r0
 8001ad0:	460b      	mov	r3, r1
 8001ad2:	4620      	mov	r0, r4
 8001ad4:	4629      	mov	r1, r5
 8001ad6:	f7fe fb9b 	bl	8000210 <__aeabi_dsub>
 8001ada:	4602      	mov	r2, r0
 8001adc:	460b      	mov	r3, r1
 8001ade:	4610      	mov	r0, r2
 8001ae0:	4619      	mov	r1, r3
 8001ae2:	f7ff f807 	bl	8000af4 <__aeabi_d2f>
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	ee00 3a10 	vmov	s0, r3
 8001aec:	f006 f9ce 	bl	8007e8c <sinf>
 8001af0:	eeb0 7a40 	vmov.f32	s14, s0
 8001af4:	4b6f      	ldr	r3, [pc, #444]	@ (8001cb4 <HAL_TIM_PeriodElapsedCallback+0x414>)
 8001af6:	edd3 7a00 	vldr	s15, [r3]
 8001afa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001afe:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
	 		float  s_c = V_PP * sinf(phase - direction2*pi/3.0);
 8001b02:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8001b04:	f7fe fce4 	bl	80004d0 <__aeabi_f2d>
 8001b08:	4604      	mov	r4, r0
 8001b0a:	460d      	mov	r5, r1
 8001b0c:	4b6c      	ldr	r3, [pc, #432]	@ (8001cc0 <HAL_TIM_PeriodElapsedCallback+0x420>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	ee07 3a90 	vmov	s15, r3
 8001b14:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001b18:	4b64      	ldr	r3, [pc, #400]	@ (8001cac <HAL_TIM_PeriodElapsedCallback+0x40c>)
 8001b1a:	edd3 7a00 	vldr	s15, [r3]
 8001b1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b22:	ee17 0a90 	vmov	r0, s15
 8001b26:	f7fe fcd3 	bl	80004d0 <__aeabi_f2d>
 8001b2a:	f04f 0200 	mov.w	r2, #0
 8001b2e:	4b63      	ldr	r3, [pc, #396]	@ (8001cbc <HAL_TIM_PeriodElapsedCallback+0x41c>)
 8001b30:	f7fe fe50 	bl	80007d4 <__aeabi_ddiv>
 8001b34:	4602      	mov	r2, r0
 8001b36:	460b      	mov	r3, r1
 8001b38:	4620      	mov	r0, r4
 8001b3a:	4629      	mov	r1, r5
 8001b3c:	f7fe fb68 	bl	8000210 <__aeabi_dsub>
 8001b40:	4602      	mov	r2, r0
 8001b42:	460b      	mov	r3, r1
 8001b44:	4610      	mov	r0, r2
 8001b46:	4619      	mov	r1, r3
 8001b48:	f7fe ffd4 	bl	8000af4 <__aeabi_d2f>
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	ee00 3a10 	vmov	s0, r3
 8001b52:	f006 f99b 	bl	8007e8c <sinf>
 8001b56:	eeb0 7a40 	vmov.f32	s14, s0
 8001b5a:	4b56      	ldr	r3, [pc, #344]	@ (8001cb4 <HAL_TIM_PeriodElapsedCallback+0x414>)
 8001b5c:	edd3 7a00 	vldr	s15, [r3]
 8001b60:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b64:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c

	 		  //Clarke transformation
	 		  float s_alpha = (2.0/3.0)*(s_a - (1.0/2.0)*(s_b + s_c));
 8001b68:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8001b6a:	f7fe fcb1 	bl	80004d0 <__aeabi_f2d>
 8001b6e:	4604      	mov	r4, r0
 8001b70:	460d      	mov	r5, r1
 8001b72:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 8001b76:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8001b7a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b7e:	ee17 0a90 	vmov	r0, s15
 8001b82:	f7fe fca5 	bl	80004d0 <__aeabi_f2d>
 8001b86:	f04f 0200 	mov.w	r2, #0
 8001b8a:	4b4e      	ldr	r3, [pc, #312]	@ (8001cc4 <HAL_TIM_PeriodElapsedCallback+0x424>)
 8001b8c:	f7fe fcf8 	bl	8000580 <__aeabi_dmul>
 8001b90:	4602      	mov	r2, r0
 8001b92:	460b      	mov	r3, r1
 8001b94:	4620      	mov	r0, r4
 8001b96:	4629      	mov	r1, r5
 8001b98:	f7fe fb3a 	bl	8000210 <__aeabi_dsub>
 8001b9c:	4602      	mov	r2, r0
 8001b9e:	460b      	mov	r3, r1
 8001ba0:	4610      	mov	r0, r2
 8001ba2:	4619      	mov	r1, r3
 8001ba4:	a336      	add	r3, pc, #216	@ (adr r3, 8001c80 <HAL_TIM_PeriodElapsedCallback+0x3e0>)
 8001ba6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001baa:	f7fe fce9 	bl	8000580 <__aeabi_dmul>
 8001bae:	4602      	mov	r2, r0
 8001bb0:	460b      	mov	r3, r1
 8001bb2:	4610      	mov	r0, r2
 8001bb4:	4619      	mov	r1, r3
 8001bb6:	f7fe ff9d 	bl	8000af4 <__aeabi_d2f>
 8001bba:	4603      	mov	r3, r0
 8001bbc:	62bb      	str	r3, [r7, #40]	@ 0x28
	 		  float s_beta = (sqrtf(3.0)/3.0)*(s_b - s_c);
 8001bbe:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 8001bc2:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8001bc6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001bca:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 8001cc8 <HAL_TIM_PeriodElapsedCallback+0x428>
 8001bce:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001bd2:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24

	 		  //Space Vector Coordinates Calculator
	 		  float SV_theta = atan2f(s_beta, s_alpha);
 8001bd6:	edd7 0a0a 	vldr	s1, [r7, #40]	@ 0x28
 8001bda:	ed97 0a09 	vldr	s0, [r7, #36]	@ 0x24
 8001bde:	f006 f935 	bl	8007e4c <atan2f>
 8001be2:	ed87 0a17 	vstr	s0, [r7, #92]	@ 0x5c

	 		  // Ensures space vector angle is always positive
	 		  if (SV_theta < 0.0)
 8001be6:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 8001bea:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001bee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bf2:	d51b      	bpl.n	8001c2c <HAL_TIM_PeriodElapsedCallback+0x38c>
	 		  {
	 		  	SV_theta = SV_theta + 2.0*pi;
 8001bf4:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 8001bf6:	f7fe fc6b 	bl	80004d0 <__aeabi_f2d>
 8001bfa:	4604      	mov	r4, r0
 8001bfc:	460d      	mov	r5, r1
 8001bfe:	4b2b      	ldr	r3, [pc, #172]	@ (8001cac <HAL_TIM_PeriodElapsedCallback+0x40c>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	4618      	mov	r0, r3
 8001c04:	f7fe fc64 	bl	80004d0 <__aeabi_f2d>
 8001c08:	4602      	mov	r2, r0
 8001c0a:	460b      	mov	r3, r1
 8001c0c:	f7fe fb02 	bl	8000214 <__adddf3>
 8001c10:	4602      	mov	r2, r0
 8001c12:	460b      	mov	r3, r1
 8001c14:	4620      	mov	r0, r4
 8001c16:	4629      	mov	r1, r5
 8001c18:	f7fe fafc 	bl	8000214 <__adddf3>
 8001c1c:	4602      	mov	r2, r0
 8001c1e:	460b      	mov	r3, r1
 8001c20:	4610      	mov	r0, r2
 8001c22:	4619      	mov	r1, r3
 8001c24:	f7fe ff66 	bl	8000af4 <__aeabi_d2f>
 8001c28:	4603      	mov	r3, r0
 8001c2a:	65fb      	str	r3, [r7, #92]	@ 0x5c
	 		  }

	 		  // Magnitude of Space vector
	 		  float SV_m = sqrtf(s_alpha*s_alpha+s_beta*s_beta);
 8001c2c:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8001c30:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8001c34:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001c38:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001c3c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c40:	eeb0 0a67 	vmov.f32	s0, s15
 8001c44:	f006 f904 	bl	8007e50 <sqrtf>
 8001c48:	ed87 0a08 	vstr	s0, [r7, #32]

	 		  //Modulation Index Calculator
	 		  float M = SV_m/(V_DC/sqrtf(3.0));
 8001c4c:	4b1f      	ldr	r3, [pc, #124]	@ (8001ccc <HAL_TIM_PeriodElapsedCallback+0x42c>)
 8001c4e:	881b      	ldrh	r3, [r3, #0]
 8001c50:	ee07 3a90 	vmov	s15, r3
 8001c54:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c58:	eddf 6a1d 	vldr	s13, [pc, #116]	@ 8001cd0 <HAL_TIM_PeriodElapsedCallback+0x430>
 8001c5c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001c60:	edd7 6a08 	vldr	s13, [r7, #32]
 8001c64:	e036      	b.n	8001cd4 <HAL_TIM_PeriodElapsedCallback+0x434>
 8001c66:	bf00      	nop
 8001c68:	eb851eb8 	.word	0xeb851eb8
 8001c6c:	3f9eb851 	.word	0x3f9eb851
 8001c70:	65629fbb 	.word	0x65629fbb
 8001c74:	406cde15 	.word	0x406cde15
 8001c78:	60000000 	.word	0x60000000
 8001c7c:	3ff6a09e 	.word	0x3ff6a09e
 8001c80:	55555555 	.word	0x55555555
 8001c84:	3fe55555 	.word	0x3fe55555
 8001c88:	20000004 	.word	0x20000004
 8001c8c:	40340000 	.word	0x40340000
 8001c90:	40240000 	.word	0x40240000
 8001c94:	20000008 	.word	0x20000008
 8001c98:	43660000 	.word	0x43660000
 8001c9c:	40490000 	.word	0x40490000
 8001ca0:	200006dc 	.word	0x200006dc
 8001ca4:	43c80000 	.word	0x43c80000
 8001ca8:	43c80000 	.word	0x43c80000
 8001cac:	20000000 	.word	0x20000000
 8001cb0:	200006e8 	.word	0x200006e8
 8001cb4:	200006d8 	.word	0x200006d8
 8001cb8:	20000018 	.word	0x20000018
 8001cbc:	40080000 	.word	0x40080000
 8001cc0:	2000001c 	.word	0x2000001c
 8001cc4:	3fe00000 	.word	0x3fe00000
 8001cc8:	3f13cd3a 	.word	0x3f13cd3a
 8001ccc:	2000000c 	.word	0x2000000c
 8001cd0:	3fddb3d7 	.word	0x3fddb3d7
 8001cd4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001cd8:	edc7 7a16 	vstr	s15, [r7, #88]	@ 0x58
	 		  if (M > 1.0) M = 1.0; //Overflow protection
 8001cdc:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 8001ce0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001ce4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001ce8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cec:	dd02      	ble.n	8001cf4 <HAL_TIM_PeriodElapsedCallback+0x454>
 8001cee:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8001cf2:	65bb      	str	r3, [r7, #88]	@ 0x58

	 		  //Sector Calculator
	 		  if (0.0 <= SV_theta && SV_theta < pi/3.0)
 8001cf4:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 8001cf8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001cfc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d00:	db1b      	blt.n	8001d3a <HAL_TIM_PeriodElapsedCallback+0x49a>
 8001d02:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 8001d04:	f7fe fbe4 	bl	80004d0 <__aeabi_f2d>
 8001d08:	4604      	mov	r4, r0
 8001d0a:	460d      	mov	r5, r1
 8001d0c:	4b8d      	ldr	r3, [pc, #564]	@ (8001f44 <HAL_TIM_PeriodElapsedCallback+0x6a4>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	4618      	mov	r0, r3
 8001d12:	f7fe fbdd 	bl	80004d0 <__aeabi_f2d>
 8001d16:	f04f 0200 	mov.w	r2, #0
 8001d1a:	4b8b      	ldr	r3, [pc, #556]	@ (8001f48 <HAL_TIM_PeriodElapsedCallback+0x6a8>)
 8001d1c:	f7fe fd5a 	bl	80007d4 <__aeabi_ddiv>
 8001d20:	4602      	mov	r2, r0
 8001d22:	460b      	mov	r3, r1
 8001d24:	4620      	mov	r0, r4
 8001d26:	4629      	mov	r1, r5
 8001d28:	f7fe fe9c 	bl	8000a64 <__aeabi_dcmplt>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d003      	beq.n	8001d3a <HAL_TIM_PeriodElapsedCallback+0x49a>
	 		  {
	 			  sector = 1;
 8001d32:	4b86      	ldr	r3, [pc, #536]	@ (8001f4c <HAL_TIM_PeriodElapsedCallback+0x6ac>)
 8001d34:	2201      	movs	r2, #1
 8001d36:	801a      	strh	r2, [r3, #0]
 8001d38:	e155      	b.n	8001fe6 <HAL_TIM_PeriodElapsedCallback+0x746>
	 		  }
	 		  else if (pi/3.0 <= SV_theta && SV_theta < 2.0*pi/3.0)
 8001d3a:	4b82      	ldr	r3, [pc, #520]	@ (8001f44 <HAL_TIM_PeriodElapsedCallback+0x6a4>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	4618      	mov	r0, r3
 8001d40:	f7fe fbc6 	bl	80004d0 <__aeabi_f2d>
 8001d44:	f04f 0200 	mov.w	r2, #0
 8001d48:	4b7f      	ldr	r3, [pc, #508]	@ (8001f48 <HAL_TIM_PeriodElapsedCallback+0x6a8>)
 8001d4a:	f7fe fd43 	bl	80007d4 <__aeabi_ddiv>
 8001d4e:	4602      	mov	r2, r0
 8001d50:	460b      	mov	r3, r1
 8001d52:	4614      	mov	r4, r2
 8001d54:	461d      	mov	r5, r3
 8001d56:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 8001d58:	f7fe fbba 	bl	80004d0 <__aeabi_f2d>
 8001d5c:	4602      	mov	r2, r0
 8001d5e:	460b      	mov	r3, r1
 8001d60:	4620      	mov	r0, r4
 8001d62:	4629      	mov	r1, r5
 8001d64:	f7fe fe88 	bl	8000a78 <__aeabi_dcmple>
 8001d68:	4603      	mov	r3, r0
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d023      	beq.n	8001db6 <HAL_TIM_PeriodElapsedCallback+0x516>
 8001d6e:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 8001d70:	f7fe fbae 	bl	80004d0 <__aeabi_f2d>
 8001d74:	4604      	mov	r4, r0
 8001d76:	460d      	mov	r5, r1
 8001d78:	4b72      	ldr	r3, [pc, #456]	@ (8001f44 <HAL_TIM_PeriodElapsedCallback+0x6a4>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	f7fe fba7 	bl	80004d0 <__aeabi_f2d>
 8001d82:	4602      	mov	r2, r0
 8001d84:	460b      	mov	r3, r1
 8001d86:	f7fe fa45 	bl	8000214 <__adddf3>
 8001d8a:	4602      	mov	r2, r0
 8001d8c:	460b      	mov	r3, r1
 8001d8e:	4610      	mov	r0, r2
 8001d90:	4619      	mov	r1, r3
 8001d92:	f04f 0200 	mov.w	r2, #0
 8001d96:	4b6c      	ldr	r3, [pc, #432]	@ (8001f48 <HAL_TIM_PeriodElapsedCallback+0x6a8>)
 8001d98:	f7fe fd1c 	bl	80007d4 <__aeabi_ddiv>
 8001d9c:	4602      	mov	r2, r0
 8001d9e:	460b      	mov	r3, r1
 8001da0:	4620      	mov	r0, r4
 8001da2:	4629      	mov	r1, r5
 8001da4:	f7fe fe5e 	bl	8000a64 <__aeabi_dcmplt>
 8001da8:	4603      	mov	r3, r0
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d003      	beq.n	8001db6 <HAL_TIM_PeriodElapsedCallback+0x516>
	 		  {
	 			  sector = 2;
 8001dae:	4b67      	ldr	r3, [pc, #412]	@ (8001f4c <HAL_TIM_PeriodElapsedCallback+0x6ac>)
 8001db0:	2202      	movs	r2, #2
 8001db2:	801a      	strh	r2, [r3, #0]
 8001db4:	e117      	b.n	8001fe6 <HAL_TIM_PeriodElapsedCallback+0x746>
	 		  }
	 		  else if (2.0*pi/3.0 <= SV_theta && SV_theta < 3.0*pi/3.0)
 8001db6:	4b63      	ldr	r3, [pc, #396]	@ (8001f44 <HAL_TIM_PeriodElapsedCallback+0x6a4>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	4618      	mov	r0, r3
 8001dbc:	f7fe fb88 	bl	80004d0 <__aeabi_f2d>
 8001dc0:	4602      	mov	r2, r0
 8001dc2:	460b      	mov	r3, r1
 8001dc4:	f7fe fa26 	bl	8000214 <__adddf3>
 8001dc8:	4602      	mov	r2, r0
 8001dca:	460b      	mov	r3, r1
 8001dcc:	4610      	mov	r0, r2
 8001dce:	4619      	mov	r1, r3
 8001dd0:	f04f 0200 	mov.w	r2, #0
 8001dd4:	4b5c      	ldr	r3, [pc, #368]	@ (8001f48 <HAL_TIM_PeriodElapsedCallback+0x6a8>)
 8001dd6:	f7fe fcfd 	bl	80007d4 <__aeabi_ddiv>
 8001dda:	4602      	mov	r2, r0
 8001ddc:	460b      	mov	r3, r1
 8001dde:	4614      	mov	r4, r2
 8001de0:	461d      	mov	r5, r3
 8001de2:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 8001de4:	f7fe fb74 	bl	80004d0 <__aeabi_f2d>
 8001de8:	4602      	mov	r2, r0
 8001dea:	460b      	mov	r3, r1
 8001dec:	4620      	mov	r0, r4
 8001dee:	4629      	mov	r1, r5
 8001df0:	f7fe fe42 	bl	8000a78 <__aeabi_dcmple>
 8001df4:	4603      	mov	r3, r0
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d024      	beq.n	8001e44 <HAL_TIM_PeriodElapsedCallback+0x5a4>
 8001dfa:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 8001dfc:	f7fe fb68 	bl	80004d0 <__aeabi_f2d>
 8001e00:	4604      	mov	r4, r0
 8001e02:	460d      	mov	r5, r1
 8001e04:	4b4f      	ldr	r3, [pc, #316]	@ (8001f44 <HAL_TIM_PeriodElapsedCallback+0x6a4>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	4618      	mov	r0, r3
 8001e0a:	f7fe fb61 	bl	80004d0 <__aeabi_f2d>
 8001e0e:	f04f 0200 	mov.w	r2, #0
 8001e12:	4b4d      	ldr	r3, [pc, #308]	@ (8001f48 <HAL_TIM_PeriodElapsedCallback+0x6a8>)
 8001e14:	f7fe fbb4 	bl	8000580 <__aeabi_dmul>
 8001e18:	4602      	mov	r2, r0
 8001e1a:	460b      	mov	r3, r1
 8001e1c:	4610      	mov	r0, r2
 8001e1e:	4619      	mov	r1, r3
 8001e20:	f04f 0200 	mov.w	r2, #0
 8001e24:	4b48      	ldr	r3, [pc, #288]	@ (8001f48 <HAL_TIM_PeriodElapsedCallback+0x6a8>)
 8001e26:	f7fe fcd5 	bl	80007d4 <__aeabi_ddiv>
 8001e2a:	4602      	mov	r2, r0
 8001e2c:	460b      	mov	r3, r1
 8001e2e:	4620      	mov	r0, r4
 8001e30:	4629      	mov	r1, r5
 8001e32:	f7fe fe17 	bl	8000a64 <__aeabi_dcmplt>
 8001e36:	4603      	mov	r3, r0
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d003      	beq.n	8001e44 <HAL_TIM_PeriodElapsedCallback+0x5a4>
	 		  {
	 			  sector = 3;
 8001e3c:	4b43      	ldr	r3, [pc, #268]	@ (8001f4c <HAL_TIM_PeriodElapsedCallback+0x6ac>)
 8001e3e:	2203      	movs	r2, #3
 8001e40:	801a      	strh	r2, [r3, #0]
 8001e42:	e0d0      	b.n	8001fe6 <HAL_TIM_PeriodElapsedCallback+0x746>
	 		  }
	 		  else if (3.0*pi/3.0 <= SV_theta && SV_theta < 4.0*pi/3.0)
 8001e44:	4b3f      	ldr	r3, [pc, #252]	@ (8001f44 <HAL_TIM_PeriodElapsedCallback+0x6a4>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	4618      	mov	r0, r3
 8001e4a:	f7fe fb41 	bl	80004d0 <__aeabi_f2d>
 8001e4e:	f04f 0200 	mov.w	r2, #0
 8001e52:	4b3d      	ldr	r3, [pc, #244]	@ (8001f48 <HAL_TIM_PeriodElapsedCallback+0x6a8>)
 8001e54:	f7fe fb94 	bl	8000580 <__aeabi_dmul>
 8001e58:	4602      	mov	r2, r0
 8001e5a:	460b      	mov	r3, r1
 8001e5c:	4610      	mov	r0, r2
 8001e5e:	4619      	mov	r1, r3
 8001e60:	f04f 0200 	mov.w	r2, #0
 8001e64:	4b38      	ldr	r3, [pc, #224]	@ (8001f48 <HAL_TIM_PeriodElapsedCallback+0x6a8>)
 8001e66:	f7fe fcb5 	bl	80007d4 <__aeabi_ddiv>
 8001e6a:	4602      	mov	r2, r0
 8001e6c:	460b      	mov	r3, r1
 8001e6e:	4614      	mov	r4, r2
 8001e70:	461d      	mov	r5, r3
 8001e72:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 8001e74:	f7fe fb2c 	bl	80004d0 <__aeabi_f2d>
 8001e78:	4602      	mov	r2, r0
 8001e7a:	460b      	mov	r3, r1
 8001e7c:	4620      	mov	r0, r4
 8001e7e:	4629      	mov	r1, r5
 8001e80:	f7fe fdfa 	bl	8000a78 <__aeabi_dcmple>
 8001e84:	4603      	mov	r3, r0
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d024      	beq.n	8001ed4 <HAL_TIM_PeriodElapsedCallback+0x634>
 8001e8a:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 8001e8c:	f7fe fb20 	bl	80004d0 <__aeabi_f2d>
 8001e90:	4604      	mov	r4, r0
 8001e92:	460d      	mov	r5, r1
 8001e94:	4b2b      	ldr	r3, [pc, #172]	@ (8001f44 <HAL_TIM_PeriodElapsedCallback+0x6a4>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	4618      	mov	r0, r3
 8001e9a:	f7fe fb19 	bl	80004d0 <__aeabi_f2d>
 8001e9e:	f04f 0200 	mov.w	r2, #0
 8001ea2:	4b2b      	ldr	r3, [pc, #172]	@ (8001f50 <HAL_TIM_PeriodElapsedCallback+0x6b0>)
 8001ea4:	f7fe fb6c 	bl	8000580 <__aeabi_dmul>
 8001ea8:	4602      	mov	r2, r0
 8001eaa:	460b      	mov	r3, r1
 8001eac:	4610      	mov	r0, r2
 8001eae:	4619      	mov	r1, r3
 8001eb0:	f04f 0200 	mov.w	r2, #0
 8001eb4:	4b24      	ldr	r3, [pc, #144]	@ (8001f48 <HAL_TIM_PeriodElapsedCallback+0x6a8>)
 8001eb6:	f7fe fc8d 	bl	80007d4 <__aeabi_ddiv>
 8001eba:	4602      	mov	r2, r0
 8001ebc:	460b      	mov	r3, r1
 8001ebe:	4620      	mov	r0, r4
 8001ec0:	4629      	mov	r1, r5
 8001ec2:	f7fe fdcf 	bl	8000a64 <__aeabi_dcmplt>
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d003      	beq.n	8001ed4 <HAL_TIM_PeriodElapsedCallback+0x634>
	 		  {
	 			  sector = 4;
 8001ecc:	4b1f      	ldr	r3, [pc, #124]	@ (8001f4c <HAL_TIM_PeriodElapsedCallback+0x6ac>)
 8001ece:	2204      	movs	r2, #4
 8001ed0:	801a      	strh	r2, [r3, #0]
 8001ed2:	e088      	b.n	8001fe6 <HAL_TIM_PeriodElapsedCallback+0x746>
	 		  }
	 		  else if (4*pi/3 <= SV_theta && SV_theta < 5.0*pi/3.0)
 8001ed4:	4b1b      	ldr	r3, [pc, #108]	@ (8001f44 <HAL_TIM_PeriodElapsedCallback+0x6a4>)
 8001ed6:	edd3 7a00 	vldr	s15, [r3]
 8001eda:	eeb1 7a00 	vmov.f32	s14, #16	@ 0x40800000  4.0
 8001ede:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001ee2:	eef0 6a08 	vmov.f32	s13, #8	@ 0x40400000  3.0
 8001ee6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001eea:	ed97 7a17 	vldr	s14, [r7, #92]	@ 0x5c
 8001eee:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001ef2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ef6:	db2f      	blt.n	8001f58 <HAL_TIM_PeriodElapsedCallback+0x6b8>
 8001ef8:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 8001efa:	f7fe fae9 	bl	80004d0 <__aeabi_f2d>
 8001efe:	4604      	mov	r4, r0
 8001f00:	460d      	mov	r5, r1
 8001f02:	4b10      	ldr	r3, [pc, #64]	@ (8001f44 <HAL_TIM_PeriodElapsedCallback+0x6a4>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	4618      	mov	r0, r3
 8001f08:	f7fe fae2 	bl	80004d0 <__aeabi_f2d>
 8001f0c:	f04f 0200 	mov.w	r2, #0
 8001f10:	4b10      	ldr	r3, [pc, #64]	@ (8001f54 <HAL_TIM_PeriodElapsedCallback+0x6b4>)
 8001f12:	f7fe fb35 	bl	8000580 <__aeabi_dmul>
 8001f16:	4602      	mov	r2, r0
 8001f18:	460b      	mov	r3, r1
 8001f1a:	4610      	mov	r0, r2
 8001f1c:	4619      	mov	r1, r3
 8001f1e:	f04f 0200 	mov.w	r2, #0
 8001f22:	4b09      	ldr	r3, [pc, #36]	@ (8001f48 <HAL_TIM_PeriodElapsedCallback+0x6a8>)
 8001f24:	f7fe fc56 	bl	80007d4 <__aeabi_ddiv>
 8001f28:	4602      	mov	r2, r0
 8001f2a:	460b      	mov	r3, r1
 8001f2c:	4620      	mov	r0, r4
 8001f2e:	4629      	mov	r1, r5
 8001f30:	f7fe fd98 	bl	8000a64 <__aeabi_dcmplt>
 8001f34:	4603      	mov	r3, r0
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d00e      	beq.n	8001f58 <HAL_TIM_PeriodElapsedCallback+0x6b8>
	 		  {
	 			  sector = 5;
 8001f3a:	4b04      	ldr	r3, [pc, #16]	@ (8001f4c <HAL_TIM_PeriodElapsedCallback+0x6ac>)
 8001f3c:	2205      	movs	r2, #5
 8001f3e:	801a      	strh	r2, [r3, #0]
 8001f40:	e051      	b.n	8001fe6 <HAL_TIM_PeriodElapsedCallback+0x746>
 8001f42:	bf00      	nop
 8001f44:	20000000 	.word	0x20000000
 8001f48:	40080000 	.word	0x40080000
 8001f4c:	200006e0 	.word	0x200006e0
 8001f50:	40100000 	.word	0x40100000
 8001f54:	40140000 	.word	0x40140000
	 		  }
	 		  else if (5.0*pi/3.0 <= SV_theta && SV_theta < 6.0*pi/3.0)
 8001f58:	4bb9      	ldr	r3, [pc, #740]	@ (8002240 <HAL_TIM_PeriodElapsedCallback+0x9a0>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	f7fe fab7 	bl	80004d0 <__aeabi_f2d>
 8001f62:	f04f 0200 	mov.w	r2, #0
 8001f66:	4bb7      	ldr	r3, [pc, #732]	@ (8002244 <HAL_TIM_PeriodElapsedCallback+0x9a4>)
 8001f68:	f7fe fb0a 	bl	8000580 <__aeabi_dmul>
 8001f6c:	4602      	mov	r2, r0
 8001f6e:	460b      	mov	r3, r1
 8001f70:	4610      	mov	r0, r2
 8001f72:	4619      	mov	r1, r3
 8001f74:	f04f 0200 	mov.w	r2, #0
 8001f78:	4bb3      	ldr	r3, [pc, #716]	@ (8002248 <HAL_TIM_PeriodElapsedCallback+0x9a8>)
 8001f7a:	f7fe fc2b 	bl	80007d4 <__aeabi_ddiv>
 8001f7e:	4602      	mov	r2, r0
 8001f80:	460b      	mov	r3, r1
 8001f82:	4614      	mov	r4, r2
 8001f84:	461d      	mov	r5, r3
 8001f86:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 8001f88:	f7fe faa2 	bl	80004d0 <__aeabi_f2d>
 8001f8c:	4602      	mov	r2, r0
 8001f8e:	460b      	mov	r3, r1
 8001f90:	4620      	mov	r0, r4
 8001f92:	4629      	mov	r1, r5
 8001f94:	f7fe fd70 	bl	8000a78 <__aeabi_dcmple>
 8001f98:	4603      	mov	r3, r0
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d023      	beq.n	8001fe6 <HAL_TIM_PeriodElapsedCallback+0x746>
 8001f9e:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 8001fa0:	f7fe fa96 	bl	80004d0 <__aeabi_f2d>
 8001fa4:	4604      	mov	r4, r0
 8001fa6:	460d      	mov	r5, r1
 8001fa8:	4ba5      	ldr	r3, [pc, #660]	@ (8002240 <HAL_TIM_PeriodElapsedCallback+0x9a0>)
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	4618      	mov	r0, r3
 8001fae:	f7fe fa8f 	bl	80004d0 <__aeabi_f2d>
 8001fb2:	f04f 0200 	mov.w	r2, #0
 8001fb6:	4ba5      	ldr	r3, [pc, #660]	@ (800224c <HAL_TIM_PeriodElapsedCallback+0x9ac>)
 8001fb8:	f7fe fae2 	bl	8000580 <__aeabi_dmul>
 8001fbc:	4602      	mov	r2, r0
 8001fbe:	460b      	mov	r3, r1
 8001fc0:	4610      	mov	r0, r2
 8001fc2:	4619      	mov	r1, r3
 8001fc4:	f04f 0200 	mov.w	r2, #0
 8001fc8:	4b9f      	ldr	r3, [pc, #636]	@ (8002248 <HAL_TIM_PeriodElapsedCallback+0x9a8>)
 8001fca:	f7fe fc03 	bl	80007d4 <__aeabi_ddiv>
 8001fce:	4602      	mov	r2, r0
 8001fd0:	460b      	mov	r3, r1
 8001fd2:	4620      	mov	r0, r4
 8001fd4:	4629      	mov	r1, r5
 8001fd6:	f7fe fd45 	bl	8000a64 <__aeabi_dcmplt>
 8001fda:	4603      	mov	r3, r0
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d002      	beq.n	8001fe6 <HAL_TIM_PeriodElapsedCallback+0x746>
	 		  {
	 			  sector = 6;
 8001fe0:	4b9b      	ldr	r3, [pc, #620]	@ (8002250 <HAL_TIM_PeriodElapsedCallback+0x9b0>)
 8001fe2:	2206      	movs	r2, #6
 8001fe4:	801a      	strh	r2, [r3, #0]
	 		  }

	 		  // Space vector angle from begining of current sector
	 		  float sector_theta = SV_theta - (sector-1.0)*(pi/3.0);
 8001fe6:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 8001fe8:	f7fe fa72 	bl	80004d0 <__aeabi_f2d>
 8001fec:	4604      	mov	r4, r0
 8001fee:	460d      	mov	r5, r1
 8001ff0:	4b97      	ldr	r3, [pc, #604]	@ (8002250 <HAL_TIM_PeriodElapsedCallback+0x9b0>)
 8001ff2:	881b      	ldrh	r3, [r3, #0]
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	f7fe fa59 	bl	80004ac <__aeabi_i2d>
 8001ffa:	f04f 0200 	mov.w	r2, #0
 8001ffe:	4b95      	ldr	r3, [pc, #596]	@ (8002254 <HAL_TIM_PeriodElapsedCallback+0x9b4>)
 8002000:	f7fe f906 	bl	8000210 <__aeabi_dsub>
 8002004:	4602      	mov	r2, r0
 8002006:	460b      	mov	r3, r1
 8002008:	4690      	mov	r8, r2
 800200a:	4699      	mov	r9, r3
 800200c:	4b8c      	ldr	r3, [pc, #560]	@ (8002240 <HAL_TIM_PeriodElapsedCallback+0x9a0>)
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	4618      	mov	r0, r3
 8002012:	f7fe fa5d 	bl	80004d0 <__aeabi_f2d>
 8002016:	f04f 0200 	mov.w	r2, #0
 800201a:	4b8b      	ldr	r3, [pc, #556]	@ (8002248 <HAL_TIM_PeriodElapsedCallback+0x9a8>)
 800201c:	f7fe fbda 	bl	80007d4 <__aeabi_ddiv>
 8002020:	4602      	mov	r2, r0
 8002022:	460b      	mov	r3, r1
 8002024:	4640      	mov	r0, r8
 8002026:	4649      	mov	r1, r9
 8002028:	f7fe faaa 	bl	8000580 <__aeabi_dmul>
 800202c:	4602      	mov	r2, r0
 800202e:	460b      	mov	r3, r1
 8002030:	4620      	mov	r0, r4
 8002032:	4629      	mov	r1, r5
 8002034:	f7fe f8ec 	bl	8000210 <__aeabi_dsub>
 8002038:	4602      	mov	r2, r0
 800203a:	460b      	mov	r3, r1
 800203c:	4610      	mov	r0, r2
 800203e:	4619      	mov	r1, r3
 8002040:	f7fe fd58 	bl	8000af4 <__aeabi_d2f>
 8002044:	4603      	mov	r3, r0
 8002046:	61fb      	str	r3, [r7, #28]

	 		  //Dwell Time Calculator
	 		  float T_1 = T_s*M*sinf(pi/3.0 - sector_theta);
 8002048:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800204a:	f7fe fa41 	bl	80004d0 <__aeabi_f2d>
 800204e:	4b82      	ldr	r3, [pc, #520]	@ (8002258 <HAL_TIM_PeriodElapsedCallback+0x9b8>)
 8002050:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002054:	f7fe fa94 	bl	8000580 <__aeabi_dmul>
 8002058:	4602      	mov	r2, r0
 800205a:	460b      	mov	r3, r1
 800205c:	4614      	mov	r4, r2
 800205e:	461d      	mov	r5, r3
 8002060:	4b77      	ldr	r3, [pc, #476]	@ (8002240 <HAL_TIM_PeriodElapsedCallback+0x9a0>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	4618      	mov	r0, r3
 8002066:	f7fe fa33 	bl	80004d0 <__aeabi_f2d>
 800206a:	f04f 0200 	mov.w	r2, #0
 800206e:	4b76      	ldr	r3, [pc, #472]	@ (8002248 <HAL_TIM_PeriodElapsedCallback+0x9a8>)
 8002070:	f7fe fbb0 	bl	80007d4 <__aeabi_ddiv>
 8002074:	4602      	mov	r2, r0
 8002076:	460b      	mov	r3, r1
 8002078:	4690      	mov	r8, r2
 800207a:	4699      	mov	r9, r3
 800207c:	69f8      	ldr	r0, [r7, #28]
 800207e:	f7fe fa27 	bl	80004d0 <__aeabi_f2d>
 8002082:	4602      	mov	r2, r0
 8002084:	460b      	mov	r3, r1
 8002086:	4640      	mov	r0, r8
 8002088:	4649      	mov	r1, r9
 800208a:	f7fe f8c1 	bl	8000210 <__aeabi_dsub>
 800208e:	4602      	mov	r2, r0
 8002090:	460b      	mov	r3, r1
 8002092:	4610      	mov	r0, r2
 8002094:	4619      	mov	r1, r3
 8002096:	f7fe fd2d 	bl	8000af4 <__aeabi_d2f>
 800209a:	4603      	mov	r3, r0
 800209c:	ee00 3a10 	vmov	s0, r3
 80020a0:	f005 fef4 	bl	8007e8c <sinf>
 80020a4:	ee10 3a10 	vmov	r3, s0
 80020a8:	4618      	mov	r0, r3
 80020aa:	f7fe fa11 	bl	80004d0 <__aeabi_f2d>
 80020ae:	4602      	mov	r2, r0
 80020b0:	460b      	mov	r3, r1
 80020b2:	4620      	mov	r0, r4
 80020b4:	4629      	mov	r1, r5
 80020b6:	f7fe fa63 	bl	8000580 <__aeabi_dmul>
 80020ba:	4602      	mov	r2, r0
 80020bc:	460b      	mov	r3, r1
 80020be:	4610      	mov	r0, r2
 80020c0:	4619      	mov	r1, r3
 80020c2:	f7fe fd17 	bl	8000af4 <__aeabi_d2f>
 80020c6:	4603      	mov	r3, r0
 80020c8:	61bb      	str	r3, [r7, #24]
	 		  float T_2 = T_s*M*sinf(sector_theta);
 80020ca:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 80020cc:	f7fe fa00 	bl	80004d0 <__aeabi_f2d>
 80020d0:	4b61      	ldr	r3, [pc, #388]	@ (8002258 <HAL_TIM_PeriodElapsedCallback+0x9b8>)
 80020d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020d6:	f7fe fa53 	bl	8000580 <__aeabi_dmul>
 80020da:	4602      	mov	r2, r0
 80020dc:	460b      	mov	r3, r1
 80020de:	4614      	mov	r4, r2
 80020e0:	461d      	mov	r5, r3
 80020e2:	ed97 0a07 	vldr	s0, [r7, #28]
 80020e6:	f005 fed1 	bl	8007e8c <sinf>
 80020ea:	ee10 3a10 	vmov	r3, s0
 80020ee:	4618      	mov	r0, r3
 80020f0:	f7fe f9ee 	bl	80004d0 <__aeabi_f2d>
 80020f4:	4602      	mov	r2, r0
 80020f6:	460b      	mov	r3, r1
 80020f8:	4620      	mov	r0, r4
 80020fa:	4629      	mov	r1, r5
 80020fc:	f7fe fa40 	bl	8000580 <__aeabi_dmul>
 8002100:	4602      	mov	r2, r0
 8002102:	460b      	mov	r3, r1
 8002104:	4610      	mov	r0, r2
 8002106:	4619      	mov	r1, r3
 8002108:	f7fe fcf4 	bl	8000af4 <__aeabi_d2f>
 800210c:	4603      	mov	r3, r0
 800210e:	617b      	str	r3, [r7, #20]
	 		  float T_0 = T_s - (T_1 + T_2);
 8002110:	4b51      	ldr	r3, [pc, #324]	@ (8002258 <HAL_TIM_PeriodElapsedCallback+0x9b8>)
 8002112:	e9d3 4500 	ldrd	r4, r5, [r3]
 8002116:	ed97 7a06 	vldr	s14, [r7, #24]
 800211a:	edd7 7a05 	vldr	s15, [r7, #20]
 800211e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002122:	ee17 0a90 	vmov	r0, s15
 8002126:	f7fe f9d3 	bl	80004d0 <__aeabi_f2d>
 800212a:	4602      	mov	r2, r0
 800212c:	460b      	mov	r3, r1
 800212e:	4620      	mov	r0, r4
 8002130:	4629      	mov	r1, r5
 8002132:	f7fe f86d 	bl	8000210 <__aeabi_dsub>
 8002136:	4602      	mov	r2, r0
 8002138:	460b      	mov	r3, r1
 800213a:	4610      	mov	r0, r2
 800213c:	4619      	mov	r1, r3
 800213e:	f7fe fcd9 	bl	8000af4 <__aeabi_d2f>
 8002142:	4603      	mov	r3, r0
 8002144:	613b      	str	r3, [r7, #16]

	 		  //Duty cycle calculator based on current sector
	 		  if (sector == 1)
 8002146:	4b42      	ldr	r3, [pc, #264]	@ (8002250 <HAL_TIM_PeriodElapsedCallback+0x9b0>)
 8002148:	881b      	ldrh	r3, [r3, #0]
 800214a:	2b01      	cmp	r3, #1
 800214c:	f040 808e 	bne.w	800226c <HAL_TIM_PeriodElapsedCallback+0x9cc>
	 		  {
	 			DC_a = (2*(T_1 + T_2) + T_0)/(2*T_s) * 100;
 8002150:	ed97 7a06 	vldr	s14, [r7, #24]
 8002154:	edd7 7a05 	vldr	s15, [r7, #20]
 8002158:	ee77 7a27 	vadd.f32	s15, s14, s15
 800215c:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8002160:	edd7 7a04 	vldr	s15, [r7, #16]
 8002164:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002168:	ee17 0a90 	vmov	r0, s15
 800216c:	f7fe f9b0 	bl	80004d0 <__aeabi_f2d>
 8002170:	4604      	mov	r4, r0
 8002172:	460d      	mov	r5, r1
 8002174:	4b38      	ldr	r3, [pc, #224]	@ (8002258 <HAL_TIM_PeriodElapsedCallback+0x9b8>)
 8002176:	e9d3 0100 	ldrd	r0, r1, [r3]
 800217a:	4602      	mov	r2, r0
 800217c:	460b      	mov	r3, r1
 800217e:	f7fe f849 	bl	8000214 <__adddf3>
 8002182:	4602      	mov	r2, r0
 8002184:	460b      	mov	r3, r1
 8002186:	4620      	mov	r0, r4
 8002188:	4629      	mov	r1, r5
 800218a:	f7fe fb23 	bl	80007d4 <__aeabi_ddiv>
 800218e:	4602      	mov	r2, r0
 8002190:	460b      	mov	r3, r1
 8002192:	4610      	mov	r0, r2
 8002194:	4619      	mov	r1, r3
 8002196:	f04f 0200 	mov.w	r2, #0
 800219a:	4b30      	ldr	r3, [pc, #192]	@ (800225c <HAL_TIM_PeriodElapsedCallback+0x9bc>)
 800219c:	f7fe f9f0 	bl	8000580 <__aeabi_dmul>
 80021a0:	4602      	mov	r2, r0
 80021a2:	460b      	mov	r3, r1
 80021a4:	492e      	ldr	r1, [pc, #184]	@ (8002260 <HAL_TIM_PeriodElapsedCallback+0x9c0>)
 80021a6:	e9c1 2300 	strd	r2, r3, [r1]
	 			DC_b = (2*T_2 + T_0)/(2*T_s) * 100;
 80021aa:	edd7 7a05 	vldr	s15, [r7, #20]
 80021ae:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80021b2:	edd7 7a04 	vldr	s15, [r7, #16]
 80021b6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80021ba:	ee17 0a90 	vmov	r0, s15
 80021be:	f7fe f987 	bl	80004d0 <__aeabi_f2d>
 80021c2:	4604      	mov	r4, r0
 80021c4:	460d      	mov	r5, r1
 80021c6:	4b24      	ldr	r3, [pc, #144]	@ (8002258 <HAL_TIM_PeriodElapsedCallback+0x9b8>)
 80021c8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80021cc:	4602      	mov	r2, r0
 80021ce:	460b      	mov	r3, r1
 80021d0:	f7fe f820 	bl	8000214 <__adddf3>
 80021d4:	4602      	mov	r2, r0
 80021d6:	460b      	mov	r3, r1
 80021d8:	4620      	mov	r0, r4
 80021da:	4629      	mov	r1, r5
 80021dc:	f7fe fafa 	bl	80007d4 <__aeabi_ddiv>
 80021e0:	4602      	mov	r2, r0
 80021e2:	460b      	mov	r3, r1
 80021e4:	4610      	mov	r0, r2
 80021e6:	4619      	mov	r1, r3
 80021e8:	f04f 0200 	mov.w	r2, #0
 80021ec:	4b1b      	ldr	r3, [pc, #108]	@ (800225c <HAL_TIM_PeriodElapsedCallback+0x9bc>)
 80021ee:	f7fe f9c7 	bl	8000580 <__aeabi_dmul>
 80021f2:	4602      	mov	r2, r0
 80021f4:	460b      	mov	r3, r1
 80021f6:	491b      	ldr	r1, [pc, #108]	@ (8002264 <HAL_TIM_PeriodElapsedCallback+0x9c4>)
 80021f8:	e9c1 2300 	strd	r2, r3, [r1]
	 			DC_c = T_0/(2*T_s) * 100;
 80021fc:	6938      	ldr	r0, [r7, #16]
 80021fe:	f7fe f967 	bl	80004d0 <__aeabi_f2d>
 8002202:	4604      	mov	r4, r0
 8002204:	460d      	mov	r5, r1
 8002206:	4b14      	ldr	r3, [pc, #80]	@ (8002258 <HAL_TIM_PeriodElapsedCallback+0x9b8>)
 8002208:	e9d3 0100 	ldrd	r0, r1, [r3]
 800220c:	4602      	mov	r2, r0
 800220e:	460b      	mov	r3, r1
 8002210:	f7fe f800 	bl	8000214 <__adddf3>
 8002214:	4602      	mov	r2, r0
 8002216:	460b      	mov	r3, r1
 8002218:	4620      	mov	r0, r4
 800221a:	4629      	mov	r1, r5
 800221c:	f7fe fada 	bl	80007d4 <__aeabi_ddiv>
 8002220:	4602      	mov	r2, r0
 8002222:	460b      	mov	r3, r1
 8002224:	4610      	mov	r0, r2
 8002226:	4619      	mov	r1, r3
 8002228:	f04f 0200 	mov.w	r2, #0
 800222c:	4b0b      	ldr	r3, [pc, #44]	@ (800225c <HAL_TIM_PeriodElapsedCallback+0x9bc>)
 800222e:	f7fe f9a7 	bl	8000580 <__aeabi_dmul>
 8002232:	4602      	mov	r2, r0
 8002234:	460b      	mov	r3, r1
 8002236:	490c      	ldr	r1, [pc, #48]	@ (8002268 <HAL_TIM_PeriodElapsedCallback+0x9c8>)
 8002238:	e9c1 2300 	strd	r2, r3, [r1]
 800223c:	e289      	b.n	8002752 <HAL_TIM_PeriodElapsedCallback+0xeb2>
 800223e:	bf00      	nop
 8002240:	20000000 	.word	0x20000000
 8002244:	40140000 	.word	0x40140000
 8002248:	40080000 	.word	0x40080000
 800224c:	40180000 	.word	0x40180000
 8002250:	200006e0 	.word	0x200006e0
 8002254:	3ff00000 	.word	0x3ff00000
 8002258:	20000010 	.word	0x20000010
 800225c:	40590000 	.word	0x40590000
 8002260:	200006b0 	.word	0x200006b0
 8002264:	200006b8 	.word	0x200006b8
 8002268:	200006c0 	.word	0x200006c0
	 		  }
	 		  else if (sector == 2)
 800226c:	4bb8      	ldr	r3, [pc, #736]	@ (8002550 <HAL_TIM_PeriodElapsedCallback+0xcb0>)
 800226e:	881b      	ldrh	r3, [r3, #0]
 8002270:	2b02      	cmp	r3, #2
 8002272:	d176      	bne.n	8002362 <HAL_TIM_PeriodElapsedCallback+0xac2>
	 		  {
	 			DC_a = (2*T_1 + T_0)/(2*T_s) * 100;
 8002274:	edd7 7a06 	vldr	s15, [r7, #24]
 8002278:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800227c:	edd7 7a04 	vldr	s15, [r7, #16]
 8002280:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002284:	ee17 0a90 	vmov	r0, s15
 8002288:	f7fe f922 	bl	80004d0 <__aeabi_f2d>
 800228c:	4604      	mov	r4, r0
 800228e:	460d      	mov	r5, r1
 8002290:	4bb0      	ldr	r3, [pc, #704]	@ (8002554 <HAL_TIM_PeriodElapsedCallback+0xcb4>)
 8002292:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002296:	4602      	mov	r2, r0
 8002298:	460b      	mov	r3, r1
 800229a:	f7fd ffbb 	bl	8000214 <__adddf3>
 800229e:	4602      	mov	r2, r0
 80022a0:	460b      	mov	r3, r1
 80022a2:	4620      	mov	r0, r4
 80022a4:	4629      	mov	r1, r5
 80022a6:	f7fe fa95 	bl	80007d4 <__aeabi_ddiv>
 80022aa:	4602      	mov	r2, r0
 80022ac:	460b      	mov	r3, r1
 80022ae:	4610      	mov	r0, r2
 80022b0:	4619      	mov	r1, r3
 80022b2:	f04f 0200 	mov.w	r2, #0
 80022b6:	4ba8      	ldr	r3, [pc, #672]	@ (8002558 <HAL_TIM_PeriodElapsedCallback+0xcb8>)
 80022b8:	f7fe f962 	bl	8000580 <__aeabi_dmul>
 80022bc:	4602      	mov	r2, r0
 80022be:	460b      	mov	r3, r1
 80022c0:	49a6      	ldr	r1, [pc, #664]	@ (800255c <HAL_TIM_PeriodElapsedCallback+0xcbc>)
 80022c2:	e9c1 2300 	strd	r2, r3, [r1]
	 			DC_b = (2*(T_1 + T_2) + T_0)/(2*T_s) * 100;
 80022c6:	ed97 7a06 	vldr	s14, [r7, #24]
 80022ca:	edd7 7a05 	vldr	s15, [r7, #20]
 80022ce:	ee77 7a27 	vadd.f32	s15, s14, s15
 80022d2:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80022d6:	edd7 7a04 	vldr	s15, [r7, #16]
 80022da:	ee77 7a27 	vadd.f32	s15, s14, s15
 80022de:	ee17 0a90 	vmov	r0, s15
 80022e2:	f7fe f8f5 	bl	80004d0 <__aeabi_f2d>
 80022e6:	4604      	mov	r4, r0
 80022e8:	460d      	mov	r5, r1
 80022ea:	4b9a      	ldr	r3, [pc, #616]	@ (8002554 <HAL_TIM_PeriodElapsedCallback+0xcb4>)
 80022ec:	e9d3 0100 	ldrd	r0, r1, [r3]
 80022f0:	4602      	mov	r2, r0
 80022f2:	460b      	mov	r3, r1
 80022f4:	f7fd ff8e 	bl	8000214 <__adddf3>
 80022f8:	4602      	mov	r2, r0
 80022fa:	460b      	mov	r3, r1
 80022fc:	4620      	mov	r0, r4
 80022fe:	4629      	mov	r1, r5
 8002300:	f7fe fa68 	bl	80007d4 <__aeabi_ddiv>
 8002304:	4602      	mov	r2, r0
 8002306:	460b      	mov	r3, r1
 8002308:	4610      	mov	r0, r2
 800230a:	4619      	mov	r1, r3
 800230c:	f04f 0200 	mov.w	r2, #0
 8002310:	4b91      	ldr	r3, [pc, #580]	@ (8002558 <HAL_TIM_PeriodElapsedCallback+0xcb8>)
 8002312:	f7fe f935 	bl	8000580 <__aeabi_dmul>
 8002316:	4602      	mov	r2, r0
 8002318:	460b      	mov	r3, r1
 800231a:	4991      	ldr	r1, [pc, #580]	@ (8002560 <HAL_TIM_PeriodElapsedCallback+0xcc0>)
 800231c:	e9c1 2300 	strd	r2, r3, [r1]
	 			DC_c = T_0/(2*T_s) * 100;
 8002320:	6938      	ldr	r0, [r7, #16]
 8002322:	f7fe f8d5 	bl	80004d0 <__aeabi_f2d>
 8002326:	4604      	mov	r4, r0
 8002328:	460d      	mov	r5, r1
 800232a:	4b8a      	ldr	r3, [pc, #552]	@ (8002554 <HAL_TIM_PeriodElapsedCallback+0xcb4>)
 800232c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002330:	4602      	mov	r2, r0
 8002332:	460b      	mov	r3, r1
 8002334:	f7fd ff6e 	bl	8000214 <__adddf3>
 8002338:	4602      	mov	r2, r0
 800233a:	460b      	mov	r3, r1
 800233c:	4620      	mov	r0, r4
 800233e:	4629      	mov	r1, r5
 8002340:	f7fe fa48 	bl	80007d4 <__aeabi_ddiv>
 8002344:	4602      	mov	r2, r0
 8002346:	460b      	mov	r3, r1
 8002348:	4610      	mov	r0, r2
 800234a:	4619      	mov	r1, r3
 800234c:	f04f 0200 	mov.w	r2, #0
 8002350:	4b81      	ldr	r3, [pc, #516]	@ (8002558 <HAL_TIM_PeriodElapsedCallback+0xcb8>)
 8002352:	f7fe f915 	bl	8000580 <__aeabi_dmul>
 8002356:	4602      	mov	r2, r0
 8002358:	460b      	mov	r3, r1
 800235a:	4982      	ldr	r1, [pc, #520]	@ (8002564 <HAL_TIM_PeriodElapsedCallback+0xcc4>)
 800235c:	e9c1 2300 	strd	r2, r3, [r1]
 8002360:	e1f7      	b.n	8002752 <HAL_TIM_PeriodElapsedCallback+0xeb2>
	 		  }
	 		  else if (sector == 3)
 8002362:	4b7b      	ldr	r3, [pc, #492]	@ (8002550 <HAL_TIM_PeriodElapsedCallback+0xcb0>)
 8002364:	881b      	ldrh	r3, [r3, #0]
 8002366:	2b03      	cmp	r3, #3
 8002368:	d176      	bne.n	8002458 <HAL_TIM_PeriodElapsedCallback+0xbb8>
	 		  {
	 			DC_a = T_0/(2*T_s) * 100;
 800236a:	6938      	ldr	r0, [r7, #16]
 800236c:	f7fe f8b0 	bl	80004d0 <__aeabi_f2d>
 8002370:	4604      	mov	r4, r0
 8002372:	460d      	mov	r5, r1
 8002374:	4b77      	ldr	r3, [pc, #476]	@ (8002554 <HAL_TIM_PeriodElapsedCallback+0xcb4>)
 8002376:	e9d3 0100 	ldrd	r0, r1, [r3]
 800237a:	4602      	mov	r2, r0
 800237c:	460b      	mov	r3, r1
 800237e:	f7fd ff49 	bl	8000214 <__adddf3>
 8002382:	4602      	mov	r2, r0
 8002384:	460b      	mov	r3, r1
 8002386:	4620      	mov	r0, r4
 8002388:	4629      	mov	r1, r5
 800238a:	f7fe fa23 	bl	80007d4 <__aeabi_ddiv>
 800238e:	4602      	mov	r2, r0
 8002390:	460b      	mov	r3, r1
 8002392:	4610      	mov	r0, r2
 8002394:	4619      	mov	r1, r3
 8002396:	f04f 0200 	mov.w	r2, #0
 800239a:	4b6f      	ldr	r3, [pc, #444]	@ (8002558 <HAL_TIM_PeriodElapsedCallback+0xcb8>)
 800239c:	f7fe f8f0 	bl	8000580 <__aeabi_dmul>
 80023a0:	4602      	mov	r2, r0
 80023a2:	460b      	mov	r3, r1
 80023a4:	496d      	ldr	r1, [pc, #436]	@ (800255c <HAL_TIM_PeriodElapsedCallback+0xcbc>)
 80023a6:	e9c1 2300 	strd	r2, r3, [r1]
	 			DC_b = (2*(T_1 + T_2) + T_0)/(2*T_s) * 100;
 80023aa:	ed97 7a06 	vldr	s14, [r7, #24]
 80023ae:	edd7 7a05 	vldr	s15, [r7, #20]
 80023b2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80023b6:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80023ba:	edd7 7a04 	vldr	s15, [r7, #16]
 80023be:	ee77 7a27 	vadd.f32	s15, s14, s15
 80023c2:	ee17 0a90 	vmov	r0, s15
 80023c6:	f7fe f883 	bl	80004d0 <__aeabi_f2d>
 80023ca:	4604      	mov	r4, r0
 80023cc:	460d      	mov	r5, r1
 80023ce:	4b61      	ldr	r3, [pc, #388]	@ (8002554 <HAL_TIM_PeriodElapsedCallback+0xcb4>)
 80023d0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80023d4:	4602      	mov	r2, r0
 80023d6:	460b      	mov	r3, r1
 80023d8:	f7fd ff1c 	bl	8000214 <__adddf3>
 80023dc:	4602      	mov	r2, r0
 80023de:	460b      	mov	r3, r1
 80023e0:	4620      	mov	r0, r4
 80023e2:	4629      	mov	r1, r5
 80023e4:	f7fe f9f6 	bl	80007d4 <__aeabi_ddiv>
 80023e8:	4602      	mov	r2, r0
 80023ea:	460b      	mov	r3, r1
 80023ec:	4610      	mov	r0, r2
 80023ee:	4619      	mov	r1, r3
 80023f0:	f04f 0200 	mov.w	r2, #0
 80023f4:	4b58      	ldr	r3, [pc, #352]	@ (8002558 <HAL_TIM_PeriodElapsedCallback+0xcb8>)
 80023f6:	f7fe f8c3 	bl	8000580 <__aeabi_dmul>
 80023fa:	4602      	mov	r2, r0
 80023fc:	460b      	mov	r3, r1
 80023fe:	4958      	ldr	r1, [pc, #352]	@ (8002560 <HAL_TIM_PeriodElapsedCallback+0xcc0>)
 8002400:	e9c1 2300 	strd	r2, r3, [r1]
	 			DC_c = (2*T_2 + T_0)/(2*T_s) * 100;
 8002404:	edd7 7a05 	vldr	s15, [r7, #20]
 8002408:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800240c:	edd7 7a04 	vldr	s15, [r7, #16]
 8002410:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002414:	ee17 0a90 	vmov	r0, s15
 8002418:	f7fe f85a 	bl	80004d0 <__aeabi_f2d>
 800241c:	4604      	mov	r4, r0
 800241e:	460d      	mov	r5, r1
 8002420:	4b4c      	ldr	r3, [pc, #304]	@ (8002554 <HAL_TIM_PeriodElapsedCallback+0xcb4>)
 8002422:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002426:	4602      	mov	r2, r0
 8002428:	460b      	mov	r3, r1
 800242a:	f7fd fef3 	bl	8000214 <__adddf3>
 800242e:	4602      	mov	r2, r0
 8002430:	460b      	mov	r3, r1
 8002432:	4620      	mov	r0, r4
 8002434:	4629      	mov	r1, r5
 8002436:	f7fe f9cd 	bl	80007d4 <__aeabi_ddiv>
 800243a:	4602      	mov	r2, r0
 800243c:	460b      	mov	r3, r1
 800243e:	4610      	mov	r0, r2
 8002440:	4619      	mov	r1, r3
 8002442:	f04f 0200 	mov.w	r2, #0
 8002446:	4b44      	ldr	r3, [pc, #272]	@ (8002558 <HAL_TIM_PeriodElapsedCallback+0xcb8>)
 8002448:	f7fe f89a 	bl	8000580 <__aeabi_dmul>
 800244c:	4602      	mov	r2, r0
 800244e:	460b      	mov	r3, r1
 8002450:	4944      	ldr	r1, [pc, #272]	@ (8002564 <HAL_TIM_PeriodElapsedCallback+0xcc4>)
 8002452:	e9c1 2300 	strd	r2, r3, [r1]
 8002456:	e17c      	b.n	8002752 <HAL_TIM_PeriodElapsedCallback+0xeb2>
	 		  }
	 		  else if (sector == 4)
 8002458:	4b3d      	ldr	r3, [pc, #244]	@ (8002550 <HAL_TIM_PeriodElapsedCallback+0xcb0>)
 800245a:	881b      	ldrh	r3, [r3, #0]
 800245c:	2b04      	cmp	r3, #4
 800245e:	f040 8083 	bne.w	8002568 <HAL_TIM_PeriodElapsedCallback+0xcc8>
	 		  {
	 			DC_a = T_0/(2*T_s) * 100;
 8002462:	6938      	ldr	r0, [r7, #16]
 8002464:	f7fe f834 	bl	80004d0 <__aeabi_f2d>
 8002468:	4604      	mov	r4, r0
 800246a:	460d      	mov	r5, r1
 800246c:	4b39      	ldr	r3, [pc, #228]	@ (8002554 <HAL_TIM_PeriodElapsedCallback+0xcb4>)
 800246e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002472:	4602      	mov	r2, r0
 8002474:	460b      	mov	r3, r1
 8002476:	f7fd fecd 	bl	8000214 <__adddf3>
 800247a:	4602      	mov	r2, r0
 800247c:	460b      	mov	r3, r1
 800247e:	4620      	mov	r0, r4
 8002480:	4629      	mov	r1, r5
 8002482:	f7fe f9a7 	bl	80007d4 <__aeabi_ddiv>
 8002486:	4602      	mov	r2, r0
 8002488:	460b      	mov	r3, r1
 800248a:	4610      	mov	r0, r2
 800248c:	4619      	mov	r1, r3
 800248e:	f04f 0200 	mov.w	r2, #0
 8002492:	4b31      	ldr	r3, [pc, #196]	@ (8002558 <HAL_TIM_PeriodElapsedCallback+0xcb8>)
 8002494:	f7fe f874 	bl	8000580 <__aeabi_dmul>
 8002498:	4602      	mov	r2, r0
 800249a:	460b      	mov	r3, r1
 800249c:	492f      	ldr	r1, [pc, #188]	@ (800255c <HAL_TIM_PeriodElapsedCallback+0xcbc>)
 800249e:	e9c1 2300 	strd	r2, r3, [r1]
	 			DC_b = (2*T_1 + T_0)/(2*T_s) * 100;
 80024a2:	edd7 7a06 	vldr	s15, [r7, #24]
 80024a6:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80024aa:	edd7 7a04 	vldr	s15, [r7, #16]
 80024ae:	ee77 7a27 	vadd.f32	s15, s14, s15
 80024b2:	ee17 0a90 	vmov	r0, s15
 80024b6:	f7fe f80b 	bl	80004d0 <__aeabi_f2d>
 80024ba:	4604      	mov	r4, r0
 80024bc:	460d      	mov	r5, r1
 80024be:	4b25      	ldr	r3, [pc, #148]	@ (8002554 <HAL_TIM_PeriodElapsedCallback+0xcb4>)
 80024c0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80024c4:	4602      	mov	r2, r0
 80024c6:	460b      	mov	r3, r1
 80024c8:	f7fd fea4 	bl	8000214 <__adddf3>
 80024cc:	4602      	mov	r2, r0
 80024ce:	460b      	mov	r3, r1
 80024d0:	4620      	mov	r0, r4
 80024d2:	4629      	mov	r1, r5
 80024d4:	f7fe f97e 	bl	80007d4 <__aeabi_ddiv>
 80024d8:	4602      	mov	r2, r0
 80024da:	460b      	mov	r3, r1
 80024dc:	4610      	mov	r0, r2
 80024de:	4619      	mov	r1, r3
 80024e0:	f04f 0200 	mov.w	r2, #0
 80024e4:	4b1c      	ldr	r3, [pc, #112]	@ (8002558 <HAL_TIM_PeriodElapsedCallback+0xcb8>)
 80024e6:	f7fe f84b 	bl	8000580 <__aeabi_dmul>
 80024ea:	4602      	mov	r2, r0
 80024ec:	460b      	mov	r3, r1
 80024ee:	491c      	ldr	r1, [pc, #112]	@ (8002560 <HAL_TIM_PeriodElapsedCallback+0xcc0>)
 80024f0:	e9c1 2300 	strd	r2, r3, [r1]
	 			DC_c = (2*(T_1 + T_2) + T_0)/(2*T_s) * 100;
 80024f4:	ed97 7a06 	vldr	s14, [r7, #24]
 80024f8:	edd7 7a05 	vldr	s15, [r7, #20]
 80024fc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002500:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8002504:	edd7 7a04 	vldr	s15, [r7, #16]
 8002508:	ee77 7a27 	vadd.f32	s15, s14, s15
 800250c:	ee17 0a90 	vmov	r0, s15
 8002510:	f7fd ffde 	bl	80004d0 <__aeabi_f2d>
 8002514:	4604      	mov	r4, r0
 8002516:	460d      	mov	r5, r1
 8002518:	4b0e      	ldr	r3, [pc, #56]	@ (8002554 <HAL_TIM_PeriodElapsedCallback+0xcb4>)
 800251a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800251e:	4602      	mov	r2, r0
 8002520:	460b      	mov	r3, r1
 8002522:	f7fd fe77 	bl	8000214 <__adddf3>
 8002526:	4602      	mov	r2, r0
 8002528:	460b      	mov	r3, r1
 800252a:	4620      	mov	r0, r4
 800252c:	4629      	mov	r1, r5
 800252e:	f7fe f951 	bl	80007d4 <__aeabi_ddiv>
 8002532:	4602      	mov	r2, r0
 8002534:	460b      	mov	r3, r1
 8002536:	4610      	mov	r0, r2
 8002538:	4619      	mov	r1, r3
 800253a:	f04f 0200 	mov.w	r2, #0
 800253e:	4b06      	ldr	r3, [pc, #24]	@ (8002558 <HAL_TIM_PeriodElapsedCallback+0xcb8>)
 8002540:	f7fe f81e 	bl	8000580 <__aeabi_dmul>
 8002544:	4602      	mov	r2, r0
 8002546:	460b      	mov	r3, r1
 8002548:	4906      	ldr	r1, [pc, #24]	@ (8002564 <HAL_TIM_PeriodElapsedCallback+0xcc4>)
 800254a:	e9c1 2300 	strd	r2, r3, [r1]
 800254e:	e100      	b.n	8002752 <HAL_TIM_PeriodElapsedCallback+0xeb2>
 8002550:	200006e0 	.word	0x200006e0
 8002554:	20000010 	.word	0x20000010
 8002558:	40590000 	.word	0x40590000
 800255c:	200006b0 	.word	0x200006b0
 8002560:	200006b8 	.word	0x200006b8
 8002564:	200006c0 	.word	0x200006c0
	 		  }
	 		  else if (sector == 5)
 8002568:	4bbd      	ldr	r3, [pc, #756]	@ (8002860 <HAL_TIM_PeriodElapsedCallback+0xfc0>)
 800256a:	881b      	ldrh	r3, [r3, #0]
 800256c:	2b05      	cmp	r3, #5
 800256e:	d176      	bne.n	800265e <HAL_TIM_PeriodElapsedCallback+0xdbe>
	 		  {
	 			DC_a = (2*T_2 + T_0)/(2*T_s) * 100;
 8002570:	edd7 7a05 	vldr	s15, [r7, #20]
 8002574:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8002578:	edd7 7a04 	vldr	s15, [r7, #16]
 800257c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002580:	ee17 0a90 	vmov	r0, s15
 8002584:	f7fd ffa4 	bl	80004d0 <__aeabi_f2d>
 8002588:	4604      	mov	r4, r0
 800258a:	460d      	mov	r5, r1
 800258c:	4bb5      	ldr	r3, [pc, #724]	@ (8002864 <HAL_TIM_PeriodElapsedCallback+0xfc4>)
 800258e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002592:	4602      	mov	r2, r0
 8002594:	460b      	mov	r3, r1
 8002596:	f7fd fe3d 	bl	8000214 <__adddf3>
 800259a:	4602      	mov	r2, r0
 800259c:	460b      	mov	r3, r1
 800259e:	4620      	mov	r0, r4
 80025a0:	4629      	mov	r1, r5
 80025a2:	f7fe f917 	bl	80007d4 <__aeabi_ddiv>
 80025a6:	4602      	mov	r2, r0
 80025a8:	460b      	mov	r3, r1
 80025aa:	4610      	mov	r0, r2
 80025ac:	4619      	mov	r1, r3
 80025ae:	f04f 0200 	mov.w	r2, #0
 80025b2:	4bad      	ldr	r3, [pc, #692]	@ (8002868 <HAL_TIM_PeriodElapsedCallback+0xfc8>)
 80025b4:	f7fd ffe4 	bl	8000580 <__aeabi_dmul>
 80025b8:	4602      	mov	r2, r0
 80025ba:	460b      	mov	r3, r1
 80025bc:	49ab      	ldr	r1, [pc, #684]	@ (800286c <HAL_TIM_PeriodElapsedCallback+0xfcc>)
 80025be:	e9c1 2300 	strd	r2, r3, [r1]
	 			DC_b = T_0/(2*T_s) * 100;
 80025c2:	6938      	ldr	r0, [r7, #16]
 80025c4:	f7fd ff84 	bl	80004d0 <__aeabi_f2d>
 80025c8:	4604      	mov	r4, r0
 80025ca:	460d      	mov	r5, r1
 80025cc:	4ba5      	ldr	r3, [pc, #660]	@ (8002864 <HAL_TIM_PeriodElapsedCallback+0xfc4>)
 80025ce:	e9d3 0100 	ldrd	r0, r1, [r3]
 80025d2:	4602      	mov	r2, r0
 80025d4:	460b      	mov	r3, r1
 80025d6:	f7fd fe1d 	bl	8000214 <__adddf3>
 80025da:	4602      	mov	r2, r0
 80025dc:	460b      	mov	r3, r1
 80025de:	4620      	mov	r0, r4
 80025e0:	4629      	mov	r1, r5
 80025e2:	f7fe f8f7 	bl	80007d4 <__aeabi_ddiv>
 80025e6:	4602      	mov	r2, r0
 80025e8:	460b      	mov	r3, r1
 80025ea:	4610      	mov	r0, r2
 80025ec:	4619      	mov	r1, r3
 80025ee:	f04f 0200 	mov.w	r2, #0
 80025f2:	4b9d      	ldr	r3, [pc, #628]	@ (8002868 <HAL_TIM_PeriodElapsedCallback+0xfc8>)
 80025f4:	f7fd ffc4 	bl	8000580 <__aeabi_dmul>
 80025f8:	4602      	mov	r2, r0
 80025fa:	460b      	mov	r3, r1
 80025fc:	499c      	ldr	r1, [pc, #624]	@ (8002870 <HAL_TIM_PeriodElapsedCallback+0xfd0>)
 80025fe:	e9c1 2300 	strd	r2, r3, [r1]
	 			DC_c = (2*(T_1 + T_2) + T_0)/(2*T_s) * 100;
 8002602:	ed97 7a06 	vldr	s14, [r7, #24]
 8002606:	edd7 7a05 	vldr	s15, [r7, #20]
 800260a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800260e:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8002612:	edd7 7a04 	vldr	s15, [r7, #16]
 8002616:	ee77 7a27 	vadd.f32	s15, s14, s15
 800261a:	ee17 0a90 	vmov	r0, s15
 800261e:	f7fd ff57 	bl	80004d0 <__aeabi_f2d>
 8002622:	4604      	mov	r4, r0
 8002624:	460d      	mov	r5, r1
 8002626:	4b8f      	ldr	r3, [pc, #572]	@ (8002864 <HAL_TIM_PeriodElapsedCallback+0xfc4>)
 8002628:	e9d3 0100 	ldrd	r0, r1, [r3]
 800262c:	4602      	mov	r2, r0
 800262e:	460b      	mov	r3, r1
 8002630:	f7fd fdf0 	bl	8000214 <__adddf3>
 8002634:	4602      	mov	r2, r0
 8002636:	460b      	mov	r3, r1
 8002638:	4620      	mov	r0, r4
 800263a:	4629      	mov	r1, r5
 800263c:	f7fe f8ca 	bl	80007d4 <__aeabi_ddiv>
 8002640:	4602      	mov	r2, r0
 8002642:	460b      	mov	r3, r1
 8002644:	4610      	mov	r0, r2
 8002646:	4619      	mov	r1, r3
 8002648:	f04f 0200 	mov.w	r2, #0
 800264c:	4b86      	ldr	r3, [pc, #536]	@ (8002868 <HAL_TIM_PeriodElapsedCallback+0xfc8>)
 800264e:	f7fd ff97 	bl	8000580 <__aeabi_dmul>
 8002652:	4602      	mov	r2, r0
 8002654:	460b      	mov	r3, r1
 8002656:	4987      	ldr	r1, [pc, #540]	@ (8002874 <HAL_TIM_PeriodElapsedCallback+0xfd4>)
 8002658:	e9c1 2300 	strd	r2, r3, [r1]
 800265c:	e079      	b.n	8002752 <HAL_TIM_PeriodElapsedCallback+0xeb2>
	 		  }
	 		  else if (sector == 6)
 800265e:	4b80      	ldr	r3, [pc, #512]	@ (8002860 <HAL_TIM_PeriodElapsedCallback+0xfc0>)
 8002660:	881b      	ldrh	r3, [r3, #0]
 8002662:	2b06      	cmp	r3, #6
 8002664:	d175      	bne.n	8002752 <HAL_TIM_PeriodElapsedCallback+0xeb2>
	 		  {
	 		  	DC_a = (2*(T_1 + T_2) + T_0)/(2*T_s) * 100;
 8002666:	ed97 7a06 	vldr	s14, [r7, #24]
 800266a:	edd7 7a05 	vldr	s15, [r7, #20]
 800266e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002672:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8002676:	edd7 7a04 	vldr	s15, [r7, #16]
 800267a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800267e:	ee17 0a90 	vmov	r0, s15
 8002682:	f7fd ff25 	bl	80004d0 <__aeabi_f2d>
 8002686:	4604      	mov	r4, r0
 8002688:	460d      	mov	r5, r1
 800268a:	4b76      	ldr	r3, [pc, #472]	@ (8002864 <HAL_TIM_PeriodElapsedCallback+0xfc4>)
 800268c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002690:	4602      	mov	r2, r0
 8002692:	460b      	mov	r3, r1
 8002694:	f7fd fdbe 	bl	8000214 <__adddf3>
 8002698:	4602      	mov	r2, r0
 800269a:	460b      	mov	r3, r1
 800269c:	4620      	mov	r0, r4
 800269e:	4629      	mov	r1, r5
 80026a0:	f7fe f898 	bl	80007d4 <__aeabi_ddiv>
 80026a4:	4602      	mov	r2, r0
 80026a6:	460b      	mov	r3, r1
 80026a8:	4610      	mov	r0, r2
 80026aa:	4619      	mov	r1, r3
 80026ac:	f04f 0200 	mov.w	r2, #0
 80026b0:	4b6d      	ldr	r3, [pc, #436]	@ (8002868 <HAL_TIM_PeriodElapsedCallback+0xfc8>)
 80026b2:	f7fd ff65 	bl	8000580 <__aeabi_dmul>
 80026b6:	4602      	mov	r2, r0
 80026b8:	460b      	mov	r3, r1
 80026ba:	496c      	ldr	r1, [pc, #432]	@ (800286c <HAL_TIM_PeriodElapsedCallback+0xfcc>)
 80026bc:	e9c1 2300 	strd	r2, r3, [r1]
	 		  	DC_b = T_0/(2*T_s) * 100;
 80026c0:	6938      	ldr	r0, [r7, #16]
 80026c2:	f7fd ff05 	bl	80004d0 <__aeabi_f2d>
 80026c6:	4604      	mov	r4, r0
 80026c8:	460d      	mov	r5, r1
 80026ca:	4b66      	ldr	r3, [pc, #408]	@ (8002864 <HAL_TIM_PeriodElapsedCallback+0xfc4>)
 80026cc:	e9d3 0100 	ldrd	r0, r1, [r3]
 80026d0:	4602      	mov	r2, r0
 80026d2:	460b      	mov	r3, r1
 80026d4:	f7fd fd9e 	bl	8000214 <__adddf3>
 80026d8:	4602      	mov	r2, r0
 80026da:	460b      	mov	r3, r1
 80026dc:	4620      	mov	r0, r4
 80026de:	4629      	mov	r1, r5
 80026e0:	f7fe f878 	bl	80007d4 <__aeabi_ddiv>
 80026e4:	4602      	mov	r2, r0
 80026e6:	460b      	mov	r3, r1
 80026e8:	4610      	mov	r0, r2
 80026ea:	4619      	mov	r1, r3
 80026ec:	f04f 0200 	mov.w	r2, #0
 80026f0:	4b5d      	ldr	r3, [pc, #372]	@ (8002868 <HAL_TIM_PeriodElapsedCallback+0xfc8>)
 80026f2:	f7fd ff45 	bl	8000580 <__aeabi_dmul>
 80026f6:	4602      	mov	r2, r0
 80026f8:	460b      	mov	r3, r1
 80026fa:	495d      	ldr	r1, [pc, #372]	@ (8002870 <HAL_TIM_PeriodElapsedCallback+0xfd0>)
 80026fc:	e9c1 2300 	strd	r2, r3, [r1]
	 		  	DC_c = (2*T_1 + T_0)/(2*T_s) * 100;
 8002700:	edd7 7a06 	vldr	s15, [r7, #24]
 8002704:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8002708:	edd7 7a04 	vldr	s15, [r7, #16]
 800270c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002710:	ee17 0a90 	vmov	r0, s15
 8002714:	f7fd fedc 	bl	80004d0 <__aeabi_f2d>
 8002718:	4604      	mov	r4, r0
 800271a:	460d      	mov	r5, r1
 800271c:	4b51      	ldr	r3, [pc, #324]	@ (8002864 <HAL_TIM_PeriodElapsedCallback+0xfc4>)
 800271e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002722:	4602      	mov	r2, r0
 8002724:	460b      	mov	r3, r1
 8002726:	f7fd fd75 	bl	8000214 <__adddf3>
 800272a:	4602      	mov	r2, r0
 800272c:	460b      	mov	r3, r1
 800272e:	4620      	mov	r0, r4
 8002730:	4629      	mov	r1, r5
 8002732:	f7fe f84f 	bl	80007d4 <__aeabi_ddiv>
 8002736:	4602      	mov	r2, r0
 8002738:	460b      	mov	r3, r1
 800273a:	4610      	mov	r0, r2
 800273c:	4619      	mov	r1, r3
 800273e:	f04f 0200 	mov.w	r2, #0
 8002742:	4b49      	ldr	r3, [pc, #292]	@ (8002868 <HAL_TIM_PeriodElapsedCallback+0xfc8>)
 8002744:	f7fd ff1c 	bl	8000580 <__aeabi_dmul>
 8002748:	4602      	mov	r2, r0
 800274a:	460b      	mov	r3, r1
 800274c:	4949      	ldr	r1, [pc, #292]	@ (8002874 <HAL_TIM_PeriodElapsedCallback+0xfd4>)
 800274e:	e9c1 2300 	strd	r2, r3, [r1]
	 		  }

	 		 //Dead time
	 		 uint32_t dead_time_ticks = 250;  //Current dead time in ticks
 8002752:	23fa      	movs	r3, #250	@ 0xfa
 8002754:	60fb      	str	r3, [r7, #12]

	 		//Converting to ticks
	 		double desired_DC_a_ticks = (DC_a * (__HAL_TIM_GET_AUTORELOAD(&htim3) + 1)) / 100;
 8002756:	4b48      	ldr	r3, [pc, #288]	@ (8002878 <HAL_TIM_PeriodElapsedCallback+0xfd8>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800275c:	3301      	adds	r3, #1
 800275e:	4618      	mov	r0, r3
 8002760:	f7fd fe94 	bl	800048c <__aeabi_ui2d>
 8002764:	4b41      	ldr	r3, [pc, #260]	@ (800286c <HAL_TIM_PeriodElapsedCallback+0xfcc>)
 8002766:	e9d3 2300 	ldrd	r2, r3, [r3]
 800276a:	f7fd ff09 	bl	8000580 <__aeabi_dmul>
 800276e:	4602      	mov	r2, r0
 8002770:	460b      	mov	r3, r1
 8002772:	4610      	mov	r0, r2
 8002774:	4619      	mov	r1, r3
 8002776:	f04f 0200 	mov.w	r2, #0
 800277a:	4b3b      	ldr	r3, [pc, #236]	@ (8002868 <HAL_TIM_PeriodElapsedCallback+0xfc8>)
 800277c:	f7fe f82a 	bl	80007d4 <__aeabi_ddiv>
 8002780:	4602      	mov	r2, r0
 8002782:	460b      	mov	r3, r1
 8002784:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
	 		double desired_DC_b_ticks = (DC_b * (__HAL_TIM_GET_AUTORELOAD(&htim3) + 1)) / 100;
 8002788:	4b3b      	ldr	r3, [pc, #236]	@ (8002878 <HAL_TIM_PeriodElapsedCallback+0xfd8>)
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800278e:	3301      	adds	r3, #1
 8002790:	4618      	mov	r0, r3
 8002792:	f7fd fe7b 	bl	800048c <__aeabi_ui2d>
 8002796:	4b36      	ldr	r3, [pc, #216]	@ (8002870 <HAL_TIM_PeriodElapsedCallback+0xfd0>)
 8002798:	e9d3 2300 	ldrd	r2, r3, [r3]
 800279c:	f7fd fef0 	bl	8000580 <__aeabi_dmul>
 80027a0:	4602      	mov	r2, r0
 80027a2:	460b      	mov	r3, r1
 80027a4:	4610      	mov	r0, r2
 80027a6:	4619      	mov	r1, r3
 80027a8:	f04f 0200 	mov.w	r2, #0
 80027ac:	4b2e      	ldr	r3, [pc, #184]	@ (8002868 <HAL_TIM_PeriodElapsedCallback+0xfc8>)
 80027ae:	f7fe f811 	bl	80007d4 <__aeabi_ddiv>
 80027b2:	4602      	mov	r2, r0
 80027b4:	460b      	mov	r3, r1
 80027b6:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
	 		double desired_DC_c_ticks = (DC_c * (__HAL_TIM_GET_AUTORELOAD(&htim3) + 1)) / 100;
 80027ba:	4b2f      	ldr	r3, [pc, #188]	@ (8002878 <HAL_TIM_PeriodElapsedCallback+0xfd8>)
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027c0:	3301      	adds	r3, #1
 80027c2:	4618      	mov	r0, r3
 80027c4:	f7fd fe62 	bl	800048c <__aeabi_ui2d>
 80027c8:	4b2a      	ldr	r3, [pc, #168]	@ (8002874 <HAL_TIM_PeriodElapsedCallback+0xfd4>)
 80027ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027ce:	f7fd fed7 	bl	8000580 <__aeabi_dmul>
 80027d2:	4602      	mov	r2, r0
 80027d4:	460b      	mov	r3, r1
 80027d6:	4610      	mov	r0, r2
 80027d8:	4619      	mov	r1, r3
 80027da:	f04f 0200 	mov.w	r2, #0
 80027de:	4b22      	ldr	r3, [pc, #136]	@ (8002868 <HAL_TIM_PeriodElapsedCallback+0xfc8>)
 80027e0:	f7fd fff8 	bl	80007d4 <__aeabi_ddiv>
 80027e4:	4602      	mov	r2, r0
 80027e6:	460b      	mov	r3, r1
 80027e8:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40

	 		//Apply dead time compensation
	 		if (desired_DC_a_ticks > dead_time_ticks) desired_DC_a_ticks += dead_time_ticks; else desired_DC_a_ticks = 0;  // Prevent underflow
 80027ec:	68f8      	ldr	r0, [r7, #12]
 80027ee:	f7fd fe4d 	bl	800048c <__aeabi_ui2d>
 80027f2:	4602      	mov	r2, r0
 80027f4:	460b      	mov	r3, r1
 80027f6:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 80027fa:	f7fe f951 	bl	8000aa0 <__aeabi_dcmpgt>
 80027fe:	4603      	mov	r3, r0
 8002800:	2b00      	cmp	r3, #0
 8002802:	d00d      	beq.n	8002820 <HAL_TIM_PeriodElapsedCallback+0xf80>
 8002804:	68f8      	ldr	r0, [r7, #12]
 8002806:	f7fd fe41 	bl	800048c <__aeabi_ui2d>
 800280a:	4602      	mov	r2, r0
 800280c:	460b      	mov	r3, r1
 800280e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 8002812:	f7fd fcff 	bl	8000214 <__adddf3>
 8002816:	4602      	mov	r2, r0
 8002818:	460b      	mov	r3, r1
 800281a:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
 800281e:	e005      	b.n	800282c <HAL_TIM_PeriodElapsedCallback+0xf8c>
 8002820:	f04f 0200 	mov.w	r2, #0
 8002824:	f04f 0300 	mov.w	r3, #0
 8002828:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
	 		if (desired_DC_b_ticks > dead_time_ticks) desired_DC_b_ticks += dead_time_ticks; else desired_DC_b_ticks = 0;  // Prevent underflow
 800282c:	68f8      	ldr	r0, [r7, #12]
 800282e:	f7fd fe2d 	bl	800048c <__aeabi_ui2d>
 8002832:	4602      	mov	r2, r0
 8002834:	460b      	mov	r3, r1
 8002836:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 800283a:	f7fe f931 	bl	8000aa0 <__aeabi_dcmpgt>
 800283e:	4603      	mov	r3, r0
 8002840:	2b00      	cmp	r3, #0
 8002842:	d01b      	beq.n	800287c <HAL_TIM_PeriodElapsedCallback+0xfdc>
 8002844:	68f8      	ldr	r0, [r7, #12]
 8002846:	f7fd fe21 	bl	800048c <__aeabi_ui2d>
 800284a:	4602      	mov	r2, r0
 800284c:	460b      	mov	r3, r1
 800284e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 8002852:	f7fd fcdf 	bl	8000214 <__adddf3>
 8002856:	4602      	mov	r2, r0
 8002858:	460b      	mov	r3, r1
 800285a:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
 800285e:	e013      	b.n	8002888 <HAL_TIM_PeriodElapsedCallback+0xfe8>
 8002860:	200006e0 	.word	0x200006e0
 8002864:	20000010 	.word	0x20000010
 8002868:	40590000 	.word	0x40590000
 800286c:	200006b0 	.word	0x200006b0
 8002870:	200006b8 	.word	0x200006b8
 8002874:	200006c0 	.word	0x200006c0
 8002878:	200000ec 	.word	0x200000ec
 800287c:	f04f 0200 	mov.w	r2, #0
 8002880:	f04f 0300 	mov.w	r3, #0
 8002884:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
	 		if (desired_DC_c_ticks > dead_time_ticks) desired_DC_c_ticks += dead_time_ticks; else desired_DC_c_ticks = 0;  // Prevent underflow
 8002888:	68f8      	ldr	r0, [r7, #12]
 800288a:	f7fd fdff 	bl	800048c <__aeabi_ui2d>
 800288e:	4602      	mov	r2, r0
 8002890:	460b      	mov	r3, r1
 8002892:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 8002896:	f7fe f903 	bl	8000aa0 <__aeabi_dcmpgt>
 800289a:	4603      	mov	r3, r0
 800289c:	2b00      	cmp	r3, #0
 800289e:	d00d      	beq.n	80028bc <HAL_TIM_PeriodElapsedCallback+0x101c>
 80028a0:	68f8      	ldr	r0, [r7, #12]
 80028a2:	f7fd fdf3 	bl	800048c <__aeabi_ui2d>
 80028a6:	4602      	mov	r2, r0
 80028a8:	460b      	mov	r3, r1
 80028aa:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 80028ae:	f7fd fcb1 	bl	8000214 <__adddf3>
 80028b2:	4602      	mov	r2, r0
 80028b4:	460b      	mov	r3, r1
 80028b6:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
 80028ba:	e005      	b.n	80028c8 <HAL_TIM_PeriodElapsedCallback+0x1028>
 80028bc:	f04f 0200 	mov.w	r2, #0
 80028c0:	f04f 0300 	mov.w	r3, #0
 80028c4:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40

	 		//Update PWM channels
	 		  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, desired_DC_a_ticks);
 80028c8:	4b22      	ldr	r3, [pc, #136]	@ (8002954 <HAL_TIM_PeriodElapsedCallback+0x10b4>)
 80028ca:	681c      	ldr	r4, [r3, #0]
 80028cc:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	@ 0x50
 80028d0:	f7fe f8f0 	bl	8000ab4 <__aeabi_d2uiz>
 80028d4:	4603      	mov	r3, r0
 80028d6:	6363      	str	r3, [r4, #52]	@ 0x34
	 		  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, desired_DC_b_ticks);
 80028d8:	4b1e      	ldr	r3, [pc, #120]	@ (8002954 <HAL_TIM_PeriodElapsedCallback+0x10b4>)
 80028da:	681c      	ldr	r4, [r3, #0]
 80028dc:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 80028e0:	f7fe f8e8 	bl	8000ab4 <__aeabi_d2uiz>
 80028e4:	4603      	mov	r3, r0
 80028e6:	63a3      	str	r3, [r4, #56]	@ 0x38
	 		  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_3, desired_DC_c_ticks);
 80028e8:	4b1a      	ldr	r3, [pc, #104]	@ (8002954 <HAL_TIM_PeriodElapsedCallback+0x10b4>)
 80028ea:	681c      	ldr	r4, [r3, #0]
 80028ec:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	@ 0x40
 80028f0:	f7fe f8e0 	bl	8000ab4 <__aeabi_d2uiz>
 80028f4:	4603      	mov	r3, r0
 80028f6:	63e3      	str	r3, [r4, #60]	@ 0x3c
	  }
	  t += t_step;   //Manual timer counting up
 80028f8:	4b17      	ldr	r3, [pc, #92]	@ (8002958 <HAL_TIM_PeriodElapsedCallback+0x10b8>)
 80028fa:	e9d3 0100 	ldrd	r0, r1, [r3]
 80028fe:	4b17      	ldr	r3, [pc, #92]	@ (800295c <HAL_TIM_PeriodElapsedCallback+0x10bc>)
 8002900:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002904:	f7fd fc86 	bl	8000214 <__adddf3>
 8002908:	4602      	mov	r2, r0
 800290a:	460b      	mov	r3, r1
 800290c:	4912      	ldr	r1, [pc, #72]	@ (8002958 <HAL_TIM_PeriodElapsedCallback+0x10b8>)
 800290e:	e9c1 2300 	strd	r2, r3, [r1]
	    	  if (t >= 1/freq_sin) t = 0.0;   //Changes period of manual timer to be based on current frequency
 8002912:	4b13      	ldr	r3, [pc, #76]	@ (8002960 <HAL_TIM_PeriodElapsedCallback+0x10c0>)
 8002914:	edd3 7a00 	vldr	s15, [r3]
 8002918:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800291c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002920:	ee16 0a90 	vmov	r0, s13
 8002924:	f7fd fdd4 	bl	80004d0 <__aeabi_f2d>
 8002928:	4b0b      	ldr	r3, [pc, #44]	@ (8002958 <HAL_TIM_PeriodElapsedCallback+0x10b8>)
 800292a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800292e:	f7fe f8a3 	bl	8000a78 <__aeabi_dcmple>
 8002932:	4603      	mov	r3, r0
 8002934:	2b00      	cmp	r3, #0
 8002936:	d100      	bne.n	800293a <HAL_TIM_PeriodElapsedCallback+0x109a>
	  }
  }
 8002938:	e006      	b.n	8002948 <HAL_TIM_PeriodElapsedCallback+0x10a8>
	    	  if (t >= 1/freq_sin) t = 0.0;   //Changes period of manual timer to be based on current frequency
 800293a:	4907      	ldr	r1, [pc, #28]	@ (8002958 <HAL_TIM_PeriodElapsedCallback+0x10b8>)
 800293c:	f04f 0200 	mov.w	r2, #0
 8002940:	f04f 0300 	mov.w	r3, #0
 8002944:	e9c1 2300 	strd	r2, r3, [r1]
  }
 8002948:	bf00      	nop
 800294a:	3760      	adds	r7, #96	@ 0x60
 800294c:	46bd      	mov	sp, r7
 800294e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002952:	bf00      	nop
 8002954:	200000ec 	.word	0x200000ec
 8002958:	200006e8 	.word	0x200006e8
 800295c:	20000020 	.word	0x20000020
 8002960:	20000004 	.word	0x20000004

08002964 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002964:	b480      	push	{r7}
 8002966:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002968:	b672      	cpsid	i
}
 800296a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800296c:	bf00      	nop
 800296e:	e7fd      	b.n	800296c <Error_Handler+0x8>

08002970 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002970:	b480      	push	{r7}
 8002972:	b083      	sub	sp, #12
 8002974:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8002976:	4b0f      	ldr	r3, [pc, #60]	@ (80029b4 <HAL_MspInit+0x44>)
 8002978:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800297a:	4a0e      	ldr	r2, [pc, #56]	@ (80029b4 <HAL_MspInit+0x44>)
 800297c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002980:	6413      	str	r3, [r2, #64]	@ 0x40
 8002982:	4b0c      	ldr	r3, [pc, #48]	@ (80029b4 <HAL_MspInit+0x44>)
 8002984:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002986:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800298a:	607b      	str	r3, [r7, #4]
 800298c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800298e:	4b09      	ldr	r3, [pc, #36]	@ (80029b4 <HAL_MspInit+0x44>)
 8002990:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002992:	4a08      	ldr	r2, [pc, #32]	@ (80029b4 <HAL_MspInit+0x44>)
 8002994:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002998:	6453      	str	r3, [r2, #68]	@ 0x44
 800299a:	4b06      	ldr	r3, [pc, #24]	@ (80029b4 <HAL_MspInit+0x44>)
 800299c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800299e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80029a2:	603b      	str	r3, [r7, #0]
 80029a4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80029a6:	bf00      	nop
 80029a8:	370c      	adds	r7, #12
 80029aa:	46bd      	mov	sp, r7
 80029ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b0:	4770      	bx	lr
 80029b2:	bf00      	nop
 80029b4:	40023800 	.word	0x40023800

080029b8 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b08a      	sub	sp, #40	@ 0x28
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029c0:	f107 0314 	add.w	r3, r7, #20
 80029c4:	2200      	movs	r2, #0
 80029c6:	601a      	str	r2, [r3, #0]
 80029c8:	605a      	str	r2, [r3, #4]
 80029ca:	609a      	str	r2, [r3, #8]
 80029cc:	60da      	str	r2, [r3, #12]
 80029ce:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	4a19      	ldr	r2, [pc, #100]	@ (8002a3c <HAL_ADC_MspInit+0x84>)
 80029d6:	4293      	cmp	r3, r2
 80029d8:	d12b      	bne.n	8002a32 <HAL_ADC_MspInit+0x7a>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80029da:	4b19      	ldr	r3, [pc, #100]	@ (8002a40 <HAL_ADC_MspInit+0x88>)
 80029dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029de:	4a18      	ldr	r2, [pc, #96]	@ (8002a40 <HAL_ADC_MspInit+0x88>)
 80029e0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80029e4:	6453      	str	r3, [r2, #68]	@ 0x44
 80029e6:	4b16      	ldr	r3, [pc, #88]	@ (8002a40 <HAL_ADC_MspInit+0x88>)
 80029e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029ee:	613b      	str	r3, [r7, #16]
 80029f0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029f2:	4b13      	ldr	r3, [pc, #76]	@ (8002a40 <HAL_ADC_MspInit+0x88>)
 80029f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029f6:	4a12      	ldr	r2, [pc, #72]	@ (8002a40 <HAL_ADC_MspInit+0x88>)
 80029f8:	f043 0301 	orr.w	r3, r3, #1
 80029fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80029fe:	4b10      	ldr	r3, [pc, #64]	@ (8002a40 <HAL_ADC_MspInit+0x88>)
 8002a00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a02:	f003 0301 	and.w	r3, r3, #1
 8002a06:	60fb      	str	r3, [r7, #12]
 8002a08:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0/WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002a0a:	2301      	movs	r3, #1
 8002a0c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002a0e:	2303      	movs	r3, #3
 8002a10:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a12:	2300      	movs	r3, #0
 8002a14:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a16:	f107 0314 	add.w	r3, r7, #20
 8002a1a:	4619      	mov	r1, r3
 8002a1c:	4809      	ldr	r0, [pc, #36]	@ (8002a44 <HAL_ADC_MspInit+0x8c>)
 8002a1e:	f001 f8d3 	bl	8003bc8 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8002a22:	2200      	movs	r2, #0
 8002a24:	2100      	movs	r1, #0
 8002a26:	2012      	movs	r0, #18
 8002a28:	f001 f805 	bl	8003a36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8002a2c:	2012      	movs	r0, #18
 8002a2e:	f001 f81e 	bl	8003a6e <HAL_NVIC_EnableIRQ>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8002a32:	bf00      	nop
 8002a34:	3728      	adds	r7, #40	@ 0x28
 8002a36:	46bd      	mov	sp, r7
 8002a38:	bd80      	pop	{r7, pc}
 8002a3a:	bf00      	nop
 8002a3c:	40012000 	.word	0x40012000
 8002a40:	40023800 	.word	0x40023800
 8002a44:	40020000 	.word	0x40020000

08002a48 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b084      	sub	sp, #16
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	4a0d      	ldr	r2, [pc, #52]	@ (8002a8c <HAL_TIM_Base_MspInit+0x44>)
 8002a56:	4293      	cmp	r3, r2
 8002a58:	d113      	bne.n	8002a82 <HAL_TIM_Base_MspInit+0x3a>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002a5a:	4b0d      	ldr	r3, [pc, #52]	@ (8002a90 <HAL_TIM_Base_MspInit+0x48>)
 8002a5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a5e:	4a0c      	ldr	r2, [pc, #48]	@ (8002a90 <HAL_TIM_Base_MspInit+0x48>)
 8002a60:	f043 0302 	orr.w	r3, r3, #2
 8002a64:	6413      	str	r3, [r2, #64]	@ 0x40
 8002a66:	4b0a      	ldr	r3, [pc, #40]	@ (8002a90 <HAL_TIM_Base_MspInit+0x48>)
 8002a68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a6a:	f003 0302 	and.w	r3, r3, #2
 8002a6e:	60fb      	str	r3, [r7, #12]
 8002a70:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002a72:	2200      	movs	r2, #0
 8002a74:	2100      	movs	r1, #0
 8002a76:	201d      	movs	r0, #29
 8002a78:	f000 ffdd 	bl	8003a36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002a7c:	201d      	movs	r0, #29
 8002a7e:	f000 fff6 	bl	8003a6e <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM3_MspInit 1 */

  }

}
 8002a82:	bf00      	nop
 8002a84:	3710      	adds	r7, #16
 8002a86:	46bd      	mov	sp, r7
 8002a88:	bd80      	pop	{r7, pc}
 8002a8a:	bf00      	nop
 8002a8c:	40000400 	.word	0x40000400
 8002a90:	40023800 	.word	0x40023800

08002a94 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b08a      	sub	sp, #40	@ 0x28
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a9c:	f107 0314 	add.w	r3, r7, #20
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	601a      	str	r2, [r3, #0]
 8002aa4:	605a      	str	r2, [r3, #4]
 8002aa6:	609a      	str	r2, [r3, #8]
 8002aa8:	60da      	str	r2, [r3, #12]
 8002aaa:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	4a1f      	ldr	r2, [pc, #124]	@ (8002b30 <HAL_TIM_MspPostInit+0x9c>)
 8002ab2:	4293      	cmp	r3, r2
 8002ab4:	d138      	bne.n	8002b28 <HAL_TIM_MspPostInit+0x94>
  {
    /* USER CODE BEGIN TIM3_MspPostInit 0 */

    /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ab6:	4b1f      	ldr	r3, [pc, #124]	@ (8002b34 <HAL_TIM_MspPostInit+0xa0>)
 8002ab8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002aba:	4a1e      	ldr	r2, [pc, #120]	@ (8002b34 <HAL_TIM_MspPostInit+0xa0>)
 8002abc:	f043 0301 	orr.w	r3, r3, #1
 8002ac0:	6313      	str	r3, [r2, #48]	@ 0x30
 8002ac2:	4b1c      	ldr	r3, [pc, #112]	@ (8002b34 <HAL_TIM_MspPostInit+0xa0>)
 8002ac4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ac6:	f003 0301 	and.w	r3, r3, #1
 8002aca:	613b      	str	r3, [r7, #16]
 8002acc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002ace:	4b19      	ldr	r3, [pc, #100]	@ (8002b34 <HAL_TIM_MspPostInit+0xa0>)
 8002ad0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ad2:	4a18      	ldr	r2, [pc, #96]	@ (8002b34 <HAL_TIM_MspPostInit+0xa0>)
 8002ad4:	f043 0304 	orr.w	r3, r3, #4
 8002ad8:	6313      	str	r3, [r2, #48]	@ 0x30
 8002ada:	4b16      	ldr	r3, [pc, #88]	@ (8002b34 <HAL_TIM_MspPostInit+0xa0>)
 8002adc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ade:	f003 0304 	and.w	r3, r3, #4
 8002ae2:	60fb      	str	r3, [r7, #12]
 8002ae4:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    PC8     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002ae6:	23c0      	movs	r3, #192	@ 0xc0
 8002ae8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002aea:	2302      	movs	r3, #2
 8002aec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002aee:	2300      	movs	r3, #0
 8002af0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002af2:	2300      	movs	r3, #0
 8002af4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002af6:	2302      	movs	r3, #2
 8002af8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002afa:	f107 0314 	add.w	r3, r7, #20
 8002afe:	4619      	mov	r1, r3
 8002b00:	480d      	ldr	r0, [pc, #52]	@ (8002b38 <HAL_TIM_MspPostInit+0xa4>)
 8002b02:	f001 f861 	bl	8003bc8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002b06:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002b0a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b0c:	2302      	movs	r3, #2
 8002b0e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b10:	2300      	movs	r3, #0
 8002b12:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b14:	2300      	movs	r3, #0
 8002b16:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002b18:	2302      	movs	r3, #2
 8002b1a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002b1c:	f107 0314 	add.w	r3, r7, #20
 8002b20:	4619      	mov	r1, r3
 8002b22:	4806      	ldr	r0, [pc, #24]	@ (8002b3c <HAL_TIM_MspPostInit+0xa8>)
 8002b24:	f001 f850 	bl	8003bc8 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM3_MspPostInit 1 */

    /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002b28:	bf00      	nop
 8002b2a:	3728      	adds	r7, #40	@ 0x28
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	bd80      	pop	{r7, pc}
 8002b30:	40000400 	.word	0x40000400
 8002b34:	40023800 	.word	0x40023800
 8002b38:	40020000 	.word	0x40020000
 8002b3c:	40020800 	.word	0x40020800

08002b40 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b0aa      	sub	sp, #168	@ 0xa8
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b48:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	601a      	str	r2, [r3, #0]
 8002b50:	605a      	str	r2, [r3, #4]
 8002b52:	609a      	str	r2, [r3, #8]
 8002b54:	60da      	str	r2, [r3, #12]
 8002b56:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002b58:	f107 0310 	add.w	r3, r7, #16
 8002b5c:	2284      	movs	r2, #132	@ 0x84
 8002b5e:	2100      	movs	r1, #0
 8002b60:	4618      	mov	r0, r3
 8002b62:	f005 f941 	bl	8007de8 <memset>
  if(huart->Instance==USART2)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	4a25      	ldr	r2, [pc, #148]	@ (8002c00 <HAL_UART_MspInit+0xc0>)
 8002b6c:	4293      	cmp	r3, r2
 8002b6e:	d142      	bne.n	8002bf6 <HAL_UART_MspInit+0xb6>

    /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002b70:	2380      	movs	r3, #128	@ 0x80
 8002b72:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002b74:	2300      	movs	r3, #0
 8002b76:	65bb      	str	r3, [r7, #88]	@ 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002b78:	f107 0310 	add.w	r3, r7, #16
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	f002 f82f 	bl	8004be0 <HAL_RCCEx_PeriphCLKConfig>
 8002b82:	4603      	mov	r3, r0
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d001      	beq.n	8002b8c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002b88:	f7ff feec 	bl	8002964 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002b8c:	4b1d      	ldr	r3, [pc, #116]	@ (8002c04 <HAL_UART_MspInit+0xc4>)
 8002b8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b90:	4a1c      	ldr	r2, [pc, #112]	@ (8002c04 <HAL_UART_MspInit+0xc4>)
 8002b92:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002b96:	6413      	str	r3, [r2, #64]	@ 0x40
 8002b98:	4b1a      	ldr	r3, [pc, #104]	@ (8002c04 <HAL_UART_MspInit+0xc4>)
 8002b9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b9c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ba0:	60fb      	str	r3, [r7, #12]
 8002ba2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ba4:	4b17      	ldr	r3, [pc, #92]	@ (8002c04 <HAL_UART_MspInit+0xc4>)
 8002ba6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ba8:	4a16      	ldr	r2, [pc, #88]	@ (8002c04 <HAL_UART_MspInit+0xc4>)
 8002baa:	f043 0301 	orr.w	r3, r3, #1
 8002bae:	6313      	str	r3, [r2, #48]	@ 0x30
 8002bb0:	4b14      	ldr	r3, [pc, #80]	@ (8002c04 <HAL_UART_MspInit+0xc4>)
 8002bb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bb4:	f003 0301 	and.w	r3, r3, #1
 8002bb8:	60bb      	str	r3, [r7, #8]
 8002bba:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002bbc:	230c      	movs	r3, #12
 8002bbe:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bc2:	2302      	movs	r3, #2
 8002bc4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bc8:	2300      	movs	r3, #0
 8002bca:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002bce:	2303      	movs	r3, #3
 8002bd0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002bd4:	2307      	movs	r3, #7
 8002bd6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002bda:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8002bde:	4619      	mov	r1, r3
 8002be0:	4809      	ldr	r0, [pc, #36]	@ (8002c08 <HAL_UART_MspInit+0xc8>)
 8002be2:	f000 fff1 	bl	8003bc8 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002be6:	2200      	movs	r2, #0
 8002be8:	2100      	movs	r1, #0
 8002bea:	2026      	movs	r0, #38	@ 0x26
 8002bec:	f000 ff23 	bl	8003a36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002bf0:	2026      	movs	r0, #38	@ 0x26
 8002bf2:	f000 ff3c 	bl	8003a6e <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8002bf6:	bf00      	nop
 8002bf8:	37a8      	adds	r7, #168	@ 0xa8
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	bd80      	pop	{r7, pc}
 8002bfe:	bf00      	nop
 8002c00:	40004400 	.word	0x40004400
 8002c04:	40023800 	.word	0x40023800
 8002c08:	40020000 	.word	0x40020000

08002c0c <HAL_PCD_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hpcd: PCD handle pointer
  * @retval None
  */
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	b0ac      	sub	sp, #176	@ 0xb0
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c14:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8002c18:	2200      	movs	r2, #0
 8002c1a:	601a      	str	r2, [r3, #0]
 8002c1c:	605a      	str	r2, [r3, #4]
 8002c1e:	609a      	str	r2, [r3, #8]
 8002c20:	60da      	str	r2, [r3, #12]
 8002c22:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002c24:	f107 0318 	add.w	r3, r7, #24
 8002c28:	2284      	movs	r2, #132	@ 0x84
 8002c2a:	2100      	movs	r1, #0
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	f005 f8db 	bl	8007de8 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002c3a:	d159      	bne.n	8002cf0 <HAL_PCD_MspInit+0xe4>

    /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8002c3c:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8002c40:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8002c42:	2300      	movs	r3, #0
 8002c44:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002c48:	f107 0318 	add.w	r3, r7, #24
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	f001 ffc7 	bl	8004be0 <HAL_RCCEx_PeriphCLKConfig>
 8002c52:	4603      	mov	r3, r0
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d001      	beq.n	8002c5c <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8002c58:	f7ff fe84 	bl	8002964 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c5c:	4b26      	ldr	r3, [pc, #152]	@ (8002cf8 <HAL_PCD_MspInit+0xec>)
 8002c5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c60:	4a25      	ldr	r2, [pc, #148]	@ (8002cf8 <HAL_PCD_MspInit+0xec>)
 8002c62:	f043 0301 	orr.w	r3, r3, #1
 8002c66:	6313      	str	r3, [r2, #48]	@ 0x30
 8002c68:	4b23      	ldr	r3, [pc, #140]	@ (8002cf8 <HAL_PCD_MspInit+0xec>)
 8002c6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c6c:	f003 0301 	and.w	r3, r3, #1
 8002c70:	617b      	str	r3, [r7, #20]
 8002c72:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8002c74:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8002c78:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c7c:	2302      	movs	r3, #2
 8002c7e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c82:	2300      	movs	r3, #0
 8002c84:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c88:	2303      	movs	r3, #3
 8002c8a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8002c8e:	230a      	movs	r3, #10
 8002c90:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c94:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8002c98:	4619      	mov	r1, r3
 8002c9a:	4818      	ldr	r0, [pc, #96]	@ (8002cfc <HAL_PCD_MspInit+0xf0>)
 8002c9c:	f000 ff94 	bl	8003bc8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8002ca0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002ca4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002ca8:	2300      	movs	r3, #0
 8002caa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cae:	2300      	movs	r3, #0
 8002cb0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8002cb4:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8002cb8:	4619      	mov	r1, r3
 8002cba:	4810      	ldr	r0, [pc, #64]	@ (8002cfc <HAL_PCD_MspInit+0xf0>)
 8002cbc:	f000 ff84 	bl	8003bc8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8002cc0:	4b0d      	ldr	r3, [pc, #52]	@ (8002cf8 <HAL_PCD_MspInit+0xec>)
 8002cc2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002cc4:	4a0c      	ldr	r2, [pc, #48]	@ (8002cf8 <HAL_PCD_MspInit+0xec>)
 8002cc6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002cca:	6353      	str	r3, [r2, #52]	@ 0x34
 8002ccc:	4b0a      	ldr	r3, [pc, #40]	@ (8002cf8 <HAL_PCD_MspInit+0xec>)
 8002cce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002cd0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002cd4:	613b      	str	r3, [r7, #16]
 8002cd6:	693b      	ldr	r3, [r7, #16]
 8002cd8:	4b07      	ldr	r3, [pc, #28]	@ (8002cf8 <HAL_PCD_MspInit+0xec>)
 8002cda:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cdc:	4a06      	ldr	r2, [pc, #24]	@ (8002cf8 <HAL_PCD_MspInit+0xec>)
 8002cde:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002ce2:	6453      	str	r3, [r2, #68]	@ 0x44
 8002ce4:	4b04      	ldr	r3, [pc, #16]	@ (8002cf8 <HAL_PCD_MspInit+0xec>)
 8002ce6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ce8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002cec:	60fb      	str	r3, [r7, #12]
 8002cee:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END USB_OTG_FS_MspInit 1 */

  }

}
 8002cf0:	bf00      	nop
 8002cf2:	37b0      	adds	r7, #176	@ 0xb0
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	bd80      	pop	{r7, pc}
 8002cf8:	40023800 	.word	0x40023800
 8002cfc:	40020000 	.word	0x40020000

08002d00 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002d00:	b480      	push	{r7}
 8002d02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002d04:	bf00      	nop
 8002d06:	e7fd      	b.n	8002d04 <NMI_Handler+0x4>

08002d08 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002d08:	b480      	push	{r7}
 8002d0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002d0c:	bf00      	nop
 8002d0e:	e7fd      	b.n	8002d0c <HardFault_Handler+0x4>

08002d10 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002d10:	b480      	push	{r7}
 8002d12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002d14:	bf00      	nop
 8002d16:	e7fd      	b.n	8002d14 <MemManage_Handler+0x4>

08002d18 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002d18:	b480      	push	{r7}
 8002d1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002d1c:	bf00      	nop
 8002d1e:	e7fd      	b.n	8002d1c <BusFault_Handler+0x4>

08002d20 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002d20:	b480      	push	{r7}
 8002d22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002d24:	bf00      	nop
 8002d26:	e7fd      	b.n	8002d24 <UsageFault_Handler+0x4>

08002d28 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002d28:	b480      	push	{r7}
 8002d2a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002d2c:	bf00      	nop
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d34:	4770      	bx	lr

08002d36 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002d36:	b480      	push	{r7}
 8002d38:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002d3a:	bf00      	nop
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d42:	4770      	bx	lr

08002d44 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002d44:	b480      	push	{r7}
 8002d46:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002d48:	bf00      	nop
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d50:	4770      	bx	lr

08002d52 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002d52:	b580      	push	{r7, lr}
 8002d54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002d56:	f000 f8a3 	bl	8002ea0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002d5a:	bf00      	nop
 8002d5c:	bd80      	pop	{r7, pc}
	...

08002d60 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002d64:	4802      	ldr	r0, [pc, #8]	@ (8002d70 <ADC_IRQHandler+0x10>)
 8002d66:	f000 f9fb 	bl	8003160 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8002d6a:	bf00      	nop
 8002d6c:	bd80      	pop	{r7, pc}
 8002d6e:	bf00      	nop
 8002d70:	200000a4 	.word	0x200000a4

08002d74 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8002d78:	2040      	movs	r0, #64	@ 0x40
 8002d7a:	f001 f905 	bl	8003f88 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8002d7e:	2080      	movs	r0, #128	@ 0x80
 8002d80:	f001 f902 	bl	8003f88 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002d84:	bf00      	nop
 8002d86:	bd80      	pop	{r7, pc}

08002d88 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002d8c:	4802      	ldr	r0, [pc, #8]	@ (8002d98 <TIM3_IRQHandler+0x10>)
 8002d8e:	f002 fdf3 	bl	8005978 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002d92:	bf00      	nop
 8002d94:	bd80      	pop	{r7, pc}
 8002d96:	bf00      	nop
 8002d98:	200000ec 	.word	0x200000ec

08002d9c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002da0:	4802      	ldr	r0, [pc, #8]	@ (8002dac <USART2_IRQHandler+0x10>)
 8002da2:	f003 fdb5 	bl	8006910 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002da6:	bf00      	nop
 8002da8:	bd80      	pop	{r7, pc}
 8002daa:	bf00      	nop
 8002dac:	20000138 	.word	0x20000138

08002db0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002db0:	b480      	push	{r7}
 8002db2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002db4:	4b06      	ldr	r3, [pc, #24]	@ (8002dd0 <SystemInit+0x20>)
 8002db6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002dba:	4a05      	ldr	r2, [pc, #20]	@ (8002dd0 <SystemInit+0x20>)
 8002dbc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002dc0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002dc4:	bf00      	nop
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dcc:	4770      	bx	lr
 8002dce:	bf00      	nop
 8002dd0:	e000ed00 	.word	0xe000ed00

08002dd4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002dd4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002e0c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002dd8:	f7ff ffea 	bl	8002db0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002ddc:	480c      	ldr	r0, [pc, #48]	@ (8002e10 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002dde:	490d      	ldr	r1, [pc, #52]	@ (8002e14 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002de0:	4a0d      	ldr	r2, [pc, #52]	@ (8002e18 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002de2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002de4:	e002      	b.n	8002dec <LoopCopyDataInit>

08002de6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002de6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002de8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002dea:	3304      	adds	r3, #4

08002dec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002dec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002dee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002df0:	d3f9      	bcc.n	8002de6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002df2:	4a0a      	ldr	r2, [pc, #40]	@ (8002e1c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002df4:	4c0a      	ldr	r4, [pc, #40]	@ (8002e20 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002df6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002df8:	e001      	b.n	8002dfe <LoopFillZerobss>

08002dfa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002dfa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002dfc:	3204      	adds	r2, #4

08002dfe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002dfe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002e00:	d3fb      	bcc.n	8002dfa <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8002e02:	f004 ffff 	bl	8007e04 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002e06:	f7fe f85b 	bl	8000ec0 <main>
  bx  lr    
 8002e0a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002e0c:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8002e10:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002e14:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 8002e18:	08009024 	.word	0x08009024
  ldr r2, =_sbss
 8002e1c:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8002e20:	2000082c 	.word	0x2000082c

08002e24 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002e24:	e7fe      	b.n	8002e24 <CAN1_RX0_IRQHandler>

08002e26 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002e26:	b580      	push	{r7, lr}
 8002e28:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002e2a:	2003      	movs	r0, #3
 8002e2c:	f000 fdf8 	bl	8003a20 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002e30:	2000      	movs	r0, #0
 8002e32:	f000 f805 	bl	8002e40 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002e36:	f7ff fd9b 	bl	8002970 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002e3a:	2300      	movs	r3, #0
}
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	bd80      	pop	{r7, pc}

08002e40 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b082      	sub	sp, #8
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002e48:	4b12      	ldr	r3, [pc, #72]	@ (8002e94 <HAL_InitTick+0x54>)
 8002e4a:	681a      	ldr	r2, [r3, #0]
 8002e4c:	4b12      	ldr	r3, [pc, #72]	@ (8002e98 <HAL_InitTick+0x58>)
 8002e4e:	781b      	ldrb	r3, [r3, #0]
 8002e50:	4619      	mov	r1, r3
 8002e52:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002e56:	fbb3 f3f1 	udiv	r3, r3, r1
 8002e5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e5e:	4618      	mov	r0, r3
 8002e60:	f000 fe13 	bl	8003a8a <HAL_SYSTICK_Config>
 8002e64:	4603      	mov	r3, r0
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d001      	beq.n	8002e6e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002e6a:	2301      	movs	r3, #1
 8002e6c:	e00e      	b.n	8002e8c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	2b0f      	cmp	r3, #15
 8002e72:	d80a      	bhi.n	8002e8a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002e74:	2200      	movs	r2, #0
 8002e76:	6879      	ldr	r1, [r7, #4]
 8002e78:	f04f 30ff 	mov.w	r0, #4294967295
 8002e7c:	f000 fddb 	bl	8003a36 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002e80:	4a06      	ldr	r2, [pc, #24]	@ (8002e9c <HAL_InitTick+0x5c>)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002e86:	2300      	movs	r3, #0
 8002e88:	e000      	b.n	8002e8c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002e8a:	2301      	movs	r3, #1
}
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	3708      	adds	r7, #8
 8002e90:	46bd      	mov	sp, r7
 8002e92:	bd80      	pop	{r7, pc}
 8002e94:	20000028 	.word	0x20000028
 8002e98:	20000030 	.word	0x20000030
 8002e9c:	2000002c 	.word	0x2000002c

08002ea0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002ea0:	b480      	push	{r7}
 8002ea2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002ea4:	4b06      	ldr	r3, [pc, #24]	@ (8002ec0 <HAL_IncTick+0x20>)
 8002ea6:	781b      	ldrb	r3, [r3, #0]
 8002ea8:	461a      	mov	r2, r3
 8002eaa:	4b06      	ldr	r3, [pc, #24]	@ (8002ec4 <HAL_IncTick+0x24>)
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	4413      	add	r3, r2
 8002eb0:	4a04      	ldr	r2, [pc, #16]	@ (8002ec4 <HAL_IncTick+0x24>)
 8002eb2:	6013      	str	r3, [r2, #0]
}
 8002eb4:	bf00      	nop
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ebc:	4770      	bx	lr
 8002ebe:	bf00      	nop
 8002ec0:	20000030 	.word	0x20000030
 8002ec4:	200006f0 	.word	0x200006f0

08002ec8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002ec8:	b480      	push	{r7}
 8002eca:	af00      	add	r7, sp, #0
  return uwTick;
 8002ecc:	4b03      	ldr	r3, [pc, #12]	@ (8002edc <HAL_GetTick+0x14>)
 8002ece:	681b      	ldr	r3, [r3, #0]
}
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed8:	4770      	bx	lr
 8002eda:	bf00      	nop
 8002edc:	200006f0 	.word	0x200006f0

08002ee0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	b084      	sub	sp, #16
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002ee8:	f7ff ffee 	bl	8002ec8 <HAL_GetTick>
 8002eec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ef8:	d005      	beq.n	8002f06 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002efa:	4b0a      	ldr	r3, [pc, #40]	@ (8002f24 <HAL_Delay+0x44>)
 8002efc:	781b      	ldrb	r3, [r3, #0]
 8002efe:	461a      	mov	r2, r3
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	4413      	add	r3, r2
 8002f04:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002f06:	bf00      	nop
 8002f08:	f7ff ffde 	bl	8002ec8 <HAL_GetTick>
 8002f0c:	4602      	mov	r2, r0
 8002f0e:	68bb      	ldr	r3, [r7, #8]
 8002f10:	1ad3      	subs	r3, r2, r3
 8002f12:	68fa      	ldr	r2, [r7, #12]
 8002f14:	429a      	cmp	r2, r3
 8002f16:	d8f7      	bhi.n	8002f08 <HAL_Delay+0x28>
  {
  }
}
 8002f18:	bf00      	nop
 8002f1a:	bf00      	nop
 8002f1c:	3710      	adds	r7, #16
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	bd80      	pop	{r7, pc}
 8002f22:	bf00      	nop
 8002f24:	20000030 	.word	0x20000030

08002f28 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b084      	sub	sp, #16
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002f30:	2300      	movs	r3, #0
 8002f32:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d101      	bne.n	8002f3e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002f3a:	2301      	movs	r3, #1
 8002f3c:	e031      	b.n	8002fa2 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d109      	bne.n	8002f5a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002f46:	6878      	ldr	r0, [r7, #4]
 8002f48:	f7ff fd36 	bl	80029b8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2200      	movs	r2, #0
 8002f50:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	2200      	movs	r2, #0
 8002f56:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f5e:	f003 0310 	and.w	r3, r3, #16
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d116      	bne.n	8002f94 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002f6a:	4b10      	ldr	r3, [pc, #64]	@ (8002fac <HAL_ADC_Init+0x84>)
 8002f6c:	4013      	ands	r3, r2
 8002f6e:	f043 0202 	orr.w	r2, r3, #2
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002f76:	6878      	ldr	r0, [r7, #4]
 8002f78:	f000 fb7e 	bl	8003678 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	2200      	movs	r2, #0
 8002f80:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f86:	f023 0303 	bic.w	r3, r3, #3
 8002f8a:	f043 0201 	orr.w	r2, r3, #1
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	641a      	str	r2, [r3, #64]	@ 0x40
 8002f92:	e001      	b.n	8002f98 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002f94:	2301      	movs	r3, #1
 8002f96:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002fa0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	3710      	adds	r7, #16
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	bd80      	pop	{r7, pc}
 8002faa:	bf00      	nop
 8002fac:	ffffeefd 	.word	0xffffeefd

08002fb0 <HAL_ADC_Start_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8002fb0:	b480      	push	{r7}
 8002fb2:	b085      	sub	sp, #20
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 8002fb8:	2300      	movs	r3, #0
 8002fba:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002fc2:	2b01      	cmp	r3, #1
 8002fc4:	d101      	bne.n	8002fca <HAL_ADC_Start_IT+0x1a>
 8002fc6:	2302      	movs	r3, #2
 8002fc8:	e0b5      	b.n	8003136 <HAL_ADC_Start_IT+0x186>
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	2201      	movs	r2, #1
 8002fce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	689b      	ldr	r3, [r3, #8]
 8002fd8:	f003 0301 	and.w	r3, r3, #1
 8002fdc:	2b01      	cmp	r3, #1
 8002fde:	d018      	beq.n	8003012 <HAL_ADC_Start_IT+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	689a      	ldr	r2, [r3, #8]
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f042 0201 	orr.w	r2, r2, #1
 8002fee:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8002ff0:	4b54      	ldr	r3, [pc, #336]	@ (8003144 <HAL_ADC_Start_IT+0x194>)
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	4a54      	ldr	r2, [pc, #336]	@ (8003148 <HAL_ADC_Start_IT+0x198>)
 8002ff6:	fba2 2303 	umull	r2, r3, r2, r3
 8002ffa:	0c9a      	lsrs	r2, r3, #18
 8002ffc:	4613      	mov	r3, r2
 8002ffe:	005b      	lsls	r3, r3, #1
 8003000:	4413      	add	r3, r2
 8003002:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8003004:	e002      	b.n	800300c <HAL_ADC_Start_IT+0x5c>
    {
      counter--;
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	3b01      	subs	r3, #1
 800300a:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	2b00      	cmp	r3, #0
 8003010:	d1f9      	bne.n	8003006 <HAL_ADC_Start_IT+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	689b      	ldr	r3, [r3, #8]
 8003018:	f003 0301 	and.w	r3, r3, #1
 800301c:	2b01      	cmp	r3, #1
 800301e:	d17d      	bne.n	800311c <HAL_ADC_Start_IT+0x16c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003024:	4b49      	ldr	r3, [pc, #292]	@ (800314c <HAL_ADC_Start_IT+0x19c>)
 8003026:	4013      	ands	r3, r2
 8003028:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	685b      	ldr	r3, [r3, #4]
 8003036:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800303a:	2b00      	cmp	r3, #0
 800303c:	d007      	beq.n	800304e <HAL_ADC_Start_IT+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003042:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8003046:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003052:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003056:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800305a:	d106      	bne.n	800306a <HAL_ADC_Start_IT+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003060:	f023 0206 	bic.w	r2, r3, #6
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	645a      	str	r2, [r3, #68]	@ 0x44
 8003068:	e002      	b.n	8003070 <HAL_ADC_Start_IT+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	2200      	movs	r2, #0
 800306e:	645a      	str	r2, [r3, #68]	@ 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2200      	movs	r2, #0
 8003074:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8003080:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	6859      	ldr	r1, [r3, #4]
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681a      	ldr	r2, [r3, #0]
 800308c:	4b30      	ldr	r3, [pc, #192]	@ (8003150 <HAL_ADC_Start_IT+0x1a0>)
 800308e:	430b      	orrs	r3, r1
 8003090:	6053      	str	r3, [r2, #4]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8003092:	4b30      	ldr	r3, [pc, #192]	@ (8003154 <HAL_ADC_Start_IT+0x1a4>)
 8003094:	685b      	ldr	r3, [r3, #4]
 8003096:	f003 031f 	and.w	r3, r3, #31
 800309a:	2b00      	cmp	r3, #0
 800309c:	d10f      	bne.n	80030be <HAL_ADC_Start_IT+0x10e>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	689b      	ldr	r3, [r3, #8]
 80030a4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d143      	bne.n	8003134 <HAL_ADC_Start_IT+0x184>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	689a      	ldr	r2, [r3, #8]
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80030ba:	609a      	str	r2, [r3, #8]
 80030bc:	e03a      	b.n	8003134 <HAL_ADC_Start_IT+0x184>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	4a25      	ldr	r2, [pc, #148]	@ (8003158 <HAL_ADC_Start_IT+0x1a8>)
 80030c4:	4293      	cmp	r3, r2
 80030c6:	d10e      	bne.n	80030e6 <HAL_ADC_Start_IT+0x136>
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	689b      	ldr	r3, [r3, #8]
 80030ce:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d107      	bne.n	80030e6 <HAL_ADC_Start_IT+0x136>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	689a      	ldr	r2, [r3, #8]
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80030e4:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 80030e6:	4b1b      	ldr	r3, [pc, #108]	@ (8003154 <HAL_ADC_Start_IT+0x1a4>)
 80030e8:	685b      	ldr	r3, [r3, #4]
 80030ea:	f003 0310 	and.w	r3, r3, #16
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d120      	bne.n	8003134 <HAL_ADC_Start_IT+0x184>
      {
        /* if instance of handle correspond to ADC3 and  no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	4a19      	ldr	r2, [pc, #100]	@ (800315c <HAL_ADC_Start_IT+0x1ac>)
 80030f8:	4293      	cmp	r3, r2
 80030fa:	d11b      	bne.n	8003134 <HAL_ADC_Start_IT+0x184>
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	689b      	ldr	r3, [r3, #8]
 8003102:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003106:	2b00      	cmp	r3, #0
 8003108:	d114      	bne.n	8003134 <HAL_ADC_Start_IT+0x184>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	689a      	ldr	r2, [r3, #8]
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8003118:	609a      	str	r2, [r3, #8]
 800311a:	e00b      	b.n	8003134 <HAL_ADC_Start_IT+0x184>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003120:	f043 0210 	orr.w	r2, r3, #16
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800312c:	f043 0201 	orr.w	r2, r3, #1
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	645a      	str	r2, [r3, #68]	@ 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8003134:	2300      	movs	r3, #0
}
 8003136:	4618      	mov	r0, r3
 8003138:	3714      	adds	r7, #20
 800313a:	46bd      	mov	sp, r7
 800313c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003140:	4770      	bx	lr
 8003142:	bf00      	nop
 8003144:	20000028 	.word	0x20000028
 8003148:	431bde83 	.word	0x431bde83
 800314c:	fffff8fe 	.word	0xfffff8fe
 8003150:	04000020 	.word	0x04000020
 8003154:	40012300 	.word	0x40012300
 8003158:	40012000 	.word	0x40012000
 800315c:	40012200 	.word	0x40012200

08003160 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8003160:	b580      	push	{r7, lr}
 8003162:	b086      	sub	sp, #24
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0, tmp2 = 0;
 8003168:	2300      	movs	r3, #0
 800316a:	617b      	str	r3, [r7, #20]
 800316c:	2300      	movs	r3, #0
 800316e:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	685b      	ldr	r3, [r3, #4]
 800317e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	f003 0302 	and.w	r3, r3, #2
 8003186:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8003188:	68bb      	ldr	r3, [r7, #8]
 800318a:	f003 0320 	and.w	r3, r3, #32
 800318e:	613b      	str	r3, [r7, #16]

  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8003190:	697b      	ldr	r3, [r7, #20]
 8003192:	2b00      	cmp	r3, #0
 8003194:	d049      	beq.n	800322a <HAL_ADC_IRQHandler+0xca>
 8003196:	693b      	ldr	r3, [r7, #16]
 8003198:	2b00      	cmp	r3, #0
 800319a:	d046      	beq.n	800322a <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031a0:	f003 0310 	and.w	r3, r3, #16
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d105      	bne.n	80031b4 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031ac:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	689b      	ldr	r3, [r3, #8]
 80031ba:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d12b      	bne.n	800321a <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d127      	bne.n	800321a <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031d0:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d006      	beq.n	80031e6 <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	689b      	ldr	r3, [r3, #8]
 80031de:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d119      	bne.n	800321a <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	685a      	ldr	r2, [r3, #4]
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f022 0220 	bic.w	r2, r2, #32
 80031f4:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031fa:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	641a      	str	r2, [r3, #64]	@ 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003206:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800320a:	2b00      	cmp	r3, #0
 800320c:	d105      	bne.n	800321a <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003212:	f043 0201 	orr.w	r2, r3, #1
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800321a:	6878      	ldr	r0, [r7, #4]
 800321c:	f7fe fa6c 	bl	80016f8 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f06f 0212 	mvn.w	r2, #18
 8003228:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	f003 0304 	and.w	r3, r3, #4
 8003230:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8003232:	68bb      	ldr	r3, [r7, #8]
 8003234:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003238:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 800323a:	697b      	ldr	r3, [r7, #20]
 800323c:	2b00      	cmp	r3, #0
 800323e:	d057      	beq.n	80032f0 <HAL_ADC_IRQHandler+0x190>
 8003240:	693b      	ldr	r3, [r7, #16]
 8003242:	2b00      	cmp	r3, #0
 8003244:	d054      	beq.n	80032f0 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800324a:	f003 0310 	and.w	r3, r3, #16
 800324e:	2b00      	cmp	r3, #0
 8003250:	d105      	bne.n	800325e <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003256:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	689b      	ldr	r3, [r3, #8]
 8003264:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8003268:	2b00      	cmp	r3, #0
 800326a:	d139      	bne.n	80032e0 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003272:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8003276:	2b00      	cmp	r3, #0
 8003278:	d006      	beq.n	8003288 <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	689b      	ldr	r3, [r3, #8]
 8003280:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 8003284:	2b00      	cmp	r3, #0
 8003286:	d12b      	bne.n	80032e0 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	685b      	ldr	r3, [r3, #4]
 800328e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8003292:	2b00      	cmp	r3, #0
 8003294:	d124      	bne.n	80032e0 <HAL_ADC_IRQHandler+0x180>
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	689b      	ldr	r3, [r3, #8]
 800329c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d11d      	bne.n	80032e0 <HAL_ADC_IRQHandler+0x180>
       (hadc->Init.ContinuousConvMode == DISABLE))))
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	699b      	ldr	r3, [r3, #24]
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d119      	bne.n	80032e0 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	685a      	ldr	r2, [r3, #4]
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80032ba:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032c0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d105      	bne.n	80032e0 <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032d8:	f043 0201 	orr.w	r2, r3, #1
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80032e0:	6878      	ldr	r0, [r7, #4]
 80032e2:	f000 fac3 	bl	800386c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f06f 020c 	mvn.w	r2, #12
 80032ee:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	f003 0301 	and.w	r3, r3, #1
 80032f6:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 80032f8:	68bb      	ldr	r3, [r7, #8]
 80032fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80032fe:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8003300:	697b      	ldr	r3, [r7, #20]
 8003302:	2b00      	cmp	r3, #0
 8003304:	d017      	beq.n	8003336 <HAL_ADC_IRQHandler+0x1d6>
 8003306:	693b      	ldr	r3, [r7, #16]
 8003308:	2b00      	cmp	r3, #0
 800330a:	d014      	beq.n	8003336 <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f003 0301 	and.w	r3, r3, #1
 8003316:	2b01      	cmp	r3, #1
 8003318:	d10d      	bne.n	8003336 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800331e:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	641a      	str	r2, [r3, #64]	@ 0x40
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8003326:	6878      	ldr	r0, [r7, #4]
 8003328:	f000 f837 	bl	800339a <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f06f 0201 	mvn.w	r2, #1
 8003334:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	f003 0320 	and.w	r3, r3, #32
 800333c:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 800333e:	68bb      	ldr	r3, [r7, #8]
 8003340:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003344:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8003346:	697b      	ldr	r3, [r7, #20]
 8003348:	2b00      	cmp	r3, #0
 800334a:	d015      	beq.n	8003378 <HAL_ADC_IRQHandler+0x218>
 800334c:	693b      	ldr	r3, [r7, #16]
 800334e:	2b00      	cmp	r3, #0
 8003350:	d012      	beq.n	8003378 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F7, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003356:	f043 0202 	orr.w	r2, r3, #2
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f06f 0220 	mvn.w	r2, #32
 8003366:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8003368:	6878      	ldr	r0, [r7, #4]
 800336a:	f000 f820 	bl	80033ae <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f06f 0220 	mvn.w	r2, #32
 8003376:	601a      	str	r2, [r3, #0]
  }
}
 8003378:	bf00      	nop
 800337a:	3718      	adds	r7, #24
 800337c:	46bd      	mov	sp, r7
 800337e:	bd80      	pop	{r7, pc}

08003380 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8003380:	b480      	push	{r7}
 8003382:	b083      	sub	sp, #12
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 800338e:	4618      	mov	r0, r3
 8003390:	370c      	adds	r7, #12
 8003392:	46bd      	mov	sp, r7
 8003394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003398:	4770      	bx	lr

0800339a <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 800339a:	b480      	push	{r7}
 800339c:	b083      	sub	sp, #12
 800339e:	af00      	add	r7, sp, #0
 80033a0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 80033a2:	bf00      	nop
 80033a4:	370c      	adds	r7, #12
 80033a6:	46bd      	mov	sp, r7
 80033a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ac:	4770      	bx	lr

080033ae <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80033ae:	b480      	push	{r7}
 80033b0:	b083      	sub	sp, #12
 80033b2:	af00      	add	r7, sp, #0
 80033b4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80033b6:	bf00      	nop
 80033b8:	370c      	adds	r7, #12
 80033ba:	46bd      	mov	sp, r7
 80033bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c0:	4770      	bx	lr
	...

080033c4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80033c4:	b480      	push	{r7}
 80033c6:	b085      	sub	sp, #20
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
 80033cc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 80033ce:	2300      	movs	r3, #0
 80033d0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80033d8:	2b01      	cmp	r3, #1
 80033da:	d101      	bne.n	80033e0 <HAL_ADC_ConfigChannel+0x1c>
 80033dc:	2302      	movs	r3, #2
 80033de:	e13a      	b.n	8003656 <HAL_ADC_ConfigChannel+0x292>
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2201      	movs	r2, #1
 80033e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 80033e8:	683b      	ldr	r3, [r7, #0]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	2b09      	cmp	r3, #9
 80033ee:	d93a      	bls.n	8003466 <HAL_ADC_ConfigChannel+0xa2>
 80033f0:	683b      	ldr	r3, [r7, #0]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80033f8:	d035      	beq.n	8003466 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	68d9      	ldr	r1, [r3, #12]
 8003400:	683b      	ldr	r3, [r7, #0]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	b29b      	uxth	r3, r3
 8003406:	461a      	mov	r2, r3
 8003408:	4613      	mov	r3, r2
 800340a:	005b      	lsls	r3, r3, #1
 800340c:	4413      	add	r3, r2
 800340e:	3b1e      	subs	r3, #30
 8003410:	2207      	movs	r2, #7
 8003412:	fa02 f303 	lsl.w	r3, r2, r3
 8003416:	43da      	mvns	r2, r3
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	400a      	ands	r2, r1
 800341e:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003420:	683b      	ldr	r3, [r7, #0]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	4a8f      	ldr	r2, [pc, #572]	@ (8003664 <HAL_ADC_ConfigChannel+0x2a0>)
 8003426:	4293      	cmp	r3, r2
 8003428:	d10a      	bne.n	8003440 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	68d9      	ldr	r1, [r3, #12]
 8003430:	683b      	ldr	r3, [r7, #0]
 8003432:	689b      	ldr	r3, [r3, #8]
 8003434:	061a      	lsls	r2, r3, #24
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	430a      	orrs	r2, r1
 800343c:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800343e:	e039      	b.n	80034b4 <HAL_ADC_ConfigChannel+0xf0>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	68d9      	ldr	r1, [r3, #12]
 8003446:	683b      	ldr	r3, [r7, #0]
 8003448:	689a      	ldr	r2, [r3, #8]
 800344a:	683b      	ldr	r3, [r7, #0]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	b29b      	uxth	r3, r3
 8003450:	4618      	mov	r0, r3
 8003452:	4603      	mov	r3, r0
 8003454:	005b      	lsls	r3, r3, #1
 8003456:	4403      	add	r3, r0
 8003458:	3b1e      	subs	r3, #30
 800345a:	409a      	lsls	r2, r3
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	430a      	orrs	r2, r1
 8003462:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003464:	e026      	b.n	80034b4 <HAL_ADC_ConfigChannel+0xf0>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	6919      	ldr	r1, [r3, #16]
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	b29b      	uxth	r3, r3
 8003472:	461a      	mov	r2, r3
 8003474:	4613      	mov	r3, r2
 8003476:	005b      	lsls	r3, r3, #1
 8003478:	4413      	add	r3, r2
 800347a:	f003 031f 	and.w	r3, r3, #31
 800347e:	2207      	movs	r2, #7
 8003480:	fa02 f303 	lsl.w	r3, r2, r3
 8003484:	43da      	mvns	r2, r3
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	400a      	ands	r2, r1
 800348c:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	6919      	ldr	r1, [r3, #16]
 8003494:	683b      	ldr	r3, [r7, #0]
 8003496:	689a      	ldr	r2, [r3, #8]
 8003498:	683b      	ldr	r3, [r7, #0]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	b29b      	uxth	r3, r3
 800349e:	4618      	mov	r0, r3
 80034a0:	4603      	mov	r3, r0
 80034a2:	005b      	lsls	r3, r3, #1
 80034a4:	4403      	add	r3, r0
 80034a6:	f003 031f 	and.w	r3, r3, #31
 80034aa:	409a      	lsls	r2, r3
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	430a      	orrs	r2, r1
 80034b2:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 80034b4:	683b      	ldr	r3, [r7, #0]
 80034b6:	685b      	ldr	r3, [r3, #4]
 80034b8:	2b06      	cmp	r3, #6
 80034ba:	d824      	bhi.n	8003506 <HAL_ADC_ConfigChannel+0x142>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80034c2:	683b      	ldr	r3, [r7, #0]
 80034c4:	685a      	ldr	r2, [r3, #4]
 80034c6:	4613      	mov	r3, r2
 80034c8:	009b      	lsls	r3, r3, #2
 80034ca:	4413      	add	r3, r2
 80034cc:	3b05      	subs	r3, #5
 80034ce:	221f      	movs	r2, #31
 80034d0:	fa02 f303 	lsl.w	r3, r2, r3
 80034d4:	43da      	mvns	r2, r3
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	400a      	ands	r2, r1
 80034dc:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80034e4:	683b      	ldr	r3, [r7, #0]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	b29b      	uxth	r3, r3
 80034ea:	4618      	mov	r0, r3
 80034ec:	683b      	ldr	r3, [r7, #0]
 80034ee:	685a      	ldr	r2, [r3, #4]
 80034f0:	4613      	mov	r3, r2
 80034f2:	009b      	lsls	r3, r3, #2
 80034f4:	4413      	add	r3, r2
 80034f6:	3b05      	subs	r3, #5
 80034f8:	fa00 f203 	lsl.w	r2, r0, r3
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	430a      	orrs	r2, r1
 8003502:	635a      	str	r2, [r3, #52]	@ 0x34
 8003504:	e04c      	b.n	80035a0 <HAL_ADC_ConfigChannel+0x1dc>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8003506:	683b      	ldr	r3, [r7, #0]
 8003508:	685b      	ldr	r3, [r3, #4]
 800350a:	2b0c      	cmp	r3, #12
 800350c:	d824      	bhi.n	8003558 <HAL_ADC_ConfigChannel+0x194>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003514:	683b      	ldr	r3, [r7, #0]
 8003516:	685a      	ldr	r2, [r3, #4]
 8003518:	4613      	mov	r3, r2
 800351a:	009b      	lsls	r3, r3, #2
 800351c:	4413      	add	r3, r2
 800351e:	3b23      	subs	r3, #35	@ 0x23
 8003520:	221f      	movs	r2, #31
 8003522:	fa02 f303 	lsl.w	r3, r2, r3
 8003526:	43da      	mvns	r2, r3
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	400a      	ands	r2, r1
 800352e:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003536:	683b      	ldr	r3, [r7, #0]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	b29b      	uxth	r3, r3
 800353c:	4618      	mov	r0, r3
 800353e:	683b      	ldr	r3, [r7, #0]
 8003540:	685a      	ldr	r2, [r3, #4]
 8003542:	4613      	mov	r3, r2
 8003544:	009b      	lsls	r3, r3, #2
 8003546:	4413      	add	r3, r2
 8003548:	3b23      	subs	r3, #35	@ 0x23
 800354a:	fa00 f203 	lsl.w	r2, r0, r3
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	430a      	orrs	r2, r1
 8003554:	631a      	str	r2, [r3, #48]	@ 0x30
 8003556:	e023      	b.n	80035a0 <HAL_ADC_ConfigChannel+0x1dc>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800355e:	683b      	ldr	r3, [r7, #0]
 8003560:	685a      	ldr	r2, [r3, #4]
 8003562:	4613      	mov	r3, r2
 8003564:	009b      	lsls	r3, r3, #2
 8003566:	4413      	add	r3, r2
 8003568:	3b41      	subs	r3, #65	@ 0x41
 800356a:	221f      	movs	r2, #31
 800356c:	fa02 f303 	lsl.w	r3, r2, r3
 8003570:	43da      	mvns	r2, r3
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	400a      	ands	r2, r1
 8003578:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003580:	683b      	ldr	r3, [r7, #0]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	b29b      	uxth	r3, r3
 8003586:	4618      	mov	r0, r3
 8003588:	683b      	ldr	r3, [r7, #0]
 800358a:	685a      	ldr	r2, [r3, #4]
 800358c:	4613      	mov	r3, r2
 800358e:	009b      	lsls	r3, r3, #2
 8003590:	4413      	add	r3, r2
 8003592:	3b41      	subs	r3, #65	@ 0x41
 8003594:	fa00 f203 	lsl.w	r2, r0, r3
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	430a      	orrs	r2, r1
 800359e:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	4a30      	ldr	r2, [pc, #192]	@ (8003668 <HAL_ADC_ConfigChannel+0x2a4>)
 80035a6:	4293      	cmp	r3, r2
 80035a8:	d10a      	bne.n	80035c0 <HAL_ADC_ConfigChannel+0x1fc>
 80035aa:	683b      	ldr	r3, [r7, #0]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80035b2:	d105      	bne.n	80035c0 <HAL_ADC_ConfigChannel+0x1fc>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 80035b4:	4b2d      	ldr	r3, [pc, #180]	@ (800366c <HAL_ADC_ConfigChannel+0x2a8>)
 80035b6:	685b      	ldr	r3, [r3, #4]
 80035b8:	4a2c      	ldr	r2, [pc, #176]	@ (800366c <HAL_ADC_ConfigChannel+0x2a8>)
 80035ba:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 80035be:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	4a28      	ldr	r2, [pc, #160]	@ (8003668 <HAL_ADC_ConfigChannel+0x2a4>)
 80035c6:	4293      	cmp	r3, r2
 80035c8:	d10f      	bne.n	80035ea <HAL_ADC_ConfigChannel+0x226>
 80035ca:	683b      	ldr	r3, [r7, #0]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	2b12      	cmp	r3, #18
 80035d0:	d10b      	bne.n	80035ea <HAL_ADC_ConfigChannel+0x226>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 80035d2:	4b26      	ldr	r3, [pc, #152]	@ (800366c <HAL_ADC_ConfigChannel+0x2a8>)
 80035d4:	685b      	ldr	r3, [r3, #4]
 80035d6:	4a25      	ldr	r2, [pc, #148]	@ (800366c <HAL_ADC_ConfigChannel+0x2a8>)
 80035d8:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 80035dc:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 80035de:	4b23      	ldr	r3, [pc, #140]	@ (800366c <HAL_ADC_ConfigChannel+0x2a8>)
 80035e0:	685b      	ldr	r3, [r3, #4]
 80035e2:	4a22      	ldr	r2, [pc, #136]	@ (800366c <HAL_ADC_ConfigChannel+0x2a8>)
 80035e4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80035e8:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	4a1e      	ldr	r2, [pc, #120]	@ (8003668 <HAL_ADC_ConfigChannel+0x2a4>)
 80035f0:	4293      	cmp	r3, r2
 80035f2:	d12b      	bne.n	800364c <HAL_ADC_ConfigChannel+0x288>
 80035f4:	683b      	ldr	r3, [r7, #0]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	4a1a      	ldr	r2, [pc, #104]	@ (8003664 <HAL_ADC_ConfigChannel+0x2a0>)
 80035fa:	4293      	cmp	r3, r2
 80035fc:	d003      	beq.n	8003606 <HAL_ADC_ConfigChannel+0x242>
 80035fe:	683b      	ldr	r3, [r7, #0]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	2b11      	cmp	r3, #17
 8003604:	d122      	bne.n	800364c <HAL_ADC_ConfigChannel+0x288>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8003606:	4b19      	ldr	r3, [pc, #100]	@ (800366c <HAL_ADC_ConfigChannel+0x2a8>)
 8003608:	685b      	ldr	r3, [r3, #4]
 800360a:	4a18      	ldr	r2, [pc, #96]	@ (800366c <HAL_ADC_ConfigChannel+0x2a8>)
 800360c:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8003610:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8003612:	4b16      	ldr	r3, [pc, #88]	@ (800366c <HAL_ADC_ConfigChannel+0x2a8>)
 8003614:	685b      	ldr	r3, [r3, #4]
 8003616:	4a15      	ldr	r2, [pc, #84]	@ (800366c <HAL_ADC_ConfigChannel+0x2a8>)
 8003618:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800361c:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800361e:	683b      	ldr	r3, [r7, #0]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	4a10      	ldr	r2, [pc, #64]	@ (8003664 <HAL_ADC_ConfigChannel+0x2a0>)
 8003624:	4293      	cmp	r3, r2
 8003626:	d111      	bne.n	800364c <HAL_ADC_ConfigChannel+0x288>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8003628:	4b11      	ldr	r3, [pc, #68]	@ (8003670 <HAL_ADC_ConfigChannel+0x2ac>)
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	4a11      	ldr	r2, [pc, #68]	@ (8003674 <HAL_ADC_ConfigChannel+0x2b0>)
 800362e:	fba2 2303 	umull	r2, r3, r2, r3
 8003632:	0c9a      	lsrs	r2, r3, #18
 8003634:	4613      	mov	r3, r2
 8003636:	009b      	lsls	r3, r3, #2
 8003638:	4413      	add	r3, r2
 800363a:	005b      	lsls	r3, r3, #1
 800363c:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800363e:	e002      	b.n	8003646 <HAL_ADC_ConfigChannel+0x282>
      {
        counter--;
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	3b01      	subs	r3, #1
 8003644:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	2b00      	cmp	r3, #0
 800364a:	d1f9      	bne.n	8003640 <HAL_ADC_ConfigChannel+0x27c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2200      	movs	r2, #0
 8003650:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003654:	2300      	movs	r3, #0
}
 8003656:	4618      	mov	r0, r3
 8003658:	3714      	adds	r7, #20
 800365a:	46bd      	mov	sp, r7
 800365c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003660:	4770      	bx	lr
 8003662:	bf00      	nop
 8003664:	10000012 	.word	0x10000012
 8003668:	40012000 	.word	0x40012000
 800366c:	40012300 	.word	0x40012300
 8003670:	20000028 	.word	0x20000028
 8003674:	431bde83 	.word	0x431bde83

08003678 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003678:	b480      	push	{r7}
 800367a:	b083      	sub	sp, #12
 800367c:	af00      	add	r7, sp, #0
 800367e:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8003680:	4b78      	ldr	r3, [pc, #480]	@ (8003864 <ADC_Init+0x1ec>)
 8003682:	685b      	ldr	r3, [r3, #4]
 8003684:	4a77      	ldr	r2, [pc, #476]	@ (8003864 <ADC_Init+0x1ec>)
 8003686:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 800368a:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 800368c:	4b75      	ldr	r3, [pc, #468]	@ (8003864 <ADC_Init+0x1ec>)
 800368e:	685a      	ldr	r2, [r3, #4]
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	685b      	ldr	r3, [r3, #4]
 8003694:	4973      	ldr	r1, [pc, #460]	@ (8003864 <ADC_Init+0x1ec>)
 8003696:	4313      	orrs	r3, r2
 8003698:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	685a      	ldr	r2, [r3, #4]
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80036a8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	6859      	ldr	r1, [r3, #4]
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	691b      	ldr	r3, [r3, #16]
 80036b4:	021a      	lsls	r2, r3, #8
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	430a      	orrs	r2, r1
 80036bc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	685a      	ldr	r2, [r3, #4]
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80036cc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	6859      	ldr	r1, [r3, #4]
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	689a      	ldr	r2, [r3, #8]
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	430a      	orrs	r2, r1
 80036de:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	689a      	ldr	r2, [r3, #8]
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80036ee:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	6899      	ldr	r1, [r3, #8]
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	68da      	ldr	r2, [r3, #12]
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	430a      	orrs	r2, r1
 8003700:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003706:	4a58      	ldr	r2, [pc, #352]	@ (8003868 <ADC_Init+0x1f0>)
 8003708:	4293      	cmp	r3, r2
 800370a:	d022      	beq.n	8003752 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	689a      	ldr	r2, [r3, #8]
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800371a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	6899      	ldr	r1, [r3, #8]
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	430a      	orrs	r2, r1
 800372c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	689a      	ldr	r2, [r3, #8]
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800373c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	6899      	ldr	r1, [r3, #8]
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	430a      	orrs	r2, r1
 800374e:	609a      	str	r2, [r3, #8]
 8003750:	e00f      	b.n	8003772 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	689a      	ldr	r2, [r3, #8]
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003760:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	689a      	ldr	r2, [r3, #8]
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003770:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	689a      	ldr	r2, [r3, #8]
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f022 0202 	bic.w	r2, r2, #2
 8003780:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	6899      	ldr	r1, [r3, #8]
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	699b      	ldr	r3, [r3, #24]
 800378c:	005a      	lsls	r2, r3, #1
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	430a      	orrs	r2, r1
 8003794:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	f893 3020 	ldrb.w	r3, [r3, #32]
 800379c:	2b00      	cmp	r3, #0
 800379e:	d01b      	beq.n	80037d8 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	685a      	ldr	r2, [r3, #4]
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80037ae:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	685a      	ldr	r2, [r3, #4]
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80037be:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	6859      	ldr	r1, [r3, #4]
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037ca:	3b01      	subs	r3, #1
 80037cc:	035a      	lsls	r2, r3, #13
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	430a      	orrs	r2, r1
 80037d4:	605a      	str	r2, [r3, #4]
 80037d6:	e007      	b.n	80037e8 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	685a      	ldr	r2, [r3, #4]
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80037e6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80037f6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	69db      	ldr	r3, [r3, #28]
 8003802:	3b01      	subs	r3, #1
 8003804:	051a      	lsls	r2, r3, #20
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	430a      	orrs	r2, r1
 800380c:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	689a      	ldr	r2, [r3, #8]
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800381c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	6899      	ldr	r1, [r3, #8]
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800382a:	025a      	lsls	r2, r3, #9
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	430a      	orrs	r2, r1
 8003832:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	689a      	ldr	r2, [r3, #8]
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003842:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	6899      	ldr	r1, [r3, #8]
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	695b      	ldr	r3, [r3, #20]
 800384e:	029a      	lsls	r2, r3, #10
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	430a      	orrs	r2, r1
 8003856:	609a      	str	r2, [r3, #8]
}
 8003858:	bf00      	nop
 800385a:	370c      	adds	r7, #12
 800385c:	46bd      	mov	sp, r7
 800385e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003862:	4770      	bx	lr
 8003864:	40012300 	.word	0x40012300
 8003868:	0f000001 	.word	0x0f000001

0800386c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800386c:	b480      	push	{r7}
 800386e:	b083      	sub	sp, #12
 8003870:	af00      	add	r7, sp, #0
 8003872:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8003874:	bf00      	nop
 8003876:	370c      	adds	r7, #12
 8003878:	46bd      	mov	sp, r7
 800387a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387e:	4770      	bx	lr

08003880 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003880:	b480      	push	{r7}
 8003882:	b085      	sub	sp, #20
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	f003 0307 	and.w	r3, r3, #7
 800388e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003890:	4b0b      	ldr	r3, [pc, #44]	@ (80038c0 <__NVIC_SetPriorityGrouping+0x40>)
 8003892:	68db      	ldr	r3, [r3, #12]
 8003894:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003896:	68ba      	ldr	r2, [r7, #8]
 8003898:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800389c:	4013      	ands	r3, r2
 800389e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80038a4:	68bb      	ldr	r3, [r7, #8]
 80038a6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80038a8:	4b06      	ldr	r3, [pc, #24]	@ (80038c4 <__NVIC_SetPriorityGrouping+0x44>)
 80038aa:	4313      	orrs	r3, r2
 80038ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80038ae:	4a04      	ldr	r2, [pc, #16]	@ (80038c0 <__NVIC_SetPriorityGrouping+0x40>)
 80038b0:	68bb      	ldr	r3, [r7, #8]
 80038b2:	60d3      	str	r3, [r2, #12]
}
 80038b4:	bf00      	nop
 80038b6:	3714      	adds	r7, #20
 80038b8:	46bd      	mov	sp, r7
 80038ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038be:	4770      	bx	lr
 80038c0:	e000ed00 	.word	0xe000ed00
 80038c4:	05fa0000 	.word	0x05fa0000

080038c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80038c8:	b480      	push	{r7}
 80038ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80038cc:	4b04      	ldr	r3, [pc, #16]	@ (80038e0 <__NVIC_GetPriorityGrouping+0x18>)
 80038ce:	68db      	ldr	r3, [r3, #12]
 80038d0:	0a1b      	lsrs	r3, r3, #8
 80038d2:	f003 0307 	and.w	r3, r3, #7
}
 80038d6:	4618      	mov	r0, r3
 80038d8:	46bd      	mov	sp, r7
 80038da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038de:	4770      	bx	lr
 80038e0:	e000ed00 	.word	0xe000ed00

080038e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80038e4:	b480      	push	{r7}
 80038e6:	b083      	sub	sp, #12
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	4603      	mov	r3, r0
 80038ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80038ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	db0b      	blt.n	800390e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80038f6:	79fb      	ldrb	r3, [r7, #7]
 80038f8:	f003 021f 	and.w	r2, r3, #31
 80038fc:	4907      	ldr	r1, [pc, #28]	@ (800391c <__NVIC_EnableIRQ+0x38>)
 80038fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003902:	095b      	lsrs	r3, r3, #5
 8003904:	2001      	movs	r0, #1
 8003906:	fa00 f202 	lsl.w	r2, r0, r2
 800390a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800390e:	bf00      	nop
 8003910:	370c      	adds	r7, #12
 8003912:	46bd      	mov	sp, r7
 8003914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003918:	4770      	bx	lr
 800391a:	bf00      	nop
 800391c:	e000e100 	.word	0xe000e100

08003920 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003920:	b480      	push	{r7}
 8003922:	b083      	sub	sp, #12
 8003924:	af00      	add	r7, sp, #0
 8003926:	4603      	mov	r3, r0
 8003928:	6039      	str	r1, [r7, #0]
 800392a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800392c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003930:	2b00      	cmp	r3, #0
 8003932:	db0a      	blt.n	800394a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003934:	683b      	ldr	r3, [r7, #0]
 8003936:	b2da      	uxtb	r2, r3
 8003938:	490c      	ldr	r1, [pc, #48]	@ (800396c <__NVIC_SetPriority+0x4c>)
 800393a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800393e:	0112      	lsls	r2, r2, #4
 8003940:	b2d2      	uxtb	r2, r2
 8003942:	440b      	add	r3, r1
 8003944:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003948:	e00a      	b.n	8003960 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800394a:	683b      	ldr	r3, [r7, #0]
 800394c:	b2da      	uxtb	r2, r3
 800394e:	4908      	ldr	r1, [pc, #32]	@ (8003970 <__NVIC_SetPriority+0x50>)
 8003950:	79fb      	ldrb	r3, [r7, #7]
 8003952:	f003 030f 	and.w	r3, r3, #15
 8003956:	3b04      	subs	r3, #4
 8003958:	0112      	lsls	r2, r2, #4
 800395a:	b2d2      	uxtb	r2, r2
 800395c:	440b      	add	r3, r1
 800395e:	761a      	strb	r2, [r3, #24]
}
 8003960:	bf00      	nop
 8003962:	370c      	adds	r7, #12
 8003964:	46bd      	mov	sp, r7
 8003966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396a:	4770      	bx	lr
 800396c:	e000e100 	.word	0xe000e100
 8003970:	e000ed00 	.word	0xe000ed00

08003974 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003974:	b480      	push	{r7}
 8003976:	b089      	sub	sp, #36	@ 0x24
 8003978:	af00      	add	r7, sp, #0
 800397a:	60f8      	str	r0, [r7, #12]
 800397c:	60b9      	str	r1, [r7, #8]
 800397e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	f003 0307 	and.w	r3, r3, #7
 8003986:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003988:	69fb      	ldr	r3, [r7, #28]
 800398a:	f1c3 0307 	rsb	r3, r3, #7
 800398e:	2b04      	cmp	r3, #4
 8003990:	bf28      	it	cs
 8003992:	2304      	movcs	r3, #4
 8003994:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003996:	69fb      	ldr	r3, [r7, #28]
 8003998:	3304      	adds	r3, #4
 800399a:	2b06      	cmp	r3, #6
 800399c:	d902      	bls.n	80039a4 <NVIC_EncodePriority+0x30>
 800399e:	69fb      	ldr	r3, [r7, #28]
 80039a0:	3b03      	subs	r3, #3
 80039a2:	e000      	b.n	80039a6 <NVIC_EncodePriority+0x32>
 80039a4:	2300      	movs	r3, #0
 80039a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80039a8:	f04f 32ff 	mov.w	r2, #4294967295
 80039ac:	69bb      	ldr	r3, [r7, #24]
 80039ae:	fa02 f303 	lsl.w	r3, r2, r3
 80039b2:	43da      	mvns	r2, r3
 80039b4:	68bb      	ldr	r3, [r7, #8]
 80039b6:	401a      	ands	r2, r3
 80039b8:	697b      	ldr	r3, [r7, #20]
 80039ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80039bc:	f04f 31ff 	mov.w	r1, #4294967295
 80039c0:	697b      	ldr	r3, [r7, #20]
 80039c2:	fa01 f303 	lsl.w	r3, r1, r3
 80039c6:	43d9      	mvns	r1, r3
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80039cc:	4313      	orrs	r3, r2
         );
}
 80039ce:	4618      	mov	r0, r3
 80039d0:	3724      	adds	r7, #36	@ 0x24
 80039d2:	46bd      	mov	sp, r7
 80039d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d8:	4770      	bx	lr
	...

080039dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80039dc:	b580      	push	{r7, lr}
 80039de:	b082      	sub	sp, #8
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	3b01      	subs	r3, #1
 80039e8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80039ec:	d301      	bcc.n	80039f2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80039ee:	2301      	movs	r3, #1
 80039f0:	e00f      	b.n	8003a12 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80039f2:	4a0a      	ldr	r2, [pc, #40]	@ (8003a1c <SysTick_Config+0x40>)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	3b01      	subs	r3, #1
 80039f8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80039fa:	210f      	movs	r1, #15
 80039fc:	f04f 30ff 	mov.w	r0, #4294967295
 8003a00:	f7ff ff8e 	bl	8003920 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003a04:	4b05      	ldr	r3, [pc, #20]	@ (8003a1c <SysTick_Config+0x40>)
 8003a06:	2200      	movs	r2, #0
 8003a08:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003a0a:	4b04      	ldr	r3, [pc, #16]	@ (8003a1c <SysTick_Config+0x40>)
 8003a0c:	2207      	movs	r2, #7
 8003a0e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003a10:	2300      	movs	r3, #0
}
 8003a12:	4618      	mov	r0, r3
 8003a14:	3708      	adds	r7, #8
 8003a16:	46bd      	mov	sp, r7
 8003a18:	bd80      	pop	{r7, pc}
 8003a1a:	bf00      	nop
 8003a1c:	e000e010 	.word	0xe000e010

08003a20 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003a20:	b580      	push	{r7, lr}
 8003a22:	b082      	sub	sp, #8
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003a28:	6878      	ldr	r0, [r7, #4]
 8003a2a:	f7ff ff29 	bl	8003880 <__NVIC_SetPriorityGrouping>
}
 8003a2e:	bf00      	nop
 8003a30:	3708      	adds	r7, #8
 8003a32:	46bd      	mov	sp, r7
 8003a34:	bd80      	pop	{r7, pc}

08003a36 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003a36:	b580      	push	{r7, lr}
 8003a38:	b086      	sub	sp, #24
 8003a3a:	af00      	add	r7, sp, #0
 8003a3c:	4603      	mov	r3, r0
 8003a3e:	60b9      	str	r1, [r7, #8]
 8003a40:	607a      	str	r2, [r7, #4]
 8003a42:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003a44:	2300      	movs	r3, #0
 8003a46:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003a48:	f7ff ff3e 	bl	80038c8 <__NVIC_GetPriorityGrouping>
 8003a4c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003a4e:	687a      	ldr	r2, [r7, #4]
 8003a50:	68b9      	ldr	r1, [r7, #8]
 8003a52:	6978      	ldr	r0, [r7, #20]
 8003a54:	f7ff ff8e 	bl	8003974 <NVIC_EncodePriority>
 8003a58:	4602      	mov	r2, r0
 8003a5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003a5e:	4611      	mov	r1, r2
 8003a60:	4618      	mov	r0, r3
 8003a62:	f7ff ff5d 	bl	8003920 <__NVIC_SetPriority>
}
 8003a66:	bf00      	nop
 8003a68:	3718      	adds	r7, #24
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	bd80      	pop	{r7, pc}

08003a6e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003a6e:	b580      	push	{r7, lr}
 8003a70:	b082      	sub	sp, #8
 8003a72:	af00      	add	r7, sp, #0
 8003a74:	4603      	mov	r3, r0
 8003a76:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003a78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a7c:	4618      	mov	r0, r3
 8003a7e:	f7ff ff31 	bl	80038e4 <__NVIC_EnableIRQ>
}
 8003a82:	bf00      	nop
 8003a84:	3708      	adds	r7, #8
 8003a86:	46bd      	mov	sp, r7
 8003a88:	bd80      	pop	{r7, pc}

08003a8a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003a8a:	b580      	push	{r7, lr}
 8003a8c:	b082      	sub	sp, #8
 8003a8e:	af00      	add	r7, sp, #0
 8003a90:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003a92:	6878      	ldr	r0, [r7, #4]
 8003a94:	f7ff ffa2 	bl	80039dc <SysTick_Config>
 8003a98:	4603      	mov	r3, r0
}
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	3708      	adds	r7, #8
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	bd80      	pop	{r7, pc}

08003aa2 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003aa2:	b580      	push	{r7, lr}
 8003aa4:	b084      	sub	sp, #16
 8003aa6:	af00      	add	r7, sp, #0
 8003aa8:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003aae:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003ab0:	f7ff fa0a 	bl	8002ec8 <HAL_GetTick>
 8003ab4:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003abc:	b2db      	uxtb	r3, r3
 8003abe:	2b02      	cmp	r3, #2
 8003ac0:	d008      	beq.n	8003ad4 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	2280      	movs	r2, #128	@ 0x80
 8003ac6:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	2200      	movs	r2, #0
 8003acc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8003ad0:	2301      	movs	r3, #1
 8003ad2:	e052      	b.n	8003b7a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	681a      	ldr	r2, [r3, #0]
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f022 0216 	bic.w	r2, r2, #22
 8003ae2:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	695a      	ldr	r2, [r3, #20]
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003af2:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d103      	bne.n	8003b04 <HAL_DMA_Abort+0x62>
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d007      	beq.n	8003b14 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	681a      	ldr	r2, [r3, #0]
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f022 0208 	bic.w	r2, r2, #8
 8003b12:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	681a      	ldr	r2, [r3, #0]
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f022 0201 	bic.w	r2, r2, #1
 8003b22:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003b24:	e013      	b.n	8003b4e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003b26:	f7ff f9cf 	bl	8002ec8 <HAL_GetTick>
 8003b2a:	4602      	mov	r2, r0
 8003b2c:	68bb      	ldr	r3, [r7, #8]
 8003b2e:	1ad3      	subs	r3, r2, r3
 8003b30:	2b05      	cmp	r3, #5
 8003b32:	d90c      	bls.n	8003b4e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	2220      	movs	r2, #32
 8003b38:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	2203      	movs	r2, #3
 8003b3e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	2200      	movs	r2, #0
 8003b46:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_TIMEOUT;
 8003b4a:	2303      	movs	r3, #3
 8003b4c:	e015      	b.n	8003b7a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f003 0301 	and.w	r3, r3, #1
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d1e4      	bne.n	8003b26 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b60:	223f      	movs	r2, #63	@ 0x3f
 8003b62:	409a      	lsls	r2, r3
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	2201      	movs	r2, #1
 8003b6c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2200      	movs	r2, #0
 8003b74:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
  }
  return HAL_OK;
 8003b78:	2300      	movs	r3, #0
}
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	3710      	adds	r7, #16
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	bd80      	pop	{r7, pc}

08003b82 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003b82:	b480      	push	{r7}
 8003b84:	b083      	sub	sp, #12
 8003b86:	af00      	add	r7, sp, #0
 8003b88:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003b90:	b2db      	uxtb	r3, r3
 8003b92:	2b02      	cmp	r3, #2
 8003b94:	d004      	beq.n	8003ba0 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	2280      	movs	r2, #128	@ 0x80
 8003b9a:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8003b9c:	2301      	movs	r3, #1
 8003b9e:	e00c      	b.n	8003bba <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	2205      	movs	r2, #5
 8003ba4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	681a      	ldr	r2, [r3, #0]
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f022 0201 	bic.w	r2, r2, #1
 8003bb6:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003bb8:	2300      	movs	r3, #0
}
 8003bba:	4618      	mov	r0, r3
 8003bbc:	370c      	adds	r7, #12
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc4:	4770      	bx	lr
	...

08003bc8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003bc8:	b480      	push	{r7}
 8003bca:	b089      	sub	sp, #36	@ 0x24
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]
 8003bd0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8003bd2:	2300      	movs	r3, #0
 8003bd4:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8003bd6:	2300      	movs	r3, #0
 8003bd8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8003bda:	2300      	movs	r3, #0
 8003bdc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8003bde:	2300      	movs	r3, #0
 8003be0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8003be2:	2300      	movs	r3, #0
 8003be4:	61fb      	str	r3, [r7, #28]
 8003be6:	e175      	b.n	8003ed4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003be8:	2201      	movs	r2, #1
 8003bea:	69fb      	ldr	r3, [r7, #28]
 8003bec:	fa02 f303 	lsl.w	r3, r2, r3
 8003bf0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003bf2:	683b      	ldr	r3, [r7, #0]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	697a      	ldr	r2, [r7, #20]
 8003bf8:	4013      	ands	r3, r2
 8003bfa:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8003bfc:	693a      	ldr	r2, [r7, #16]
 8003bfe:	697b      	ldr	r3, [r7, #20]
 8003c00:	429a      	cmp	r2, r3
 8003c02:	f040 8164 	bne.w	8003ece <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003c06:	683b      	ldr	r3, [r7, #0]
 8003c08:	685b      	ldr	r3, [r3, #4]
 8003c0a:	f003 0303 	and.w	r3, r3, #3
 8003c0e:	2b01      	cmp	r3, #1
 8003c10:	d005      	beq.n	8003c1e <HAL_GPIO_Init+0x56>
 8003c12:	683b      	ldr	r3, [r7, #0]
 8003c14:	685b      	ldr	r3, [r3, #4]
 8003c16:	f003 0303 	and.w	r3, r3, #3
 8003c1a:	2b02      	cmp	r3, #2
 8003c1c:	d130      	bne.n	8003c80 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	689b      	ldr	r3, [r3, #8]
 8003c22:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003c24:	69fb      	ldr	r3, [r7, #28]
 8003c26:	005b      	lsls	r3, r3, #1
 8003c28:	2203      	movs	r2, #3
 8003c2a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c2e:	43db      	mvns	r3, r3
 8003c30:	69ba      	ldr	r2, [r7, #24]
 8003c32:	4013      	ands	r3, r2
 8003c34:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8003c36:	683b      	ldr	r3, [r7, #0]
 8003c38:	68da      	ldr	r2, [r3, #12]
 8003c3a:	69fb      	ldr	r3, [r7, #28]
 8003c3c:	005b      	lsls	r3, r3, #1
 8003c3e:	fa02 f303 	lsl.w	r3, r2, r3
 8003c42:	69ba      	ldr	r2, [r7, #24]
 8003c44:	4313      	orrs	r3, r2
 8003c46:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	69ba      	ldr	r2, [r7, #24]
 8003c4c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	685b      	ldr	r3, [r3, #4]
 8003c52:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003c54:	2201      	movs	r2, #1
 8003c56:	69fb      	ldr	r3, [r7, #28]
 8003c58:	fa02 f303 	lsl.w	r3, r2, r3
 8003c5c:	43db      	mvns	r3, r3
 8003c5e:	69ba      	ldr	r2, [r7, #24]
 8003c60:	4013      	ands	r3, r2
 8003c62:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003c64:	683b      	ldr	r3, [r7, #0]
 8003c66:	685b      	ldr	r3, [r3, #4]
 8003c68:	091b      	lsrs	r3, r3, #4
 8003c6a:	f003 0201 	and.w	r2, r3, #1
 8003c6e:	69fb      	ldr	r3, [r7, #28]
 8003c70:	fa02 f303 	lsl.w	r3, r2, r3
 8003c74:	69ba      	ldr	r2, [r7, #24]
 8003c76:	4313      	orrs	r3, r2
 8003c78:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	69ba      	ldr	r2, [r7, #24]
 8003c7e:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003c80:	683b      	ldr	r3, [r7, #0]
 8003c82:	685b      	ldr	r3, [r3, #4]
 8003c84:	f003 0303 	and.w	r3, r3, #3
 8003c88:	2b03      	cmp	r3, #3
 8003c8a:	d017      	beq.n	8003cbc <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	68db      	ldr	r3, [r3, #12]
 8003c90:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8003c92:	69fb      	ldr	r3, [r7, #28]
 8003c94:	005b      	lsls	r3, r3, #1
 8003c96:	2203      	movs	r2, #3
 8003c98:	fa02 f303 	lsl.w	r3, r2, r3
 8003c9c:	43db      	mvns	r3, r3
 8003c9e:	69ba      	ldr	r2, [r7, #24]
 8003ca0:	4013      	ands	r3, r2
 8003ca2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8003ca4:	683b      	ldr	r3, [r7, #0]
 8003ca6:	689a      	ldr	r2, [r3, #8]
 8003ca8:	69fb      	ldr	r3, [r7, #28]
 8003caa:	005b      	lsls	r3, r3, #1
 8003cac:	fa02 f303 	lsl.w	r3, r2, r3
 8003cb0:	69ba      	ldr	r2, [r7, #24]
 8003cb2:	4313      	orrs	r3, r2
 8003cb4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	69ba      	ldr	r2, [r7, #24]
 8003cba:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003cbc:	683b      	ldr	r3, [r7, #0]
 8003cbe:	685b      	ldr	r3, [r3, #4]
 8003cc0:	f003 0303 	and.w	r3, r3, #3
 8003cc4:	2b02      	cmp	r3, #2
 8003cc6:	d123      	bne.n	8003d10 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8003cc8:	69fb      	ldr	r3, [r7, #28]
 8003cca:	08da      	lsrs	r2, r3, #3
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	3208      	adds	r2, #8
 8003cd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003cd4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003cd6:	69fb      	ldr	r3, [r7, #28]
 8003cd8:	f003 0307 	and.w	r3, r3, #7
 8003cdc:	009b      	lsls	r3, r3, #2
 8003cde:	220f      	movs	r2, #15
 8003ce0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ce4:	43db      	mvns	r3, r3
 8003ce6:	69ba      	ldr	r2, [r7, #24]
 8003ce8:	4013      	ands	r3, r2
 8003cea:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003cec:	683b      	ldr	r3, [r7, #0]
 8003cee:	691a      	ldr	r2, [r3, #16]
 8003cf0:	69fb      	ldr	r3, [r7, #28]
 8003cf2:	f003 0307 	and.w	r3, r3, #7
 8003cf6:	009b      	lsls	r3, r3, #2
 8003cf8:	fa02 f303 	lsl.w	r3, r2, r3
 8003cfc:	69ba      	ldr	r2, [r7, #24]
 8003cfe:	4313      	orrs	r3, r2
 8003d00:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8003d02:	69fb      	ldr	r3, [r7, #28]
 8003d04:	08da      	lsrs	r2, r3, #3
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	3208      	adds	r2, #8
 8003d0a:	69b9      	ldr	r1, [r7, #24]
 8003d0c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003d16:	69fb      	ldr	r3, [r7, #28]
 8003d18:	005b      	lsls	r3, r3, #1
 8003d1a:	2203      	movs	r2, #3
 8003d1c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d20:	43db      	mvns	r3, r3
 8003d22:	69ba      	ldr	r2, [r7, #24]
 8003d24:	4013      	ands	r3, r2
 8003d26:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003d28:	683b      	ldr	r3, [r7, #0]
 8003d2a:	685b      	ldr	r3, [r3, #4]
 8003d2c:	f003 0203 	and.w	r2, r3, #3
 8003d30:	69fb      	ldr	r3, [r7, #28]
 8003d32:	005b      	lsls	r3, r3, #1
 8003d34:	fa02 f303 	lsl.w	r3, r2, r3
 8003d38:	69ba      	ldr	r2, [r7, #24]
 8003d3a:	4313      	orrs	r3, r2
 8003d3c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	69ba      	ldr	r2, [r7, #24]
 8003d42:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003d44:	683b      	ldr	r3, [r7, #0]
 8003d46:	685b      	ldr	r3, [r3, #4]
 8003d48:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	f000 80be 	beq.w	8003ece <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003d52:	4b66      	ldr	r3, [pc, #408]	@ (8003eec <HAL_GPIO_Init+0x324>)
 8003d54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d56:	4a65      	ldr	r2, [pc, #404]	@ (8003eec <HAL_GPIO_Init+0x324>)
 8003d58:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003d5c:	6453      	str	r3, [r2, #68]	@ 0x44
 8003d5e:	4b63      	ldr	r3, [pc, #396]	@ (8003eec <HAL_GPIO_Init+0x324>)
 8003d60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d62:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003d66:	60fb      	str	r3, [r7, #12]
 8003d68:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8003d6a:	4a61      	ldr	r2, [pc, #388]	@ (8003ef0 <HAL_GPIO_Init+0x328>)
 8003d6c:	69fb      	ldr	r3, [r7, #28]
 8003d6e:	089b      	lsrs	r3, r3, #2
 8003d70:	3302      	adds	r3, #2
 8003d72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d76:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003d78:	69fb      	ldr	r3, [r7, #28]
 8003d7a:	f003 0303 	and.w	r3, r3, #3
 8003d7e:	009b      	lsls	r3, r3, #2
 8003d80:	220f      	movs	r2, #15
 8003d82:	fa02 f303 	lsl.w	r3, r2, r3
 8003d86:	43db      	mvns	r3, r3
 8003d88:	69ba      	ldr	r2, [r7, #24]
 8003d8a:	4013      	ands	r3, r2
 8003d8c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	4a58      	ldr	r2, [pc, #352]	@ (8003ef4 <HAL_GPIO_Init+0x32c>)
 8003d92:	4293      	cmp	r3, r2
 8003d94:	d037      	beq.n	8003e06 <HAL_GPIO_Init+0x23e>
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	4a57      	ldr	r2, [pc, #348]	@ (8003ef8 <HAL_GPIO_Init+0x330>)
 8003d9a:	4293      	cmp	r3, r2
 8003d9c:	d031      	beq.n	8003e02 <HAL_GPIO_Init+0x23a>
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	4a56      	ldr	r2, [pc, #344]	@ (8003efc <HAL_GPIO_Init+0x334>)
 8003da2:	4293      	cmp	r3, r2
 8003da4:	d02b      	beq.n	8003dfe <HAL_GPIO_Init+0x236>
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	4a55      	ldr	r2, [pc, #340]	@ (8003f00 <HAL_GPIO_Init+0x338>)
 8003daa:	4293      	cmp	r3, r2
 8003dac:	d025      	beq.n	8003dfa <HAL_GPIO_Init+0x232>
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	4a54      	ldr	r2, [pc, #336]	@ (8003f04 <HAL_GPIO_Init+0x33c>)
 8003db2:	4293      	cmp	r3, r2
 8003db4:	d01f      	beq.n	8003df6 <HAL_GPIO_Init+0x22e>
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	4a53      	ldr	r2, [pc, #332]	@ (8003f08 <HAL_GPIO_Init+0x340>)
 8003dba:	4293      	cmp	r3, r2
 8003dbc:	d019      	beq.n	8003df2 <HAL_GPIO_Init+0x22a>
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	4a52      	ldr	r2, [pc, #328]	@ (8003f0c <HAL_GPIO_Init+0x344>)
 8003dc2:	4293      	cmp	r3, r2
 8003dc4:	d013      	beq.n	8003dee <HAL_GPIO_Init+0x226>
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	4a51      	ldr	r2, [pc, #324]	@ (8003f10 <HAL_GPIO_Init+0x348>)
 8003dca:	4293      	cmp	r3, r2
 8003dcc:	d00d      	beq.n	8003dea <HAL_GPIO_Init+0x222>
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	4a50      	ldr	r2, [pc, #320]	@ (8003f14 <HAL_GPIO_Init+0x34c>)
 8003dd2:	4293      	cmp	r3, r2
 8003dd4:	d007      	beq.n	8003de6 <HAL_GPIO_Init+0x21e>
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	4a4f      	ldr	r2, [pc, #316]	@ (8003f18 <HAL_GPIO_Init+0x350>)
 8003dda:	4293      	cmp	r3, r2
 8003ddc:	d101      	bne.n	8003de2 <HAL_GPIO_Init+0x21a>
 8003dde:	2309      	movs	r3, #9
 8003de0:	e012      	b.n	8003e08 <HAL_GPIO_Init+0x240>
 8003de2:	230a      	movs	r3, #10
 8003de4:	e010      	b.n	8003e08 <HAL_GPIO_Init+0x240>
 8003de6:	2308      	movs	r3, #8
 8003de8:	e00e      	b.n	8003e08 <HAL_GPIO_Init+0x240>
 8003dea:	2307      	movs	r3, #7
 8003dec:	e00c      	b.n	8003e08 <HAL_GPIO_Init+0x240>
 8003dee:	2306      	movs	r3, #6
 8003df0:	e00a      	b.n	8003e08 <HAL_GPIO_Init+0x240>
 8003df2:	2305      	movs	r3, #5
 8003df4:	e008      	b.n	8003e08 <HAL_GPIO_Init+0x240>
 8003df6:	2304      	movs	r3, #4
 8003df8:	e006      	b.n	8003e08 <HAL_GPIO_Init+0x240>
 8003dfa:	2303      	movs	r3, #3
 8003dfc:	e004      	b.n	8003e08 <HAL_GPIO_Init+0x240>
 8003dfe:	2302      	movs	r3, #2
 8003e00:	e002      	b.n	8003e08 <HAL_GPIO_Init+0x240>
 8003e02:	2301      	movs	r3, #1
 8003e04:	e000      	b.n	8003e08 <HAL_GPIO_Init+0x240>
 8003e06:	2300      	movs	r3, #0
 8003e08:	69fa      	ldr	r2, [r7, #28]
 8003e0a:	f002 0203 	and.w	r2, r2, #3
 8003e0e:	0092      	lsls	r2, r2, #2
 8003e10:	4093      	lsls	r3, r2
 8003e12:	69ba      	ldr	r2, [r7, #24]
 8003e14:	4313      	orrs	r3, r2
 8003e16:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003e18:	4935      	ldr	r1, [pc, #212]	@ (8003ef0 <HAL_GPIO_Init+0x328>)
 8003e1a:	69fb      	ldr	r3, [r7, #28]
 8003e1c:	089b      	lsrs	r3, r3, #2
 8003e1e:	3302      	adds	r3, #2
 8003e20:	69ba      	ldr	r2, [r7, #24]
 8003e22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003e26:	4b3d      	ldr	r3, [pc, #244]	@ (8003f1c <HAL_GPIO_Init+0x354>)
 8003e28:	689b      	ldr	r3, [r3, #8]
 8003e2a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e2c:	693b      	ldr	r3, [r7, #16]
 8003e2e:	43db      	mvns	r3, r3
 8003e30:	69ba      	ldr	r2, [r7, #24]
 8003e32:	4013      	ands	r3, r2
 8003e34:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003e36:	683b      	ldr	r3, [r7, #0]
 8003e38:	685b      	ldr	r3, [r3, #4]
 8003e3a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d003      	beq.n	8003e4a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003e42:	69ba      	ldr	r2, [r7, #24]
 8003e44:	693b      	ldr	r3, [r7, #16]
 8003e46:	4313      	orrs	r3, r2
 8003e48:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003e4a:	4a34      	ldr	r2, [pc, #208]	@ (8003f1c <HAL_GPIO_Init+0x354>)
 8003e4c:	69bb      	ldr	r3, [r7, #24]
 8003e4e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003e50:	4b32      	ldr	r3, [pc, #200]	@ (8003f1c <HAL_GPIO_Init+0x354>)
 8003e52:	68db      	ldr	r3, [r3, #12]
 8003e54:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e56:	693b      	ldr	r3, [r7, #16]
 8003e58:	43db      	mvns	r3, r3
 8003e5a:	69ba      	ldr	r2, [r7, #24]
 8003e5c:	4013      	ands	r3, r2
 8003e5e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003e60:	683b      	ldr	r3, [r7, #0]
 8003e62:	685b      	ldr	r3, [r3, #4]
 8003e64:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d003      	beq.n	8003e74 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003e6c:	69ba      	ldr	r2, [r7, #24]
 8003e6e:	693b      	ldr	r3, [r7, #16]
 8003e70:	4313      	orrs	r3, r2
 8003e72:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003e74:	4a29      	ldr	r2, [pc, #164]	@ (8003f1c <HAL_GPIO_Init+0x354>)
 8003e76:	69bb      	ldr	r3, [r7, #24]
 8003e78:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003e7a:	4b28      	ldr	r3, [pc, #160]	@ (8003f1c <HAL_GPIO_Init+0x354>)
 8003e7c:	685b      	ldr	r3, [r3, #4]
 8003e7e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e80:	693b      	ldr	r3, [r7, #16]
 8003e82:	43db      	mvns	r3, r3
 8003e84:	69ba      	ldr	r2, [r7, #24]
 8003e86:	4013      	ands	r3, r2
 8003e88:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003e8a:	683b      	ldr	r3, [r7, #0]
 8003e8c:	685b      	ldr	r3, [r3, #4]
 8003e8e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d003      	beq.n	8003e9e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003e96:	69ba      	ldr	r2, [r7, #24]
 8003e98:	693b      	ldr	r3, [r7, #16]
 8003e9a:	4313      	orrs	r3, r2
 8003e9c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003e9e:	4a1f      	ldr	r2, [pc, #124]	@ (8003f1c <HAL_GPIO_Init+0x354>)
 8003ea0:	69bb      	ldr	r3, [r7, #24]
 8003ea2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003ea4:	4b1d      	ldr	r3, [pc, #116]	@ (8003f1c <HAL_GPIO_Init+0x354>)
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003eaa:	693b      	ldr	r3, [r7, #16]
 8003eac:	43db      	mvns	r3, r3
 8003eae:	69ba      	ldr	r2, [r7, #24]
 8003eb0:	4013      	ands	r3, r2
 8003eb2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003eb4:	683b      	ldr	r3, [r7, #0]
 8003eb6:	685b      	ldr	r3, [r3, #4]
 8003eb8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d003      	beq.n	8003ec8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003ec0:	69ba      	ldr	r2, [r7, #24]
 8003ec2:	693b      	ldr	r3, [r7, #16]
 8003ec4:	4313      	orrs	r3, r2
 8003ec6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003ec8:	4a14      	ldr	r2, [pc, #80]	@ (8003f1c <HAL_GPIO_Init+0x354>)
 8003eca:	69bb      	ldr	r3, [r7, #24]
 8003ecc:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8003ece:	69fb      	ldr	r3, [r7, #28]
 8003ed0:	3301      	adds	r3, #1
 8003ed2:	61fb      	str	r3, [r7, #28]
 8003ed4:	69fb      	ldr	r3, [r7, #28]
 8003ed6:	2b0f      	cmp	r3, #15
 8003ed8:	f67f ae86 	bls.w	8003be8 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003edc:	bf00      	nop
 8003ede:	bf00      	nop
 8003ee0:	3724      	adds	r7, #36	@ 0x24
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee8:	4770      	bx	lr
 8003eea:	bf00      	nop
 8003eec:	40023800 	.word	0x40023800
 8003ef0:	40013800 	.word	0x40013800
 8003ef4:	40020000 	.word	0x40020000
 8003ef8:	40020400 	.word	0x40020400
 8003efc:	40020800 	.word	0x40020800
 8003f00:	40020c00 	.word	0x40020c00
 8003f04:	40021000 	.word	0x40021000
 8003f08:	40021400 	.word	0x40021400
 8003f0c:	40021800 	.word	0x40021800
 8003f10:	40021c00 	.word	0x40021c00
 8003f14:	40022000 	.word	0x40022000
 8003f18:	40022400 	.word	0x40022400
 8003f1c:	40013c00 	.word	0x40013c00

08003f20 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003f20:	b480      	push	{r7}
 8003f22:	b083      	sub	sp, #12
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	6078      	str	r0, [r7, #4]
 8003f28:	460b      	mov	r3, r1
 8003f2a:	807b      	strh	r3, [r7, #2]
 8003f2c:	4613      	mov	r3, r2
 8003f2e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003f30:	787b      	ldrb	r3, [r7, #1]
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d003      	beq.n	8003f3e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003f36:	887a      	ldrh	r2, [r7, #2]
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8003f3c:	e003      	b.n	8003f46 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8003f3e:	887b      	ldrh	r3, [r7, #2]
 8003f40:	041a      	lsls	r2, r3, #16
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	619a      	str	r2, [r3, #24]
}
 8003f46:	bf00      	nop
 8003f48:	370c      	adds	r7, #12
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f50:	4770      	bx	lr

08003f52 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin Specifies the pins to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003f52:	b480      	push	{r7}
 8003f54:	b085      	sub	sp, #20
 8003f56:	af00      	add	r7, sp, #0
 8003f58:	6078      	str	r0, [r7, #4]
 8003f5a:	460b      	mov	r3, r1
 8003f5c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	695b      	ldr	r3, [r3, #20]
 8003f62:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003f64:	887a      	ldrh	r2, [r7, #2]
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	4013      	ands	r3, r2
 8003f6a:	041a      	lsls	r2, r3, #16
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	43d9      	mvns	r1, r3
 8003f70:	887b      	ldrh	r3, [r7, #2]
 8003f72:	400b      	ands	r3, r1
 8003f74:	431a      	orrs	r2, r3
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	619a      	str	r2, [r3, #24]
}
 8003f7a:	bf00      	nop
 8003f7c:	3714      	adds	r7, #20
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f84:	4770      	bx	lr
	...

08003f88 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	b082      	sub	sp, #8
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	4603      	mov	r3, r0
 8003f90:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003f92:	4b08      	ldr	r3, [pc, #32]	@ (8003fb4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003f94:	695a      	ldr	r2, [r3, #20]
 8003f96:	88fb      	ldrh	r3, [r7, #6]
 8003f98:	4013      	ands	r3, r2
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d006      	beq.n	8003fac <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003f9e:	4a05      	ldr	r2, [pc, #20]	@ (8003fb4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003fa0:	88fb      	ldrh	r3, [r7, #6]
 8003fa2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003fa4:	88fb      	ldrh	r3, [r7, #6]
 8003fa6:	4618      	mov	r0, r3
 8003fa8:	f7fd fac8 	bl	800153c <HAL_GPIO_EXTI_Callback>
  }
}
 8003fac:	bf00      	nop
 8003fae:	3708      	adds	r7, #8
 8003fb0:	46bd      	mov	sp, r7
 8003fb2:	bd80      	pop	{r7, pc}
 8003fb4:	40013c00 	.word	0x40013c00

08003fb8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003fb8:	b580      	push	{r7, lr}
 8003fba:	b086      	sub	sp, #24
 8003fbc:	af02      	add	r7, sp, #8
 8003fbe:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d101      	bne.n	8003fca <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003fc6:	2301      	movs	r3, #1
 8003fc8:	e108      	b.n	80041dc <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8003fd6:	b2db      	uxtb	r3, r3
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d106      	bne.n	8003fea <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	2200      	movs	r2, #0
 8003fe0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003fe4:	6878      	ldr	r0, [r7, #4]
 8003fe6:	f7fe fe11 	bl	8002c0c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	2203      	movs	r2, #3
 8003fee:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8003ff2:	68bb      	ldr	r3, [r7, #8]
 8003ff4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003ff8:	d102      	bne.n	8004000 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	2200      	movs	r2, #0
 8003ffe:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	4618      	mov	r0, r3
 8004006:	f003 fc53 	bl	80078b0 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	6818      	ldr	r0, [r3, #0]
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	7c1a      	ldrb	r2, [r3, #16]
 8004012:	f88d 2000 	strb.w	r2, [sp]
 8004016:	3304      	adds	r3, #4
 8004018:	cb0e      	ldmia	r3, {r1, r2, r3}
 800401a:	f003 fbef 	bl	80077fc <USB_CoreInit>
 800401e:	4603      	mov	r3, r0
 8004020:	2b00      	cmp	r3, #0
 8004022:	d005      	beq.n	8004030 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	2202      	movs	r2, #2
 8004028:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800402c:	2301      	movs	r3, #1
 800402e:	e0d5      	b.n	80041dc <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	2100      	movs	r1, #0
 8004036:	4618      	mov	r0, r3
 8004038:	f003 fc4b 	bl	80078d2 <USB_SetCurrentMode>
 800403c:	4603      	mov	r3, r0
 800403e:	2b00      	cmp	r3, #0
 8004040:	d005      	beq.n	800404e <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	2202      	movs	r2, #2
 8004046:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800404a:	2301      	movs	r3, #1
 800404c:	e0c6      	b.n	80041dc <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800404e:	2300      	movs	r3, #0
 8004050:	73fb      	strb	r3, [r7, #15]
 8004052:	e04a      	b.n	80040ea <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004054:	7bfa      	ldrb	r2, [r7, #15]
 8004056:	6879      	ldr	r1, [r7, #4]
 8004058:	4613      	mov	r3, r2
 800405a:	00db      	lsls	r3, r3, #3
 800405c:	4413      	add	r3, r2
 800405e:	009b      	lsls	r3, r3, #2
 8004060:	440b      	add	r3, r1
 8004062:	3315      	adds	r3, #21
 8004064:	2201      	movs	r2, #1
 8004066:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004068:	7bfa      	ldrb	r2, [r7, #15]
 800406a:	6879      	ldr	r1, [r7, #4]
 800406c:	4613      	mov	r3, r2
 800406e:	00db      	lsls	r3, r3, #3
 8004070:	4413      	add	r3, r2
 8004072:	009b      	lsls	r3, r3, #2
 8004074:	440b      	add	r3, r1
 8004076:	3314      	adds	r3, #20
 8004078:	7bfa      	ldrb	r2, [r7, #15]
 800407a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800407c:	7bfa      	ldrb	r2, [r7, #15]
 800407e:	7bfb      	ldrb	r3, [r7, #15]
 8004080:	b298      	uxth	r0, r3
 8004082:	6879      	ldr	r1, [r7, #4]
 8004084:	4613      	mov	r3, r2
 8004086:	00db      	lsls	r3, r3, #3
 8004088:	4413      	add	r3, r2
 800408a:	009b      	lsls	r3, r3, #2
 800408c:	440b      	add	r3, r1
 800408e:	332e      	adds	r3, #46	@ 0x2e
 8004090:	4602      	mov	r2, r0
 8004092:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004094:	7bfa      	ldrb	r2, [r7, #15]
 8004096:	6879      	ldr	r1, [r7, #4]
 8004098:	4613      	mov	r3, r2
 800409a:	00db      	lsls	r3, r3, #3
 800409c:	4413      	add	r3, r2
 800409e:	009b      	lsls	r3, r3, #2
 80040a0:	440b      	add	r3, r1
 80040a2:	3318      	adds	r3, #24
 80040a4:	2200      	movs	r2, #0
 80040a6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80040a8:	7bfa      	ldrb	r2, [r7, #15]
 80040aa:	6879      	ldr	r1, [r7, #4]
 80040ac:	4613      	mov	r3, r2
 80040ae:	00db      	lsls	r3, r3, #3
 80040b0:	4413      	add	r3, r2
 80040b2:	009b      	lsls	r3, r3, #2
 80040b4:	440b      	add	r3, r1
 80040b6:	331c      	adds	r3, #28
 80040b8:	2200      	movs	r2, #0
 80040ba:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80040bc:	7bfa      	ldrb	r2, [r7, #15]
 80040be:	6879      	ldr	r1, [r7, #4]
 80040c0:	4613      	mov	r3, r2
 80040c2:	00db      	lsls	r3, r3, #3
 80040c4:	4413      	add	r3, r2
 80040c6:	009b      	lsls	r3, r3, #2
 80040c8:	440b      	add	r3, r1
 80040ca:	3320      	adds	r3, #32
 80040cc:	2200      	movs	r2, #0
 80040ce:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80040d0:	7bfa      	ldrb	r2, [r7, #15]
 80040d2:	6879      	ldr	r1, [r7, #4]
 80040d4:	4613      	mov	r3, r2
 80040d6:	00db      	lsls	r3, r3, #3
 80040d8:	4413      	add	r3, r2
 80040da:	009b      	lsls	r3, r3, #2
 80040dc:	440b      	add	r3, r1
 80040de:	3324      	adds	r3, #36	@ 0x24
 80040e0:	2200      	movs	r2, #0
 80040e2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80040e4:	7bfb      	ldrb	r3, [r7, #15]
 80040e6:	3301      	adds	r3, #1
 80040e8:	73fb      	strb	r3, [r7, #15]
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	791b      	ldrb	r3, [r3, #4]
 80040ee:	7bfa      	ldrb	r2, [r7, #15]
 80040f0:	429a      	cmp	r2, r3
 80040f2:	d3af      	bcc.n	8004054 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80040f4:	2300      	movs	r3, #0
 80040f6:	73fb      	strb	r3, [r7, #15]
 80040f8:	e044      	b.n	8004184 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80040fa:	7bfa      	ldrb	r2, [r7, #15]
 80040fc:	6879      	ldr	r1, [r7, #4]
 80040fe:	4613      	mov	r3, r2
 8004100:	00db      	lsls	r3, r3, #3
 8004102:	4413      	add	r3, r2
 8004104:	009b      	lsls	r3, r3, #2
 8004106:	440b      	add	r3, r1
 8004108:	f203 2355 	addw	r3, r3, #597	@ 0x255
 800410c:	2200      	movs	r2, #0
 800410e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004110:	7bfa      	ldrb	r2, [r7, #15]
 8004112:	6879      	ldr	r1, [r7, #4]
 8004114:	4613      	mov	r3, r2
 8004116:	00db      	lsls	r3, r3, #3
 8004118:	4413      	add	r3, r2
 800411a:	009b      	lsls	r3, r3, #2
 800411c:	440b      	add	r3, r1
 800411e:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8004122:	7bfa      	ldrb	r2, [r7, #15]
 8004124:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004126:	7bfa      	ldrb	r2, [r7, #15]
 8004128:	6879      	ldr	r1, [r7, #4]
 800412a:	4613      	mov	r3, r2
 800412c:	00db      	lsls	r3, r3, #3
 800412e:	4413      	add	r3, r2
 8004130:	009b      	lsls	r3, r3, #2
 8004132:	440b      	add	r3, r1
 8004134:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8004138:	2200      	movs	r2, #0
 800413a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800413c:	7bfa      	ldrb	r2, [r7, #15]
 800413e:	6879      	ldr	r1, [r7, #4]
 8004140:	4613      	mov	r3, r2
 8004142:	00db      	lsls	r3, r3, #3
 8004144:	4413      	add	r3, r2
 8004146:	009b      	lsls	r3, r3, #2
 8004148:	440b      	add	r3, r1
 800414a:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 800414e:	2200      	movs	r2, #0
 8004150:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004152:	7bfa      	ldrb	r2, [r7, #15]
 8004154:	6879      	ldr	r1, [r7, #4]
 8004156:	4613      	mov	r3, r2
 8004158:	00db      	lsls	r3, r3, #3
 800415a:	4413      	add	r3, r2
 800415c:	009b      	lsls	r3, r3, #2
 800415e:	440b      	add	r3, r1
 8004160:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8004164:	2200      	movs	r2, #0
 8004166:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004168:	7bfa      	ldrb	r2, [r7, #15]
 800416a:	6879      	ldr	r1, [r7, #4]
 800416c:	4613      	mov	r3, r2
 800416e:	00db      	lsls	r3, r3, #3
 8004170:	4413      	add	r3, r2
 8004172:	009b      	lsls	r3, r3, #2
 8004174:	440b      	add	r3, r1
 8004176:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800417a:	2200      	movs	r2, #0
 800417c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800417e:	7bfb      	ldrb	r3, [r7, #15]
 8004180:	3301      	adds	r3, #1
 8004182:	73fb      	strb	r3, [r7, #15]
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	791b      	ldrb	r3, [r3, #4]
 8004188:	7bfa      	ldrb	r2, [r7, #15]
 800418a:	429a      	cmp	r2, r3
 800418c:	d3b5      	bcc.n	80040fa <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	6818      	ldr	r0, [r3, #0]
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	7c1a      	ldrb	r2, [r3, #16]
 8004196:	f88d 2000 	strb.w	r2, [sp]
 800419a:	3304      	adds	r3, #4
 800419c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800419e:	f003 fbe5 	bl	800796c <USB_DevInit>
 80041a2:	4603      	mov	r3, r0
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d005      	beq.n	80041b4 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	2202      	movs	r2, #2
 80041ac:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80041b0:	2301      	movs	r3, #1
 80041b2:	e013      	b.n	80041dc <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	2200      	movs	r2, #0
 80041b8:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	2201      	movs	r2, #1
 80041be:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	7b1b      	ldrb	r3, [r3, #12]
 80041c6:	2b01      	cmp	r3, #1
 80041c8:	d102      	bne.n	80041d0 <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80041ca:	6878      	ldr	r0, [r7, #4]
 80041cc:	f000 f80a 	bl	80041e4 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	4618      	mov	r0, r3
 80041d6:	f003 fda0 	bl	8007d1a <USB_DevDisconnect>

  return HAL_OK;
 80041da:	2300      	movs	r3, #0
}
 80041dc:	4618      	mov	r0, r3
 80041de:	3710      	adds	r7, #16
 80041e0:	46bd      	mov	sp, r7
 80041e2:	bd80      	pop	{r7, pc}

080041e4 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80041e4:	b480      	push	{r7}
 80041e6:	b085      	sub	sp, #20
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	2201      	movs	r2, #1
 80041f6:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	2200      	movs	r2, #0
 80041fe:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	699b      	ldr	r3, [r3, #24]
 8004206:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004212:	4b05      	ldr	r3, [pc, #20]	@ (8004228 <HAL_PCDEx_ActivateLPM+0x44>)
 8004214:	4313      	orrs	r3, r2
 8004216:	68fa      	ldr	r2, [r7, #12]
 8004218:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 800421a:	2300      	movs	r3, #0
}
 800421c:	4618      	mov	r0, r3
 800421e:	3714      	adds	r7, #20
 8004220:	46bd      	mov	sp, r7
 8004222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004226:	4770      	bx	lr
 8004228:	10000003 	.word	0x10000003

0800422c <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800422c:	b480      	push	{r7}
 800422e:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004230:	4b05      	ldr	r3, [pc, #20]	@ (8004248 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	4a04      	ldr	r2, [pc, #16]	@ (8004248 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004236:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800423a:	6013      	str	r3, [r2, #0]
}
 800423c:	bf00      	nop
 800423e:	46bd      	mov	sp, r7
 8004240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004244:	4770      	bx	lr
 8004246:	bf00      	nop
 8004248:	40007000 	.word	0x40007000

0800424c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800424c:	b580      	push	{r7, lr}
 800424e:	b086      	sub	sp, #24
 8004250:	af00      	add	r7, sp, #0
 8004252:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8004254:	2300      	movs	r3, #0
 8004256:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	2b00      	cmp	r3, #0
 800425c:	d101      	bne.n	8004262 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800425e:	2301      	movs	r3, #1
 8004260:	e291      	b.n	8004786 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f003 0301 	and.w	r3, r3, #1
 800426a:	2b00      	cmp	r3, #0
 800426c:	f000 8087 	beq.w	800437e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004270:	4b96      	ldr	r3, [pc, #600]	@ (80044cc <HAL_RCC_OscConfig+0x280>)
 8004272:	689b      	ldr	r3, [r3, #8]
 8004274:	f003 030c 	and.w	r3, r3, #12
 8004278:	2b04      	cmp	r3, #4
 800427a:	d00c      	beq.n	8004296 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800427c:	4b93      	ldr	r3, [pc, #588]	@ (80044cc <HAL_RCC_OscConfig+0x280>)
 800427e:	689b      	ldr	r3, [r3, #8]
 8004280:	f003 030c 	and.w	r3, r3, #12
 8004284:	2b08      	cmp	r3, #8
 8004286:	d112      	bne.n	80042ae <HAL_RCC_OscConfig+0x62>
 8004288:	4b90      	ldr	r3, [pc, #576]	@ (80044cc <HAL_RCC_OscConfig+0x280>)
 800428a:	685b      	ldr	r3, [r3, #4]
 800428c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004290:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004294:	d10b      	bne.n	80042ae <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004296:	4b8d      	ldr	r3, [pc, #564]	@ (80044cc <HAL_RCC_OscConfig+0x280>)
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d06c      	beq.n	800437c <HAL_RCC_OscConfig+0x130>
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	685b      	ldr	r3, [r3, #4]
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d168      	bne.n	800437c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80042aa:	2301      	movs	r3, #1
 80042ac:	e26b      	b.n	8004786 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	685b      	ldr	r3, [r3, #4]
 80042b2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80042b6:	d106      	bne.n	80042c6 <HAL_RCC_OscConfig+0x7a>
 80042b8:	4b84      	ldr	r3, [pc, #528]	@ (80044cc <HAL_RCC_OscConfig+0x280>)
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	4a83      	ldr	r2, [pc, #524]	@ (80044cc <HAL_RCC_OscConfig+0x280>)
 80042be:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80042c2:	6013      	str	r3, [r2, #0]
 80042c4:	e02e      	b.n	8004324 <HAL_RCC_OscConfig+0xd8>
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	685b      	ldr	r3, [r3, #4]
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d10c      	bne.n	80042e8 <HAL_RCC_OscConfig+0x9c>
 80042ce:	4b7f      	ldr	r3, [pc, #508]	@ (80044cc <HAL_RCC_OscConfig+0x280>)
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	4a7e      	ldr	r2, [pc, #504]	@ (80044cc <HAL_RCC_OscConfig+0x280>)
 80042d4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80042d8:	6013      	str	r3, [r2, #0]
 80042da:	4b7c      	ldr	r3, [pc, #496]	@ (80044cc <HAL_RCC_OscConfig+0x280>)
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	4a7b      	ldr	r2, [pc, #492]	@ (80044cc <HAL_RCC_OscConfig+0x280>)
 80042e0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80042e4:	6013      	str	r3, [r2, #0]
 80042e6:	e01d      	b.n	8004324 <HAL_RCC_OscConfig+0xd8>
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	685b      	ldr	r3, [r3, #4]
 80042ec:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80042f0:	d10c      	bne.n	800430c <HAL_RCC_OscConfig+0xc0>
 80042f2:	4b76      	ldr	r3, [pc, #472]	@ (80044cc <HAL_RCC_OscConfig+0x280>)
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	4a75      	ldr	r2, [pc, #468]	@ (80044cc <HAL_RCC_OscConfig+0x280>)
 80042f8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80042fc:	6013      	str	r3, [r2, #0]
 80042fe:	4b73      	ldr	r3, [pc, #460]	@ (80044cc <HAL_RCC_OscConfig+0x280>)
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	4a72      	ldr	r2, [pc, #456]	@ (80044cc <HAL_RCC_OscConfig+0x280>)
 8004304:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004308:	6013      	str	r3, [r2, #0]
 800430a:	e00b      	b.n	8004324 <HAL_RCC_OscConfig+0xd8>
 800430c:	4b6f      	ldr	r3, [pc, #444]	@ (80044cc <HAL_RCC_OscConfig+0x280>)
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	4a6e      	ldr	r2, [pc, #440]	@ (80044cc <HAL_RCC_OscConfig+0x280>)
 8004312:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004316:	6013      	str	r3, [r2, #0]
 8004318:	4b6c      	ldr	r3, [pc, #432]	@ (80044cc <HAL_RCC_OscConfig+0x280>)
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	4a6b      	ldr	r2, [pc, #428]	@ (80044cc <HAL_RCC_OscConfig+0x280>)
 800431e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004322:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	685b      	ldr	r3, [r3, #4]
 8004328:	2b00      	cmp	r3, #0
 800432a:	d013      	beq.n	8004354 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800432c:	f7fe fdcc 	bl	8002ec8 <HAL_GetTick>
 8004330:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004332:	e008      	b.n	8004346 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004334:	f7fe fdc8 	bl	8002ec8 <HAL_GetTick>
 8004338:	4602      	mov	r2, r0
 800433a:	693b      	ldr	r3, [r7, #16]
 800433c:	1ad3      	subs	r3, r2, r3
 800433e:	2b64      	cmp	r3, #100	@ 0x64
 8004340:	d901      	bls.n	8004346 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004342:	2303      	movs	r3, #3
 8004344:	e21f      	b.n	8004786 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004346:	4b61      	ldr	r3, [pc, #388]	@ (80044cc <HAL_RCC_OscConfig+0x280>)
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800434e:	2b00      	cmp	r3, #0
 8004350:	d0f0      	beq.n	8004334 <HAL_RCC_OscConfig+0xe8>
 8004352:	e014      	b.n	800437e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004354:	f7fe fdb8 	bl	8002ec8 <HAL_GetTick>
 8004358:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800435a:	e008      	b.n	800436e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800435c:	f7fe fdb4 	bl	8002ec8 <HAL_GetTick>
 8004360:	4602      	mov	r2, r0
 8004362:	693b      	ldr	r3, [r7, #16]
 8004364:	1ad3      	subs	r3, r2, r3
 8004366:	2b64      	cmp	r3, #100	@ 0x64
 8004368:	d901      	bls.n	800436e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800436a:	2303      	movs	r3, #3
 800436c:	e20b      	b.n	8004786 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800436e:	4b57      	ldr	r3, [pc, #348]	@ (80044cc <HAL_RCC_OscConfig+0x280>)
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004376:	2b00      	cmp	r3, #0
 8004378:	d1f0      	bne.n	800435c <HAL_RCC_OscConfig+0x110>
 800437a:	e000      	b.n	800437e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800437c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f003 0302 	and.w	r3, r3, #2
 8004386:	2b00      	cmp	r3, #0
 8004388:	d069      	beq.n	800445e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800438a:	4b50      	ldr	r3, [pc, #320]	@ (80044cc <HAL_RCC_OscConfig+0x280>)
 800438c:	689b      	ldr	r3, [r3, #8]
 800438e:	f003 030c 	and.w	r3, r3, #12
 8004392:	2b00      	cmp	r3, #0
 8004394:	d00b      	beq.n	80043ae <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004396:	4b4d      	ldr	r3, [pc, #308]	@ (80044cc <HAL_RCC_OscConfig+0x280>)
 8004398:	689b      	ldr	r3, [r3, #8]
 800439a:	f003 030c 	and.w	r3, r3, #12
 800439e:	2b08      	cmp	r3, #8
 80043a0:	d11c      	bne.n	80043dc <HAL_RCC_OscConfig+0x190>
 80043a2:	4b4a      	ldr	r3, [pc, #296]	@ (80044cc <HAL_RCC_OscConfig+0x280>)
 80043a4:	685b      	ldr	r3, [r3, #4]
 80043a6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d116      	bne.n	80043dc <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80043ae:	4b47      	ldr	r3, [pc, #284]	@ (80044cc <HAL_RCC_OscConfig+0x280>)
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f003 0302 	and.w	r3, r3, #2
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d005      	beq.n	80043c6 <HAL_RCC_OscConfig+0x17a>
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	68db      	ldr	r3, [r3, #12]
 80043be:	2b01      	cmp	r3, #1
 80043c0:	d001      	beq.n	80043c6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80043c2:	2301      	movs	r3, #1
 80043c4:	e1df      	b.n	8004786 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043c6:	4b41      	ldr	r3, [pc, #260]	@ (80044cc <HAL_RCC_OscConfig+0x280>)
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	691b      	ldr	r3, [r3, #16]
 80043d2:	00db      	lsls	r3, r3, #3
 80043d4:	493d      	ldr	r1, [pc, #244]	@ (80044cc <HAL_RCC_OscConfig+0x280>)
 80043d6:	4313      	orrs	r3, r2
 80043d8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80043da:	e040      	b.n	800445e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	68db      	ldr	r3, [r3, #12]
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d023      	beq.n	800442c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80043e4:	4b39      	ldr	r3, [pc, #228]	@ (80044cc <HAL_RCC_OscConfig+0x280>)
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	4a38      	ldr	r2, [pc, #224]	@ (80044cc <HAL_RCC_OscConfig+0x280>)
 80043ea:	f043 0301 	orr.w	r3, r3, #1
 80043ee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043f0:	f7fe fd6a 	bl	8002ec8 <HAL_GetTick>
 80043f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043f6:	e008      	b.n	800440a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80043f8:	f7fe fd66 	bl	8002ec8 <HAL_GetTick>
 80043fc:	4602      	mov	r2, r0
 80043fe:	693b      	ldr	r3, [r7, #16]
 8004400:	1ad3      	subs	r3, r2, r3
 8004402:	2b02      	cmp	r3, #2
 8004404:	d901      	bls.n	800440a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8004406:	2303      	movs	r3, #3
 8004408:	e1bd      	b.n	8004786 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800440a:	4b30      	ldr	r3, [pc, #192]	@ (80044cc <HAL_RCC_OscConfig+0x280>)
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f003 0302 	and.w	r3, r3, #2
 8004412:	2b00      	cmp	r3, #0
 8004414:	d0f0      	beq.n	80043f8 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004416:	4b2d      	ldr	r3, [pc, #180]	@ (80044cc <HAL_RCC_OscConfig+0x280>)
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	691b      	ldr	r3, [r3, #16]
 8004422:	00db      	lsls	r3, r3, #3
 8004424:	4929      	ldr	r1, [pc, #164]	@ (80044cc <HAL_RCC_OscConfig+0x280>)
 8004426:	4313      	orrs	r3, r2
 8004428:	600b      	str	r3, [r1, #0]
 800442a:	e018      	b.n	800445e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800442c:	4b27      	ldr	r3, [pc, #156]	@ (80044cc <HAL_RCC_OscConfig+0x280>)
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	4a26      	ldr	r2, [pc, #152]	@ (80044cc <HAL_RCC_OscConfig+0x280>)
 8004432:	f023 0301 	bic.w	r3, r3, #1
 8004436:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004438:	f7fe fd46 	bl	8002ec8 <HAL_GetTick>
 800443c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800443e:	e008      	b.n	8004452 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004440:	f7fe fd42 	bl	8002ec8 <HAL_GetTick>
 8004444:	4602      	mov	r2, r0
 8004446:	693b      	ldr	r3, [r7, #16]
 8004448:	1ad3      	subs	r3, r2, r3
 800444a:	2b02      	cmp	r3, #2
 800444c:	d901      	bls.n	8004452 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800444e:	2303      	movs	r3, #3
 8004450:	e199      	b.n	8004786 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004452:	4b1e      	ldr	r3, [pc, #120]	@ (80044cc <HAL_RCC_OscConfig+0x280>)
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f003 0302 	and.w	r3, r3, #2
 800445a:	2b00      	cmp	r3, #0
 800445c:	d1f0      	bne.n	8004440 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f003 0308 	and.w	r3, r3, #8
 8004466:	2b00      	cmp	r3, #0
 8004468:	d038      	beq.n	80044dc <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	695b      	ldr	r3, [r3, #20]
 800446e:	2b00      	cmp	r3, #0
 8004470:	d019      	beq.n	80044a6 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004472:	4b16      	ldr	r3, [pc, #88]	@ (80044cc <HAL_RCC_OscConfig+0x280>)
 8004474:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004476:	4a15      	ldr	r2, [pc, #84]	@ (80044cc <HAL_RCC_OscConfig+0x280>)
 8004478:	f043 0301 	orr.w	r3, r3, #1
 800447c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800447e:	f7fe fd23 	bl	8002ec8 <HAL_GetTick>
 8004482:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004484:	e008      	b.n	8004498 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004486:	f7fe fd1f 	bl	8002ec8 <HAL_GetTick>
 800448a:	4602      	mov	r2, r0
 800448c:	693b      	ldr	r3, [r7, #16]
 800448e:	1ad3      	subs	r3, r2, r3
 8004490:	2b02      	cmp	r3, #2
 8004492:	d901      	bls.n	8004498 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004494:	2303      	movs	r3, #3
 8004496:	e176      	b.n	8004786 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004498:	4b0c      	ldr	r3, [pc, #48]	@ (80044cc <HAL_RCC_OscConfig+0x280>)
 800449a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800449c:	f003 0302 	and.w	r3, r3, #2
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d0f0      	beq.n	8004486 <HAL_RCC_OscConfig+0x23a>
 80044a4:	e01a      	b.n	80044dc <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80044a6:	4b09      	ldr	r3, [pc, #36]	@ (80044cc <HAL_RCC_OscConfig+0x280>)
 80044a8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80044aa:	4a08      	ldr	r2, [pc, #32]	@ (80044cc <HAL_RCC_OscConfig+0x280>)
 80044ac:	f023 0301 	bic.w	r3, r3, #1
 80044b0:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044b2:	f7fe fd09 	bl	8002ec8 <HAL_GetTick>
 80044b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80044b8:	e00a      	b.n	80044d0 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80044ba:	f7fe fd05 	bl	8002ec8 <HAL_GetTick>
 80044be:	4602      	mov	r2, r0
 80044c0:	693b      	ldr	r3, [r7, #16]
 80044c2:	1ad3      	subs	r3, r2, r3
 80044c4:	2b02      	cmp	r3, #2
 80044c6:	d903      	bls.n	80044d0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80044c8:	2303      	movs	r3, #3
 80044ca:	e15c      	b.n	8004786 <HAL_RCC_OscConfig+0x53a>
 80044cc:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80044d0:	4b91      	ldr	r3, [pc, #580]	@ (8004718 <HAL_RCC_OscConfig+0x4cc>)
 80044d2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80044d4:	f003 0302 	and.w	r3, r3, #2
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d1ee      	bne.n	80044ba <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f003 0304 	and.w	r3, r3, #4
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	f000 80a4 	beq.w	8004632 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80044ea:	4b8b      	ldr	r3, [pc, #556]	@ (8004718 <HAL_RCC_OscConfig+0x4cc>)
 80044ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d10d      	bne.n	8004512 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80044f6:	4b88      	ldr	r3, [pc, #544]	@ (8004718 <HAL_RCC_OscConfig+0x4cc>)
 80044f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044fa:	4a87      	ldr	r2, [pc, #540]	@ (8004718 <HAL_RCC_OscConfig+0x4cc>)
 80044fc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004500:	6413      	str	r3, [r2, #64]	@ 0x40
 8004502:	4b85      	ldr	r3, [pc, #532]	@ (8004718 <HAL_RCC_OscConfig+0x4cc>)
 8004504:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004506:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800450a:	60bb      	str	r3, [r7, #8]
 800450c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800450e:	2301      	movs	r3, #1
 8004510:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004512:	4b82      	ldr	r3, [pc, #520]	@ (800471c <HAL_RCC_OscConfig+0x4d0>)
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800451a:	2b00      	cmp	r3, #0
 800451c:	d118      	bne.n	8004550 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800451e:	4b7f      	ldr	r3, [pc, #508]	@ (800471c <HAL_RCC_OscConfig+0x4d0>)
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	4a7e      	ldr	r2, [pc, #504]	@ (800471c <HAL_RCC_OscConfig+0x4d0>)
 8004524:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004528:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800452a:	f7fe fccd 	bl	8002ec8 <HAL_GetTick>
 800452e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004530:	e008      	b.n	8004544 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004532:	f7fe fcc9 	bl	8002ec8 <HAL_GetTick>
 8004536:	4602      	mov	r2, r0
 8004538:	693b      	ldr	r3, [r7, #16]
 800453a:	1ad3      	subs	r3, r2, r3
 800453c:	2b64      	cmp	r3, #100	@ 0x64
 800453e:	d901      	bls.n	8004544 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8004540:	2303      	movs	r3, #3
 8004542:	e120      	b.n	8004786 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004544:	4b75      	ldr	r3, [pc, #468]	@ (800471c <HAL_RCC_OscConfig+0x4d0>)
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800454c:	2b00      	cmp	r3, #0
 800454e:	d0f0      	beq.n	8004532 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	689b      	ldr	r3, [r3, #8]
 8004554:	2b01      	cmp	r3, #1
 8004556:	d106      	bne.n	8004566 <HAL_RCC_OscConfig+0x31a>
 8004558:	4b6f      	ldr	r3, [pc, #444]	@ (8004718 <HAL_RCC_OscConfig+0x4cc>)
 800455a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800455c:	4a6e      	ldr	r2, [pc, #440]	@ (8004718 <HAL_RCC_OscConfig+0x4cc>)
 800455e:	f043 0301 	orr.w	r3, r3, #1
 8004562:	6713      	str	r3, [r2, #112]	@ 0x70
 8004564:	e02d      	b.n	80045c2 <HAL_RCC_OscConfig+0x376>
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	689b      	ldr	r3, [r3, #8]
 800456a:	2b00      	cmp	r3, #0
 800456c:	d10c      	bne.n	8004588 <HAL_RCC_OscConfig+0x33c>
 800456e:	4b6a      	ldr	r3, [pc, #424]	@ (8004718 <HAL_RCC_OscConfig+0x4cc>)
 8004570:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004572:	4a69      	ldr	r2, [pc, #420]	@ (8004718 <HAL_RCC_OscConfig+0x4cc>)
 8004574:	f023 0301 	bic.w	r3, r3, #1
 8004578:	6713      	str	r3, [r2, #112]	@ 0x70
 800457a:	4b67      	ldr	r3, [pc, #412]	@ (8004718 <HAL_RCC_OscConfig+0x4cc>)
 800457c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800457e:	4a66      	ldr	r2, [pc, #408]	@ (8004718 <HAL_RCC_OscConfig+0x4cc>)
 8004580:	f023 0304 	bic.w	r3, r3, #4
 8004584:	6713      	str	r3, [r2, #112]	@ 0x70
 8004586:	e01c      	b.n	80045c2 <HAL_RCC_OscConfig+0x376>
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	689b      	ldr	r3, [r3, #8]
 800458c:	2b05      	cmp	r3, #5
 800458e:	d10c      	bne.n	80045aa <HAL_RCC_OscConfig+0x35e>
 8004590:	4b61      	ldr	r3, [pc, #388]	@ (8004718 <HAL_RCC_OscConfig+0x4cc>)
 8004592:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004594:	4a60      	ldr	r2, [pc, #384]	@ (8004718 <HAL_RCC_OscConfig+0x4cc>)
 8004596:	f043 0304 	orr.w	r3, r3, #4
 800459a:	6713      	str	r3, [r2, #112]	@ 0x70
 800459c:	4b5e      	ldr	r3, [pc, #376]	@ (8004718 <HAL_RCC_OscConfig+0x4cc>)
 800459e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80045a0:	4a5d      	ldr	r2, [pc, #372]	@ (8004718 <HAL_RCC_OscConfig+0x4cc>)
 80045a2:	f043 0301 	orr.w	r3, r3, #1
 80045a6:	6713      	str	r3, [r2, #112]	@ 0x70
 80045a8:	e00b      	b.n	80045c2 <HAL_RCC_OscConfig+0x376>
 80045aa:	4b5b      	ldr	r3, [pc, #364]	@ (8004718 <HAL_RCC_OscConfig+0x4cc>)
 80045ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80045ae:	4a5a      	ldr	r2, [pc, #360]	@ (8004718 <HAL_RCC_OscConfig+0x4cc>)
 80045b0:	f023 0301 	bic.w	r3, r3, #1
 80045b4:	6713      	str	r3, [r2, #112]	@ 0x70
 80045b6:	4b58      	ldr	r3, [pc, #352]	@ (8004718 <HAL_RCC_OscConfig+0x4cc>)
 80045b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80045ba:	4a57      	ldr	r2, [pc, #348]	@ (8004718 <HAL_RCC_OscConfig+0x4cc>)
 80045bc:	f023 0304 	bic.w	r3, r3, #4
 80045c0:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	689b      	ldr	r3, [r3, #8]
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d015      	beq.n	80045f6 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045ca:	f7fe fc7d 	bl	8002ec8 <HAL_GetTick>
 80045ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045d0:	e00a      	b.n	80045e8 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80045d2:	f7fe fc79 	bl	8002ec8 <HAL_GetTick>
 80045d6:	4602      	mov	r2, r0
 80045d8:	693b      	ldr	r3, [r7, #16]
 80045da:	1ad3      	subs	r3, r2, r3
 80045dc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80045e0:	4293      	cmp	r3, r2
 80045e2:	d901      	bls.n	80045e8 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80045e4:	2303      	movs	r3, #3
 80045e6:	e0ce      	b.n	8004786 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045e8:	4b4b      	ldr	r3, [pc, #300]	@ (8004718 <HAL_RCC_OscConfig+0x4cc>)
 80045ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80045ec:	f003 0302 	and.w	r3, r3, #2
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d0ee      	beq.n	80045d2 <HAL_RCC_OscConfig+0x386>
 80045f4:	e014      	b.n	8004620 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045f6:	f7fe fc67 	bl	8002ec8 <HAL_GetTick>
 80045fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80045fc:	e00a      	b.n	8004614 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80045fe:	f7fe fc63 	bl	8002ec8 <HAL_GetTick>
 8004602:	4602      	mov	r2, r0
 8004604:	693b      	ldr	r3, [r7, #16]
 8004606:	1ad3      	subs	r3, r2, r3
 8004608:	f241 3288 	movw	r2, #5000	@ 0x1388
 800460c:	4293      	cmp	r3, r2
 800460e:	d901      	bls.n	8004614 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8004610:	2303      	movs	r3, #3
 8004612:	e0b8      	b.n	8004786 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004614:	4b40      	ldr	r3, [pc, #256]	@ (8004718 <HAL_RCC_OscConfig+0x4cc>)
 8004616:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004618:	f003 0302 	and.w	r3, r3, #2
 800461c:	2b00      	cmp	r3, #0
 800461e:	d1ee      	bne.n	80045fe <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004620:	7dfb      	ldrb	r3, [r7, #23]
 8004622:	2b01      	cmp	r3, #1
 8004624:	d105      	bne.n	8004632 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004626:	4b3c      	ldr	r3, [pc, #240]	@ (8004718 <HAL_RCC_OscConfig+0x4cc>)
 8004628:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800462a:	4a3b      	ldr	r2, [pc, #236]	@ (8004718 <HAL_RCC_OscConfig+0x4cc>)
 800462c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004630:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	699b      	ldr	r3, [r3, #24]
 8004636:	2b00      	cmp	r3, #0
 8004638:	f000 80a4 	beq.w	8004784 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800463c:	4b36      	ldr	r3, [pc, #216]	@ (8004718 <HAL_RCC_OscConfig+0x4cc>)
 800463e:	689b      	ldr	r3, [r3, #8]
 8004640:	f003 030c 	and.w	r3, r3, #12
 8004644:	2b08      	cmp	r3, #8
 8004646:	d06b      	beq.n	8004720 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	699b      	ldr	r3, [r3, #24]
 800464c:	2b02      	cmp	r3, #2
 800464e:	d149      	bne.n	80046e4 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004650:	4b31      	ldr	r3, [pc, #196]	@ (8004718 <HAL_RCC_OscConfig+0x4cc>)
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	4a30      	ldr	r2, [pc, #192]	@ (8004718 <HAL_RCC_OscConfig+0x4cc>)
 8004656:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800465a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800465c:	f7fe fc34 	bl	8002ec8 <HAL_GetTick>
 8004660:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004662:	e008      	b.n	8004676 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004664:	f7fe fc30 	bl	8002ec8 <HAL_GetTick>
 8004668:	4602      	mov	r2, r0
 800466a:	693b      	ldr	r3, [r7, #16]
 800466c:	1ad3      	subs	r3, r2, r3
 800466e:	2b02      	cmp	r3, #2
 8004670:	d901      	bls.n	8004676 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8004672:	2303      	movs	r3, #3
 8004674:	e087      	b.n	8004786 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004676:	4b28      	ldr	r3, [pc, #160]	@ (8004718 <HAL_RCC_OscConfig+0x4cc>)
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800467e:	2b00      	cmp	r3, #0
 8004680:	d1f0      	bne.n	8004664 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	69da      	ldr	r2, [r3, #28]
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	6a1b      	ldr	r3, [r3, #32]
 800468a:	431a      	orrs	r2, r3
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004690:	019b      	lsls	r3, r3, #6
 8004692:	431a      	orrs	r2, r3
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004698:	085b      	lsrs	r3, r3, #1
 800469a:	3b01      	subs	r3, #1
 800469c:	041b      	lsls	r3, r3, #16
 800469e:	431a      	orrs	r2, r3
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046a4:	061b      	lsls	r3, r3, #24
 80046a6:	4313      	orrs	r3, r2
 80046a8:	4a1b      	ldr	r2, [pc, #108]	@ (8004718 <HAL_RCC_OscConfig+0x4cc>)
 80046aa:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80046ae:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80046b0:	4b19      	ldr	r3, [pc, #100]	@ (8004718 <HAL_RCC_OscConfig+0x4cc>)
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	4a18      	ldr	r2, [pc, #96]	@ (8004718 <HAL_RCC_OscConfig+0x4cc>)
 80046b6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80046ba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046bc:	f7fe fc04 	bl	8002ec8 <HAL_GetTick>
 80046c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80046c2:	e008      	b.n	80046d6 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80046c4:	f7fe fc00 	bl	8002ec8 <HAL_GetTick>
 80046c8:	4602      	mov	r2, r0
 80046ca:	693b      	ldr	r3, [r7, #16]
 80046cc:	1ad3      	subs	r3, r2, r3
 80046ce:	2b02      	cmp	r3, #2
 80046d0:	d901      	bls.n	80046d6 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 80046d2:	2303      	movs	r3, #3
 80046d4:	e057      	b.n	8004786 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80046d6:	4b10      	ldr	r3, [pc, #64]	@ (8004718 <HAL_RCC_OscConfig+0x4cc>)
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d0f0      	beq.n	80046c4 <HAL_RCC_OscConfig+0x478>
 80046e2:	e04f      	b.n	8004784 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80046e4:	4b0c      	ldr	r3, [pc, #48]	@ (8004718 <HAL_RCC_OscConfig+0x4cc>)
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	4a0b      	ldr	r2, [pc, #44]	@ (8004718 <HAL_RCC_OscConfig+0x4cc>)
 80046ea:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80046ee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046f0:	f7fe fbea 	bl	8002ec8 <HAL_GetTick>
 80046f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80046f6:	e008      	b.n	800470a <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80046f8:	f7fe fbe6 	bl	8002ec8 <HAL_GetTick>
 80046fc:	4602      	mov	r2, r0
 80046fe:	693b      	ldr	r3, [r7, #16]
 8004700:	1ad3      	subs	r3, r2, r3
 8004702:	2b02      	cmp	r3, #2
 8004704:	d901      	bls.n	800470a <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8004706:	2303      	movs	r3, #3
 8004708:	e03d      	b.n	8004786 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800470a:	4b03      	ldr	r3, [pc, #12]	@ (8004718 <HAL_RCC_OscConfig+0x4cc>)
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004712:	2b00      	cmp	r3, #0
 8004714:	d1f0      	bne.n	80046f8 <HAL_RCC_OscConfig+0x4ac>
 8004716:	e035      	b.n	8004784 <HAL_RCC_OscConfig+0x538>
 8004718:	40023800 	.word	0x40023800
 800471c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8004720:	4b1b      	ldr	r3, [pc, #108]	@ (8004790 <HAL_RCC_OscConfig+0x544>)
 8004722:	685b      	ldr	r3, [r3, #4]
 8004724:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	699b      	ldr	r3, [r3, #24]
 800472a:	2b01      	cmp	r3, #1
 800472c:	d028      	beq.n	8004780 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004738:	429a      	cmp	r2, r3
 800473a:	d121      	bne.n	8004780 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004746:	429a      	cmp	r2, r3
 8004748:	d11a      	bne.n	8004780 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800474a:	68fa      	ldr	r2, [r7, #12]
 800474c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004750:	4013      	ands	r3, r2
 8004752:	687a      	ldr	r2, [r7, #4]
 8004754:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004756:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004758:	4293      	cmp	r3, r2
 800475a:	d111      	bne.n	8004780 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004766:	085b      	lsrs	r3, r3, #1
 8004768:	3b01      	subs	r3, #1
 800476a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800476c:	429a      	cmp	r2, r3
 800476e:	d107      	bne.n	8004780 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800477a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800477c:	429a      	cmp	r2, r3
 800477e:	d001      	beq.n	8004784 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8004780:	2301      	movs	r3, #1
 8004782:	e000      	b.n	8004786 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8004784:	2300      	movs	r3, #0
}
 8004786:	4618      	mov	r0, r3
 8004788:	3718      	adds	r7, #24
 800478a:	46bd      	mov	sp, r7
 800478c:	bd80      	pop	{r7, pc}
 800478e:	bf00      	nop
 8004790:	40023800 	.word	0x40023800

08004794 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004794:	b580      	push	{r7, lr}
 8004796:	b084      	sub	sp, #16
 8004798:	af00      	add	r7, sp, #0
 800479a:	6078      	str	r0, [r7, #4]
 800479c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800479e:	2300      	movs	r3, #0
 80047a0:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d101      	bne.n	80047ac <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80047a8:	2301      	movs	r3, #1
 80047aa:	e0d0      	b.n	800494e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80047ac:	4b6a      	ldr	r3, [pc, #424]	@ (8004958 <HAL_RCC_ClockConfig+0x1c4>)
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f003 030f 	and.w	r3, r3, #15
 80047b4:	683a      	ldr	r2, [r7, #0]
 80047b6:	429a      	cmp	r2, r3
 80047b8:	d910      	bls.n	80047dc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80047ba:	4b67      	ldr	r3, [pc, #412]	@ (8004958 <HAL_RCC_ClockConfig+0x1c4>)
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	f023 020f 	bic.w	r2, r3, #15
 80047c2:	4965      	ldr	r1, [pc, #404]	@ (8004958 <HAL_RCC_ClockConfig+0x1c4>)
 80047c4:	683b      	ldr	r3, [r7, #0]
 80047c6:	4313      	orrs	r3, r2
 80047c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80047ca:	4b63      	ldr	r3, [pc, #396]	@ (8004958 <HAL_RCC_ClockConfig+0x1c4>)
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f003 030f 	and.w	r3, r3, #15
 80047d2:	683a      	ldr	r2, [r7, #0]
 80047d4:	429a      	cmp	r2, r3
 80047d6:	d001      	beq.n	80047dc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80047d8:	2301      	movs	r3, #1
 80047da:	e0b8      	b.n	800494e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f003 0302 	and.w	r3, r3, #2
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d020      	beq.n	800482a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f003 0304 	and.w	r3, r3, #4
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d005      	beq.n	8004800 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80047f4:	4b59      	ldr	r3, [pc, #356]	@ (800495c <HAL_RCC_ClockConfig+0x1c8>)
 80047f6:	689b      	ldr	r3, [r3, #8]
 80047f8:	4a58      	ldr	r2, [pc, #352]	@ (800495c <HAL_RCC_ClockConfig+0x1c8>)
 80047fa:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80047fe:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f003 0308 	and.w	r3, r3, #8
 8004808:	2b00      	cmp	r3, #0
 800480a:	d005      	beq.n	8004818 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800480c:	4b53      	ldr	r3, [pc, #332]	@ (800495c <HAL_RCC_ClockConfig+0x1c8>)
 800480e:	689b      	ldr	r3, [r3, #8]
 8004810:	4a52      	ldr	r2, [pc, #328]	@ (800495c <HAL_RCC_ClockConfig+0x1c8>)
 8004812:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004816:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004818:	4b50      	ldr	r3, [pc, #320]	@ (800495c <HAL_RCC_ClockConfig+0x1c8>)
 800481a:	689b      	ldr	r3, [r3, #8]
 800481c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	689b      	ldr	r3, [r3, #8]
 8004824:	494d      	ldr	r1, [pc, #308]	@ (800495c <HAL_RCC_ClockConfig+0x1c8>)
 8004826:	4313      	orrs	r3, r2
 8004828:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f003 0301 	and.w	r3, r3, #1
 8004832:	2b00      	cmp	r3, #0
 8004834:	d040      	beq.n	80048b8 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	685b      	ldr	r3, [r3, #4]
 800483a:	2b01      	cmp	r3, #1
 800483c:	d107      	bne.n	800484e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800483e:	4b47      	ldr	r3, [pc, #284]	@ (800495c <HAL_RCC_ClockConfig+0x1c8>)
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004846:	2b00      	cmp	r3, #0
 8004848:	d115      	bne.n	8004876 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800484a:	2301      	movs	r3, #1
 800484c:	e07f      	b.n	800494e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	685b      	ldr	r3, [r3, #4]
 8004852:	2b02      	cmp	r3, #2
 8004854:	d107      	bne.n	8004866 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004856:	4b41      	ldr	r3, [pc, #260]	@ (800495c <HAL_RCC_ClockConfig+0x1c8>)
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800485e:	2b00      	cmp	r3, #0
 8004860:	d109      	bne.n	8004876 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004862:	2301      	movs	r3, #1
 8004864:	e073      	b.n	800494e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004866:	4b3d      	ldr	r3, [pc, #244]	@ (800495c <HAL_RCC_ClockConfig+0x1c8>)
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f003 0302 	and.w	r3, r3, #2
 800486e:	2b00      	cmp	r3, #0
 8004870:	d101      	bne.n	8004876 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004872:	2301      	movs	r3, #1
 8004874:	e06b      	b.n	800494e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004876:	4b39      	ldr	r3, [pc, #228]	@ (800495c <HAL_RCC_ClockConfig+0x1c8>)
 8004878:	689b      	ldr	r3, [r3, #8]
 800487a:	f023 0203 	bic.w	r2, r3, #3
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	685b      	ldr	r3, [r3, #4]
 8004882:	4936      	ldr	r1, [pc, #216]	@ (800495c <HAL_RCC_ClockConfig+0x1c8>)
 8004884:	4313      	orrs	r3, r2
 8004886:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004888:	f7fe fb1e 	bl	8002ec8 <HAL_GetTick>
 800488c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800488e:	e00a      	b.n	80048a6 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004890:	f7fe fb1a 	bl	8002ec8 <HAL_GetTick>
 8004894:	4602      	mov	r2, r0
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	1ad3      	subs	r3, r2, r3
 800489a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800489e:	4293      	cmp	r3, r2
 80048a0:	d901      	bls.n	80048a6 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80048a2:	2303      	movs	r3, #3
 80048a4:	e053      	b.n	800494e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80048a6:	4b2d      	ldr	r3, [pc, #180]	@ (800495c <HAL_RCC_ClockConfig+0x1c8>)
 80048a8:	689b      	ldr	r3, [r3, #8]
 80048aa:	f003 020c 	and.w	r2, r3, #12
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	685b      	ldr	r3, [r3, #4]
 80048b2:	009b      	lsls	r3, r3, #2
 80048b4:	429a      	cmp	r2, r3
 80048b6:	d1eb      	bne.n	8004890 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80048b8:	4b27      	ldr	r3, [pc, #156]	@ (8004958 <HAL_RCC_ClockConfig+0x1c4>)
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f003 030f 	and.w	r3, r3, #15
 80048c0:	683a      	ldr	r2, [r7, #0]
 80048c2:	429a      	cmp	r2, r3
 80048c4:	d210      	bcs.n	80048e8 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80048c6:	4b24      	ldr	r3, [pc, #144]	@ (8004958 <HAL_RCC_ClockConfig+0x1c4>)
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f023 020f 	bic.w	r2, r3, #15
 80048ce:	4922      	ldr	r1, [pc, #136]	@ (8004958 <HAL_RCC_ClockConfig+0x1c4>)
 80048d0:	683b      	ldr	r3, [r7, #0]
 80048d2:	4313      	orrs	r3, r2
 80048d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80048d6:	4b20      	ldr	r3, [pc, #128]	@ (8004958 <HAL_RCC_ClockConfig+0x1c4>)
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f003 030f 	and.w	r3, r3, #15
 80048de:	683a      	ldr	r2, [r7, #0]
 80048e0:	429a      	cmp	r2, r3
 80048e2:	d001      	beq.n	80048e8 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80048e4:	2301      	movs	r3, #1
 80048e6:	e032      	b.n	800494e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	f003 0304 	and.w	r3, r3, #4
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d008      	beq.n	8004906 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80048f4:	4b19      	ldr	r3, [pc, #100]	@ (800495c <HAL_RCC_ClockConfig+0x1c8>)
 80048f6:	689b      	ldr	r3, [r3, #8]
 80048f8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	68db      	ldr	r3, [r3, #12]
 8004900:	4916      	ldr	r1, [pc, #88]	@ (800495c <HAL_RCC_ClockConfig+0x1c8>)
 8004902:	4313      	orrs	r3, r2
 8004904:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f003 0308 	and.w	r3, r3, #8
 800490e:	2b00      	cmp	r3, #0
 8004910:	d009      	beq.n	8004926 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004912:	4b12      	ldr	r3, [pc, #72]	@ (800495c <HAL_RCC_ClockConfig+0x1c8>)
 8004914:	689b      	ldr	r3, [r3, #8]
 8004916:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	691b      	ldr	r3, [r3, #16]
 800491e:	00db      	lsls	r3, r3, #3
 8004920:	490e      	ldr	r1, [pc, #56]	@ (800495c <HAL_RCC_ClockConfig+0x1c8>)
 8004922:	4313      	orrs	r3, r2
 8004924:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004926:	f000 f821 	bl	800496c <HAL_RCC_GetSysClockFreq>
 800492a:	4602      	mov	r2, r0
 800492c:	4b0b      	ldr	r3, [pc, #44]	@ (800495c <HAL_RCC_ClockConfig+0x1c8>)
 800492e:	689b      	ldr	r3, [r3, #8]
 8004930:	091b      	lsrs	r3, r3, #4
 8004932:	f003 030f 	and.w	r3, r3, #15
 8004936:	490a      	ldr	r1, [pc, #40]	@ (8004960 <HAL_RCC_ClockConfig+0x1cc>)
 8004938:	5ccb      	ldrb	r3, [r1, r3]
 800493a:	fa22 f303 	lsr.w	r3, r2, r3
 800493e:	4a09      	ldr	r2, [pc, #36]	@ (8004964 <HAL_RCC_ClockConfig+0x1d0>)
 8004940:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004942:	4b09      	ldr	r3, [pc, #36]	@ (8004968 <HAL_RCC_ClockConfig+0x1d4>)
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	4618      	mov	r0, r3
 8004948:	f7fe fa7a 	bl	8002e40 <HAL_InitTick>

  return HAL_OK;
 800494c:	2300      	movs	r3, #0
}
 800494e:	4618      	mov	r0, r3
 8004950:	3710      	adds	r7, #16
 8004952:	46bd      	mov	sp, r7
 8004954:	bd80      	pop	{r7, pc}
 8004956:	bf00      	nop
 8004958:	40023c00 	.word	0x40023c00
 800495c:	40023800 	.word	0x40023800
 8004960:	08008bf4 	.word	0x08008bf4
 8004964:	20000028 	.word	0x20000028
 8004968:	2000002c 	.word	0x2000002c

0800496c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800496c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004970:	b094      	sub	sp, #80	@ 0x50
 8004972:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8004974:	2300      	movs	r3, #0
 8004976:	647b      	str	r3, [r7, #68]	@ 0x44
 8004978:	2300      	movs	r3, #0
 800497a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800497c:	2300      	movs	r3, #0
 800497e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 8004980:	2300      	movs	r3, #0
 8004982:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004984:	4b79      	ldr	r3, [pc, #484]	@ (8004b6c <HAL_RCC_GetSysClockFreq+0x200>)
 8004986:	689b      	ldr	r3, [r3, #8]
 8004988:	f003 030c 	and.w	r3, r3, #12
 800498c:	2b08      	cmp	r3, #8
 800498e:	d00d      	beq.n	80049ac <HAL_RCC_GetSysClockFreq+0x40>
 8004990:	2b08      	cmp	r3, #8
 8004992:	f200 80e1 	bhi.w	8004b58 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004996:	2b00      	cmp	r3, #0
 8004998:	d002      	beq.n	80049a0 <HAL_RCC_GetSysClockFreq+0x34>
 800499a:	2b04      	cmp	r3, #4
 800499c:	d003      	beq.n	80049a6 <HAL_RCC_GetSysClockFreq+0x3a>
 800499e:	e0db      	b.n	8004b58 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80049a0:	4b73      	ldr	r3, [pc, #460]	@ (8004b70 <HAL_RCC_GetSysClockFreq+0x204>)
 80049a2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80049a4:	e0db      	b.n	8004b5e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80049a6:	4b73      	ldr	r3, [pc, #460]	@ (8004b74 <HAL_RCC_GetSysClockFreq+0x208>)
 80049a8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80049aa:	e0d8      	b.n	8004b5e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80049ac:	4b6f      	ldr	r3, [pc, #444]	@ (8004b6c <HAL_RCC_GetSysClockFreq+0x200>)
 80049ae:	685b      	ldr	r3, [r3, #4]
 80049b0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80049b4:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80049b6:	4b6d      	ldr	r3, [pc, #436]	@ (8004b6c <HAL_RCC_GetSysClockFreq+0x200>)
 80049b8:	685b      	ldr	r3, [r3, #4]
 80049ba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d063      	beq.n	8004a8a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80049c2:	4b6a      	ldr	r3, [pc, #424]	@ (8004b6c <HAL_RCC_GetSysClockFreq+0x200>)
 80049c4:	685b      	ldr	r3, [r3, #4]
 80049c6:	099b      	lsrs	r3, r3, #6
 80049c8:	2200      	movs	r2, #0
 80049ca:	63bb      	str	r3, [r7, #56]	@ 0x38
 80049cc:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80049ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80049d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80049d4:	633b      	str	r3, [r7, #48]	@ 0x30
 80049d6:	2300      	movs	r3, #0
 80049d8:	637b      	str	r3, [r7, #52]	@ 0x34
 80049da:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80049de:	4622      	mov	r2, r4
 80049e0:	462b      	mov	r3, r5
 80049e2:	f04f 0000 	mov.w	r0, #0
 80049e6:	f04f 0100 	mov.w	r1, #0
 80049ea:	0159      	lsls	r1, r3, #5
 80049ec:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80049f0:	0150      	lsls	r0, r2, #5
 80049f2:	4602      	mov	r2, r0
 80049f4:	460b      	mov	r3, r1
 80049f6:	4621      	mov	r1, r4
 80049f8:	1a51      	subs	r1, r2, r1
 80049fa:	6139      	str	r1, [r7, #16]
 80049fc:	4629      	mov	r1, r5
 80049fe:	eb63 0301 	sbc.w	r3, r3, r1
 8004a02:	617b      	str	r3, [r7, #20]
 8004a04:	f04f 0200 	mov.w	r2, #0
 8004a08:	f04f 0300 	mov.w	r3, #0
 8004a0c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004a10:	4659      	mov	r1, fp
 8004a12:	018b      	lsls	r3, r1, #6
 8004a14:	4651      	mov	r1, sl
 8004a16:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004a1a:	4651      	mov	r1, sl
 8004a1c:	018a      	lsls	r2, r1, #6
 8004a1e:	4651      	mov	r1, sl
 8004a20:	ebb2 0801 	subs.w	r8, r2, r1
 8004a24:	4659      	mov	r1, fp
 8004a26:	eb63 0901 	sbc.w	r9, r3, r1
 8004a2a:	f04f 0200 	mov.w	r2, #0
 8004a2e:	f04f 0300 	mov.w	r3, #0
 8004a32:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004a36:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004a3a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004a3e:	4690      	mov	r8, r2
 8004a40:	4699      	mov	r9, r3
 8004a42:	4623      	mov	r3, r4
 8004a44:	eb18 0303 	adds.w	r3, r8, r3
 8004a48:	60bb      	str	r3, [r7, #8]
 8004a4a:	462b      	mov	r3, r5
 8004a4c:	eb49 0303 	adc.w	r3, r9, r3
 8004a50:	60fb      	str	r3, [r7, #12]
 8004a52:	f04f 0200 	mov.w	r2, #0
 8004a56:	f04f 0300 	mov.w	r3, #0
 8004a5a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004a5e:	4629      	mov	r1, r5
 8004a60:	024b      	lsls	r3, r1, #9
 8004a62:	4621      	mov	r1, r4
 8004a64:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004a68:	4621      	mov	r1, r4
 8004a6a:	024a      	lsls	r2, r1, #9
 8004a6c:	4610      	mov	r0, r2
 8004a6e:	4619      	mov	r1, r3
 8004a70:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004a72:	2200      	movs	r2, #0
 8004a74:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004a76:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004a78:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004a7c:	f7fc f88a 	bl	8000b94 <__aeabi_uldivmod>
 8004a80:	4602      	mov	r2, r0
 8004a82:	460b      	mov	r3, r1
 8004a84:	4613      	mov	r3, r2
 8004a86:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004a88:	e058      	b.n	8004b3c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004a8a:	4b38      	ldr	r3, [pc, #224]	@ (8004b6c <HAL_RCC_GetSysClockFreq+0x200>)
 8004a8c:	685b      	ldr	r3, [r3, #4]
 8004a8e:	099b      	lsrs	r3, r3, #6
 8004a90:	2200      	movs	r2, #0
 8004a92:	4618      	mov	r0, r3
 8004a94:	4611      	mov	r1, r2
 8004a96:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004a9a:	623b      	str	r3, [r7, #32]
 8004a9c:	2300      	movs	r3, #0
 8004a9e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004aa0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004aa4:	4642      	mov	r2, r8
 8004aa6:	464b      	mov	r3, r9
 8004aa8:	f04f 0000 	mov.w	r0, #0
 8004aac:	f04f 0100 	mov.w	r1, #0
 8004ab0:	0159      	lsls	r1, r3, #5
 8004ab2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004ab6:	0150      	lsls	r0, r2, #5
 8004ab8:	4602      	mov	r2, r0
 8004aba:	460b      	mov	r3, r1
 8004abc:	4641      	mov	r1, r8
 8004abe:	ebb2 0a01 	subs.w	sl, r2, r1
 8004ac2:	4649      	mov	r1, r9
 8004ac4:	eb63 0b01 	sbc.w	fp, r3, r1
 8004ac8:	f04f 0200 	mov.w	r2, #0
 8004acc:	f04f 0300 	mov.w	r3, #0
 8004ad0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004ad4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004ad8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004adc:	ebb2 040a 	subs.w	r4, r2, sl
 8004ae0:	eb63 050b 	sbc.w	r5, r3, fp
 8004ae4:	f04f 0200 	mov.w	r2, #0
 8004ae8:	f04f 0300 	mov.w	r3, #0
 8004aec:	00eb      	lsls	r3, r5, #3
 8004aee:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004af2:	00e2      	lsls	r2, r4, #3
 8004af4:	4614      	mov	r4, r2
 8004af6:	461d      	mov	r5, r3
 8004af8:	4643      	mov	r3, r8
 8004afa:	18e3      	adds	r3, r4, r3
 8004afc:	603b      	str	r3, [r7, #0]
 8004afe:	464b      	mov	r3, r9
 8004b00:	eb45 0303 	adc.w	r3, r5, r3
 8004b04:	607b      	str	r3, [r7, #4]
 8004b06:	f04f 0200 	mov.w	r2, #0
 8004b0a:	f04f 0300 	mov.w	r3, #0
 8004b0e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004b12:	4629      	mov	r1, r5
 8004b14:	028b      	lsls	r3, r1, #10
 8004b16:	4621      	mov	r1, r4
 8004b18:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004b1c:	4621      	mov	r1, r4
 8004b1e:	028a      	lsls	r2, r1, #10
 8004b20:	4610      	mov	r0, r2
 8004b22:	4619      	mov	r1, r3
 8004b24:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004b26:	2200      	movs	r2, #0
 8004b28:	61bb      	str	r3, [r7, #24]
 8004b2a:	61fa      	str	r2, [r7, #28]
 8004b2c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004b30:	f7fc f830 	bl	8000b94 <__aeabi_uldivmod>
 8004b34:	4602      	mov	r2, r0
 8004b36:	460b      	mov	r3, r1
 8004b38:	4613      	mov	r3, r2
 8004b3a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8004b3c:	4b0b      	ldr	r3, [pc, #44]	@ (8004b6c <HAL_RCC_GetSysClockFreq+0x200>)
 8004b3e:	685b      	ldr	r3, [r3, #4]
 8004b40:	0c1b      	lsrs	r3, r3, #16
 8004b42:	f003 0303 	and.w	r3, r3, #3
 8004b46:	3301      	adds	r3, #1
 8004b48:	005b      	lsls	r3, r3, #1
 8004b4a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8004b4c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004b4e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004b50:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b54:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004b56:	e002      	b.n	8004b5e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004b58:	4b05      	ldr	r3, [pc, #20]	@ (8004b70 <HAL_RCC_GetSysClockFreq+0x204>)
 8004b5a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004b5c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004b5e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004b60:	4618      	mov	r0, r3
 8004b62:	3750      	adds	r7, #80	@ 0x50
 8004b64:	46bd      	mov	sp, r7
 8004b66:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004b6a:	bf00      	nop
 8004b6c:	40023800 	.word	0x40023800
 8004b70:	00f42400 	.word	0x00f42400
 8004b74:	007a1200 	.word	0x007a1200

08004b78 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004b78:	b480      	push	{r7}
 8004b7a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004b7c:	4b03      	ldr	r3, [pc, #12]	@ (8004b8c <HAL_RCC_GetHCLKFreq+0x14>)
 8004b7e:	681b      	ldr	r3, [r3, #0]
}
 8004b80:	4618      	mov	r0, r3
 8004b82:	46bd      	mov	sp, r7
 8004b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b88:	4770      	bx	lr
 8004b8a:	bf00      	nop
 8004b8c:	20000028 	.word	0x20000028

08004b90 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004b90:	b580      	push	{r7, lr}
 8004b92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004b94:	f7ff fff0 	bl	8004b78 <HAL_RCC_GetHCLKFreq>
 8004b98:	4602      	mov	r2, r0
 8004b9a:	4b05      	ldr	r3, [pc, #20]	@ (8004bb0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004b9c:	689b      	ldr	r3, [r3, #8]
 8004b9e:	0a9b      	lsrs	r3, r3, #10
 8004ba0:	f003 0307 	and.w	r3, r3, #7
 8004ba4:	4903      	ldr	r1, [pc, #12]	@ (8004bb4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004ba6:	5ccb      	ldrb	r3, [r1, r3]
 8004ba8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004bac:	4618      	mov	r0, r3
 8004bae:	bd80      	pop	{r7, pc}
 8004bb0:	40023800 	.word	0x40023800
 8004bb4:	08008c04 	.word	0x08008c04

08004bb8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004bb8:	b580      	push	{r7, lr}
 8004bba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004bbc:	f7ff ffdc 	bl	8004b78 <HAL_RCC_GetHCLKFreq>
 8004bc0:	4602      	mov	r2, r0
 8004bc2:	4b05      	ldr	r3, [pc, #20]	@ (8004bd8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004bc4:	689b      	ldr	r3, [r3, #8]
 8004bc6:	0b5b      	lsrs	r3, r3, #13
 8004bc8:	f003 0307 	and.w	r3, r3, #7
 8004bcc:	4903      	ldr	r1, [pc, #12]	@ (8004bdc <HAL_RCC_GetPCLK2Freq+0x24>)
 8004bce:	5ccb      	ldrb	r3, [r1, r3]
 8004bd0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004bd4:	4618      	mov	r0, r3
 8004bd6:	bd80      	pop	{r7, pc}
 8004bd8:	40023800 	.word	0x40023800
 8004bdc:	08008c04 	.word	0x08008c04

08004be0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004be0:	b580      	push	{r7, lr}
 8004be2:	b088      	sub	sp, #32
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004be8:	2300      	movs	r3, #0
 8004bea:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8004bec:	2300      	movs	r3, #0
 8004bee:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8004bf0:	2300      	movs	r3, #0
 8004bf2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8004bf4:	2300      	movs	r3, #0
 8004bf6:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8004bf8:	2300      	movs	r3, #0
 8004bfa:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	f003 0301 	and.w	r3, r3, #1
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d012      	beq.n	8004c2e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004c08:	4b69      	ldr	r3, [pc, #420]	@ (8004db0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c0a:	689b      	ldr	r3, [r3, #8]
 8004c0c:	4a68      	ldr	r2, [pc, #416]	@ (8004db0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c0e:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8004c12:	6093      	str	r3, [r2, #8]
 8004c14:	4b66      	ldr	r3, [pc, #408]	@ (8004db0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c16:	689a      	ldr	r2, [r3, #8]
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004c1c:	4964      	ldr	r1, [pc, #400]	@ (8004db0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c1e:	4313      	orrs	r3, r2
 8004c20:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d101      	bne.n	8004c2e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8004c2a:	2301      	movs	r3, #1
 8004c2c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d017      	beq.n	8004c6a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004c3a:	4b5d      	ldr	r3, [pc, #372]	@ (8004db0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c3c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004c40:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c48:	4959      	ldr	r1, [pc, #356]	@ (8004db0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c4a:	4313      	orrs	r3, r2
 8004c4c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c54:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004c58:	d101      	bne.n	8004c5e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8004c5a:	2301      	movs	r3, #1
 8004c5c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d101      	bne.n	8004c6a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8004c66:	2301      	movs	r3, #1
 8004c68:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d017      	beq.n	8004ca6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004c76:	4b4e      	ldr	r3, [pc, #312]	@ (8004db0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c78:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004c7c:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c84:	494a      	ldr	r1, [pc, #296]	@ (8004db0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004c86:	4313      	orrs	r3, r2
 8004c88:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c90:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004c94:	d101      	bne.n	8004c9a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8004c96:	2301      	movs	r3, #1
 8004c98:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d101      	bne.n	8004ca6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8004ca2:	2301      	movs	r3, #1
 8004ca4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d001      	beq.n	8004cb6 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8004cb2:	2301      	movs	r3, #1
 8004cb4:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	f003 0320 	and.w	r3, r3, #32
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	f000 808b 	beq.w	8004dda <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004cc4:	4b3a      	ldr	r3, [pc, #232]	@ (8004db0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004cc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cc8:	4a39      	ldr	r2, [pc, #228]	@ (8004db0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004cca:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004cce:	6413      	str	r3, [r2, #64]	@ 0x40
 8004cd0:	4b37      	ldr	r3, [pc, #220]	@ (8004db0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004cd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cd4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004cd8:	60bb      	str	r3, [r7, #8]
 8004cda:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004cdc:	4b35      	ldr	r3, [pc, #212]	@ (8004db4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	4a34      	ldr	r2, [pc, #208]	@ (8004db4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004ce2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004ce6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ce8:	f7fe f8ee 	bl	8002ec8 <HAL_GetTick>
 8004cec:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004cee:	e008      	b.n	8004d02 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004cf0:	f7fe f8ea 	bl	8002ec8 <HAL_GetTick>
 8004cf4:	4602      	mov	r2, r0
 8004cf6:	697b      	ldr	r3, [r7, #20]
 8004cf8:	1ad3      	subs	r3, r2, r3
 8004cfa:	2b64      	cmp	r3, #100	@ 0x64
 8004cfc:	d901      	bls.n	8004d02 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8004cfe:	2303      	movs	r3, #3
 8004d00:	e357      	b.n	80053b2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004d02:	4b2c      	ldr	r3, [pc, #176]	@ (8004db4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d0f0      	beq.n	8004cf0 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004d0e:	4b28      	ldr	r3, [pc, #160]	@ (8004db0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d10:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d12:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004d16:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004d18:	693b      	ldr	r3, [r7, #16]
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d035      	beq.n	8004d8a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d22:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004d26:	693a      	ldr	r2, [r7, #16]
 8004d28:	429a      	cmp	r2, r3
 8004d2a:	d02e      	beq.n	8004d8a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004d2c:	4b20      	ldr	r3, [pc, #128]	@ (8004db0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d2e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d30:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004d34:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004d36:	4b1e      	ldr	r3, [pc, #120]	@ (8004db0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d38:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d3a:	4a1d      	ldr	r2, [pc, #116]	@ (8004db0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d3c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004d40:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004d42:	4b1b      	ldr	r3, [pc, #108]	@ (8004db0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d44:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d46:	4a1a      	ldr	r2, [pc, #104]	@ (8004db0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d48:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004d4c:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8004d4e:	4a18      	ldr	r2, [pc, #96]	@ (8004db0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d50:	693b      	ldr	r3, [r7, #16]
 8004d52:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004d54:	4b16      	ldr	r3, [pc, #88]	@ (8004db0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d56:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d58:	f003 0301 	and.w	r3, r3, #1
 8004d5c:	2b01      	cmp	r3, #1
 8004d5e:	d114      	bne.n	8004d8a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d60:	f7fe f8b2 	bl	8002ec8 <HAL_GetTick>
 8004d64:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d66:	e00a      	b.n	8004d7e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004d68:	f7fe f8ae 	bl	8002ec8 <HAL_GetTick>
 8004d6c:	4602      	mov	r2, r0
 8004d6e:	697b      	ldr	r3, [r7, #20]
 8004d70:	1ad3      	subs	r3, r2, r3
 8004d72:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004d76:	4293      	cmp	r3, r2
 8004d78:	d901      	bls.n	8004d7e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8004d7a:	2303      	movs	r3, #3
 8004d7c:	e319      	b.n	80053b2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d7e:	4b0c      	ldr	r3, [pc, #48]	@ (8004db0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d80:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d82:	f003 0302 	and.w	r3, r3, #2
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d0ee      	beq.n	8004d68 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d8e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004d92:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004d96:	d111      	bne.n	8004dbc <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8004d98:	4b05      	ldr	r3, [pc, #20]	@ (8004db0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d9a:	689b      	ldr	r3, [r3, #8]
 8004d9c:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8004da4:	4b04      	ldr	r3, [pc, #16]	@ (8004db8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004da6:	400b      	ands	r3, r1
 8004da8:	4901      	ldr	r1, [pc, #4]	@ (8004db0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004daa:	4313      	orrs	r3, r2
 8004dac:	608b      	str	r3, [r1, #8]
 8004dae:	e00b      	b.n	8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8004db0:	40023800 	.word	0x40023800
 8004db4:	40007000 	.word	0x40007000
 8004db8:	0ffffcff 	.word	0x0ffffcff
 8004dbc:	4baa      	ldr	r3, [pc, #680]	@ (8005068 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004dbe:	689b      	ldr	r3, [r3, #8]
 8004dc0:	4aa9      	ldr	r2, [pc, #676]	@ (8005068 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004dc2:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8004dc6:	6093      	str	r3, [r2, #8]
 8004dc8:	4ba7      	ldr	r3, [pc, #668]	@ (8005068 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004dca:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004dd0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004dd4:	49a4      	ldr	r1, [pc, #656]	@ (8005068 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004dd6:	4313      	orrs	r3, r2
 8004dd8:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	f003 0310 	and.w	r3, r3, #16
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d010      	beq.n	8004e08 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004de6:	4ba0      	ldr	r3, [pc, #640]	@ (8005068 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004de8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004dec:	4a9e      	ldr	r2, [pc, #632]	@ (8005068 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004dee:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004df2:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8004df6:	4b9c      	ldr	r3, [pc, #624]	@ (8005068 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004df8:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e00:	4999      	ldr	r1, [pc, #612]	@ (8005068 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004e02:	4313      	orrs	r3, r2
 8004e04:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d00a      	beq.n	8004e2a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004e14:	4b94      	ldr	r3, [pc, #592]	@ (8005068 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004e16:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e1a:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004e22:	4991      	ldr	r1, [pc, #580]	@ (8005068 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004e24:	4313      	orrs	r3, r2
 8004e26:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d00a      	beq.n	8004e4c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004e36:	4b8c      	ldr	r3, [pc, #560]	@ (8005068 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004e38:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e3c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004e44:	4988      	ldr	r1, [pc, #544]	@ (8005068 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004e46:	4313      	orrs	r3, r2
 8004e48:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d00a      	beq.n	8004e6e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004e58:	4b83      	ldr	r3, [pc, #524]	@ (8005068 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004e5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e5e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004e66:	4980      	ldr	r1, [pc, #512]	@ (8005068 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004e68:	4313      	orrs	r3, r2
 8004e6a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d00a      	beq.n	8004e90 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004e7a:	4b7b      	ldr	r3, [pc, #492]	@ (8005068 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004e7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e80:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e88:	4977      	ldr	r1, [pc, #476]	@ (8005068 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004e8a:	4313      	orrs	r3, r2
 8004e8c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d00a      	beq.n	8004eb2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004e9c:	4b72      	ldr	r3, [pc, #456]	@ (8005068 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004e9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ea2:	f023 0203 	bic.w	r2, r3, #3
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004eaa:	496f      	ldr	r1, [pc, #444]	@ (8005068 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004eac:	4313      	orrs	r3, r2
 8004eae:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d00a      	beq.n	8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004ebe:	4b6a      	ldr	r3, [pc, #424]	@ (8005068 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004ec0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ec4:	f023 020c 	bic.w	r2, r3, #12
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004ecc:	4966      	ldr	r1, [pc, #408]	@ (8005068 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004ece:	4313      	orrs	r3, r2
 8004ed0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d00a      	beq.n	8004ef6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004ee0:	4b61      	ldr	r3, [pc, #388]	@ (8005068 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004ee2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ee6:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004eee:	495e      	ldr	r1, [pc, #376]	@ (8005068 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004ef0:	4313      	orrs	r3, r2
 8004ef2:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d00a      	beq.n	8004f18 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004f02:	4b59      	ldr	r3, [pc, #356]	@ (8005068 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004f04:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f08:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004f10:	4955      	ldr	r1, [pc, #340]	@ (8005068 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004f12:	4313      	orrs	r3, r2
 8004f14:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d00a      	beq.n	8004f3a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004f24:	4b50      	ldr	r3, [pc, #320]	@ (8005068 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004f26:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f2a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f32:	494d      	ldr	r1, [pc, #308]	@ (8005068 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004f34:	4313      	orrs	r3, r2
 8004f36:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d00a      	beq.n	8004f5c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8004f46:	4b48      	ldr	r3, [pc, #288]	@ (8005068 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004f48:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f4c:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f54:	4944      	ldr	r1, [pc, #272]	@ (8005068 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004f56:	4313      	orrs	r3, r2
 8004f58:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d00a      	beq.n	8004f7e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004f68:	4b3f      	ldr	r3, [pc, #252]	@ (8005068 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004f6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f6e:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004f76:	493c      	ldr	r1, [pc, #240]	@ (8005068 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004f78:	4313      	orrs	r3, r2
 8004f7a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d00a      	beq.n	8004fa0 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8004f8a:	4b37      	ldr	r3, [pc, #220]	@ (8005068 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004f8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f90:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004f98:	4933      	ldr	r1, [pc, #204]	@ (8005068 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004f9a:	4313      	orrs	r3, r2
 8004f9c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d00a      	beq.n	8004fc2 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004fac:	4b2e      	ldr	r3, [pc, #184]	@ (8005068 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004fae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004fb2:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004fba:	492b      	ldr	r1, [pc, #172]	@ (8005068 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004fbc:	4313      	orrs	r3, r2
 8004fbe:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d011      	beq.n	8004ff2 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004fce:	4b26      	ldr	r3, [pc, #152]	@ (8005068 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004fd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004fd4:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004fdc:	4922      	ldr	r1, [pc, #136]	@ (8005068 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8004fde:	4313      	orrs	r3, r2
 8004fe0:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004fe8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004fec:	d101      	bne.n	8004ff2 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8004fee:	2301      	movs	r3, #1
 8004ff0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	f003 0308 	and.w	r3, r3, #8
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d001      	beq.n	8005002 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8004ffe:	2301      	movs	r3, #1
 8005000:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800500a:	2b00      	cmp	r3, #0
 800500c:	d00a      	beq.n	8005024 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800500e:	4b16      	ldr	r3, [pc, #88]	@ (8005068 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005010:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005014:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800501c:	4912      	ldr	r1, [pc, #72]	@ (8005068 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800501e:	4313      	orrs	r3, r2
 8005020:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800502c:	2b00      	cmp	r3, #0
 800502e:	d00b      	beq.n	8005048 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005030:	4b0d      	ldr	r3, [pc, #52]	@ (8005068 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005032:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005036:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005040:	4909      	ldr	r1, [pc, #36]	@ (8005068 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005042:	4313      	orrs	r3, r2
 8005044:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005048:	69fb      	ldr	r3, [r7, #28]
 800504a:	2b01      	cmp	r3, #1
 800504c:	d006      	beq.n	800505c <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005056:	2b00      	cmp	r3, #0
 8005058:	f000 80d9 	beq.w	800520e <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800505c:	4b02      	ldr	r3, [pc, #8]	@ (8005068 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	4a01      	ldr	r2, [pc, #4]	@ (8005068 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005062:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005066:	e001      	b.n	800506c <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8005068:	40023800 	.word	0x40023800
 800506c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800506e:	f7fd ff2b 	bl	8002ec8 <HAL_GetTick>
 8005072:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005074:	e008      	b.n	8005088 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005076:	f7fd ff27 	bl	8002ec8 <HAL_GetTick>
 800507a:	4602      	mov	r2, r0
 800507c:	697b      	ldr	r3, [r7, #20]
 800507e:	1ad3      	subs	r3, r2, r3
 8005080:	2b64      	cmp	r3, #100	@ 0x64
 8005082:	d901      	bls.n	8005088 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005084:	2303      	movs	r3, #3
 8005086:	e194      	b.n	80053b2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005088:	4b6c      	ldr	r3, [pc, #432]	@ (800523c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005090:	2b00      	cmp	r3, #0
 8005092:	d1f0      	bne.n	8005076 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	f003 0301 	and.w	r3, r3, #1
 800509c:	2b00      	cmp	r3, #0
 800509e:	d021      	beq.n	80050e4 <HAL_RCCEx_PeriphCLKConfig+0x504>
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d11d      	bne.n	80050e4 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80050a8:	4b64      	ldr	r3, [pc, #400]	@ (800523c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80050aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80050ae:	0c1b      	lsrs	r3, r3, #16
 80050b0:	f003 0303 	and.w	r3, r3, #3
 80050b4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80050b6:	4b61      	ldr	r3, [pc, #388]	@ (800523c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80050b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80050bc:	0e1b      	lsrs	r3, r3, #24
 80050be:	f003 030f 	and.w	r3, r3, #15
 80050c2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	685b      	ldr	r3, [r3, #4]
 80050c8:	019a      	lsls	r2, r3, #6
 80050ca:	693b      	ldr	r3, [r7, #16]
 80050cc:	041b      	lsls	r3, r3, #16
 80050ce:	431a      	orrs	r2, r3
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	061b      	lsls	r3, r3, #24
 80050d4:	431a      	orrs	r2, r3
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	689b      	ldr	r3, [r3, #8]
 80050da:	071b      	lsls	r3, r3, #28
 80050dc:	4957      	ldr	r1, [pc, #348]	@ (800523c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80050de:	4313      	orrs	r3, r2
 80050e0:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d004      	beq.n	80050fa <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80050f4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80050f8:	d00a      	beq.n	8005110 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005102:	2b00      	cmp	r3, #0
 8005104:	d02e      	beq.n	8005164 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800510a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800510e:	d129      	bne.n	8005164 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005110:	4b4a      	ldr	r3, [pc, #296]	@ (800523c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005112:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005116:	0c1b      	lsrs	r3, r3, #16
 8005118:	f003 0303 	and.w	r3, r3, #3
 800511c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800511e:	4b47      	ldr	r3, [pc, #284]	@ (800523c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005120:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005124:	0f1b      	lsrs	r3, r3, #28
 8005126:	f003 0307 	and.w	r3, r3, #7
 800512a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	685b      	ldr	r3, [r3, #4]
 8005130:	019a      	lsls	r2, r3, #6
 8005132:	693b      	ldr	r3, [r7, #16]
 8005134:	041b      	lsls	r3, r3, #16
 8005136:	431a      	orrs	r2, r3
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	68db      	ldr	r3, [r3, #12]
 800513c:	061b      	lsls	r3, r3, #24
 800513e:	431a      	orrs	r2, r3
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	071b      	lsls	r3, r3, #28
 8005144:	493d      	ldr	r1, [pc, #244]	@ (800523c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005146:	4313      	orrs	r3, r2
 8005148:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800514c:	4b3b      	ldr	r3, [pc, #236]	@ (800523c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800514e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005152:	f023 021f 	bic.w	r2, r3, #31
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800515a:	3b01      	subs	r3, #1
 800515c:	4937      	ldr	r1, [pc, #220]	@ (800523c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800515e:	4313      	orrs	r3, r2
 8005160:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800516c:	2b00      	cmp	r3, #0
 800516e:	d01d      	beq.n	80051ac <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005170:	4b32      	ldr	r3, [pc, #200]	@ (800523c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005172:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005176:	0e1b      	lsrs	r3, r3, #24
 8005178:	f003 030f 	and.w	r3, r3, #15
 800517c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800517e:	4b2f      	ldr	r3, [pc, #188]	@ (800523c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005180:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005184:	0f1b      	lsrs	r3, r3, #28
 8005186:	f003 0307 	and.w	r3, r3, #7
 800518a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	685b      	ldr	r3, [r3, #4]
 8005190:	019a      	lsls	r2, r3, #6
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	691b      	ldr	r3, [r3, #16]
 8005196:	041b      	lsls	r3, r3, #16
 8005198:	431a      	orrs	r2, r3
 800519a:	693b      	ldr	r3, [r7, #16]
 800519c:	061b      	lsls	r3, r3, #24
 800519e:	431a      	orrs	r2, r3
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	071b      	lsls	r3, r3, #28
 80051a4:	4925      	ldr	r1, [pc, #148]	@ (800523c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80051a6:	4313      	orrs	r3, r2
 80051a8:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d011      	beq.n	80051dc <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	685b      	ldr	r3, [r3, #4]
 80051bc:	019a      	lsls	r2, r3, #6
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	691b      	ldr	r3, [r3, #16]
 80051c2:	041b      	lsls	r3, r3, #16
 80051c4:	431a      	orrs	r2, r3
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	68db      	ldr	r3, [r3, #12]
 80051ca:	061b      	lsls	r3, r3, #24
 80051cc:	431a      	orrs	r2, r3
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	689b      	ldr	r3, [r3, #8]
 80051d2:	071b      	lsls	r3, r3, #28
 80051d4:	4919      	ldr	r1, [pc, #100]	@ (800523c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80051d6:	4313      	orrs	r3, r2
 80051d8:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80051dc:	4b17      	ldr	r3, [pc, #92]	@ (800523c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	4a16      	ldr	r2, [pc, #88]	@ (800523c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80051e2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80051e6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80051e8:	f7fd fe6e 	bl	8002ec8 <HAL_GetTick>
 80051ec:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80051ee:	e008      	b.n	8005202 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80051f0:	f7fd fe6a 	bl	8002ec8 <HAL_GetTick>
 80051f4:	4602      	mov	r2, r0
 80051f6:	697b      	ldr	r3, [r7, #20]
 80051f8:	1ad3      	subs	r3, r2, r3
 80051fa:	2b64      	cmp	r3, #100	@ 0x64
 80051fc:	d901      	bls.n	8005202 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80051fe:	2303      	movs	r3, #3
 8005200:	e0d7      	b.n	80053b2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005202:	4b0e      	ldr	r3, [pc, #56]	@ (800523c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800520a:	2b00      	cmp	r3, #0
 800520c:	d0f0      	beq.n	80051f0 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800520e:	69bb      	ldr	r3, [r7, #24]
 8005210:	2b01      	cmp	r3, #1
 8005212:	f040 80cd 	bne.w	80053b0 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005216:	4b09      	ldr	r3, [pc, #36]	@ (800523c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	4a08      	ldr	r2, [pc, #32]	@ (800523c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800521c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005220:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005222:	f7fd fe51 	bl	8002ec8 <HAL_GetTick>
 8005226:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005228:	e00a      	b.n	8005240 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800522a:	f7fd fe4d 	bl	8002ec8 <HAL_GetTick>
 800522e:	4602      	mov	r2, r0
 8005230:	697b      	ldr	r3, [r7, #20]
 8005232:	1ad3      	subs	r3, r2, r3
 8005234:	2b64      	cmp	r3, #100	@ 0x64
 8005236:	d903      	bls.n	8005240 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005238:	2303      	movs	r3, #3
 800523a:	e0ba      	b.n	80053b2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 800523c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005240:	4b5e      	ldr	r3, [pc, #376]	@ (80053bc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005248:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800524c:	d0ed      	beq.n	800522a <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005256:	2b00      	cmp	r3, #0
 8005258:	d003      	beq.n	8005262 <HAL_RCCEx_PeriphCLKConfig+0x682>
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800525e:	2b00      	cmp	r3, #0
 8005260:	d009      	beq.n	8005276 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800526a:	2b00      	cmp	r3, #0
 800526c:	d02e      	beq.n	80052cc <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005272:	2b00      	cmp	r3, #0
 8005274:	d12a      	bne.n	80052cc <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005276:	4b51      	ldr	r3, [pc, #324]	@ (80053bc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005278:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800527c:	0c1b      	lsrs	r3, r3, #16
 800527e:	f003 0303 	and.w	r3, r3, #3
 8005282:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005284:	4b4d      	ldr	r3, [pc, #308]	@ (80053bc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005286:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800528a:	0f1b      	lsrs	r3, r3, #28
 800528c:	f003 0307 	and.w	r3, r3, #7
 8005290:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	695b      	ldr	r3, [r3, #20]
 8005296:	019a      	lsls	r2, r3, #6
 8005298:	693b      	ldr	r3, [r7, #16]
 800529a:	041b      	lsls	r3, r3, #16
 800529c:	431a      	orrs	r2, r3
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	699b      	ldr	r3, [r3, #24]
 80052a2:	061b      	lsls	r3, r3, #24
 80052a4:	431a      	orrs	r2, r3
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	071b      	lsls	r3, r3, #28
 80052aa:	4944      	ldr	r1, [pc, #272]	@ (80053bc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80052ac:	4313      	orrs	r3, r2
 80052ae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80052b2:	4b42      	ldr	r3, [pc, #264]	@ (80053bc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80052b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80052b8:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052c0:	3b01      	subs	r3, #1
 80052c2:	021b      	lsls	r3, r3, #8
 80052c4:	493d      	ldr	r1, [pc, #244]	@ (80053bc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80052c6:	4313      	orrs	r3, r2
 80052c8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d022      	beq.n	800531e <HAL_RCCEx_PeriphCLKConfig+0x73e>
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80052dc:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80052e0:	d11d      	bne.n	800531e <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80052e2:	4b36      	ldr	r3, [pc, #216]	@ (80053bc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80052e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80052e8:	0e1b      	lsrs	r3, r3, #24
 80052ea:	f003 030f 	and.w	r3, r3, #15
 80052ee:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80052f0:	4b32      	ldr	r3, [pc, #200]	@ (80053bc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80052f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80052f6:	0f1b      	lsrs	r3, r3, #28
 80052f8:	f003 0307 	and.w	r3, r3, #7
 80052fc:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	695b      	ldr	r3, [r3, #20]
 8005302:	019a      	lsls	r2, r3, #6
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	6a1b      	ldr	r3, [r3, #32]
 8005308:	041b      	lsls	r3, r3, #16
 800530a:	431a      	orrs	r2, r3
 800530c:	693b      	ldr	r3, [r7, #16]
 800530e:	061b      	lsls	r3, r3, #24
 8005310:	431a      	orrs	r2, r3
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	071b      	lsls	r3, r3, #28
 8005316:	4929      	ldr	r1, [pc, #164]	@ (80053bc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005318:	4313      	orrs	r3, r2
 800531a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	f003 0308 	and.w	r3, r3, #8
 8005326:	2b00      	cmp	r3, #0
 8005328:	d028      	beq.n	800537c <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800532a:	4b24      	ldr	r3, [pc, #144]	@ (80053bc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800532c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005330:	0e1b      	lsrs	r3, r3, #24
 8005332:	f003 030f 	and.w	r3, r3, #15
 8005336:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005338:	4b20      	ldr	r3, [pc, #128]	@ (80053bc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800533a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800533e:	0c1b      	lsrs	r3, r3, #16
 8005340:	f003 0303 	and.w	r3, r3, #3
 8005344:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	695b      	ldr	r3, [r3, #20]
 800534a:	019a      	lsls	r2, r3, #6
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	041b      	lsls	r3, r3, #16
 8005350:	431a      	orrs	r2, r3
 8005352:	693b      	ldr	r3, [r7, #16]
 8005354:	061b      	lsls	r3, r3, #24
 8005356:	431a      	orrs	r2, r3
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	69db      	ldr	r3, [r3, #28]
 800535c:	071b      	lsls	r3, r3, #28
 800535e:	4917      	ldr	r1, [pc, #92]	@ (80053bc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005360:	4313      	orrs	r3, r2
 8005362:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005366:	4b15      	ldr	r3, [pc, #84]	@ (80053bc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005368:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800536c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005374:	4911      	ldr	r1, [pc, #68]	@ (80053bc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005376:	4313      	orrs	r3, r2
 8005378:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800537c:	4b0f      	ldr	r3, [pc, #60]	@ (80053bc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	4a0e      	ldr	r2, [pc, #56]	@ (80053bc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005382:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005386:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005388:	f7fd fd9e 	bl	8002ec8 <HAL_GetTick>
 800538c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800538e:	e008      	b.n	80053a2 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005390:	f7fd fd9a 	bl	8002ec8 <HAL_GetTick>
 8005394:	4602      	mov	r2, r0
 8005396:	697b      	ldr	r3, [r7, #20]
 8005398:	1ad3      	subs	r3, r2, r3
 800539a:	2b64      	cmp	r3, #100	@ 0x64
 800539c:	d901      	bls.n	80053a2 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800539e:	2303      	movs	r3, #3
 80053a0:	e007      	b.n	80053b2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80053a2:	4b06      	ldr	r3, [pc, #24]	@ (80053bc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80053aa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80053ae:	d1ef      	bne.n	8005390 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 80053b0:	2300      	movs	r3, #0
}
 80053b2:	4618      	mov	r0, r3
 80053b4:	3720      	adds	r7, #32
 80053b6:	46bd      	mov	sp, r7
 80053b8:	bd80      	pop	{r7, pc}
 80053ba:	bf00      	nop
 80053bc:	40023800 	.word	0x40023800

080053c0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80053c0:	b580      	push	{r7, lr}
 80053c2:	b082      	sub	sp, #8
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d101      	bne.n	80053d2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80053ce:	2301      	movs	r3, #1
 80053d0:	e049      	b.n	8005466 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80053d8:	b2db      	uxtb	r3, r3
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d106      	bne.n	80053ec <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	2200      	movs	r2, #0
 80053e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80053e6:	6878      	ldr	r0, [r7, #4]
 80053e8:	f7fd fb2e 	bl	8002a48 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	2202      	movs	r2, #2
 80053f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681a      	ldr	r2, [r3, #0]
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	3304      	adds	r3, #4
 80053fc:	4619      	mov	r1, r3
 80053fe:	4610      	mov	r0, r2
 8005400:	f000 fdc8 	bl	8005f94 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	2201      	movs	r2, #1
 8005408:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	2201      	movs	r2, #1
 8005410:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	2201      	movs	r2, #1
 8005418:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	2201      	movs	r2, #1
 8005420:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	2201      	movs	r2, #1
 8005428:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	2201      	movs	r2, #1
 8005430:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	2201      	movs	r2, #1
 8005438:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	2201      	movs	r2, #1
 8005440:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	2201      	movs	r2, #1
 8005448:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	2201      	movs	r2, #1
 8005450:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	2201      	movs	r2, #1
 8005458:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	2201      	movs	r2, #1
 8005460:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005464:	2300      	movs	r3, #0
}
 8005466:	4618      	mov	r0, r3
 8005468:	3708      	adds	r7, #8
 800546a:	46bd      	mov	sp, r7
 800546c:	bd80      	pop	{r7, pc}
	...

08005470 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005470:	b480      	push	{r7}
 8005472:	b085      	sub	sp, #20
 8005474:	af00      	add	r7, sp, #0
 8005476:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800547e:	b2db      	uxtb	r3, r3
 8005480:	2b01      	cmp	r3, #1
 8005482:	d001      	beq.n	8005488 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005484:	2301      	movs	r3, #1
 8005486:	e054      	b.n	8005532 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	2202      	movs	r2, #2
 800548c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	68da      	ldr	r2, [r3, #12]
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	f042 0201 	orr.w	r2, r2, #1
 800549e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	4a26      	ldr	r2, [pc, #152]	@ (8005540 <HAL_TIM_Base_Start_IT+0xd0>)
 80054a6:	4293      	cmp	r3, r2
 80054a8:	d022      	beq.n	80054f0 <HAL_TIM_Base_Start_IT+0x80>
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80054b2:	d01d      	beq.n	80054f0 <HAL_TIM_Base_Start_IT+0x80>
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	4a22      	ldr	r2, [pc, #136]	@ (8005544 <HAL_TIM_Base_Start_IT+0xd4>)
 80054ba:	4293      	cmp	r3, r2
 80054bc:	d018      	beq.n	80054f0 <HAL_TIM_Base_Start_IT+0x80>
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	4a21      	ldr	r2, [pc, #132]	@ (8005548 <HAL_TIM_Base_Start_IT+0xd8>)
 80054c4:	4293      	cmp	r3, r2
 80054c6:	d013      	beq.n	80054f0 <HAL_TIM_Base_Start_IT+0x80>
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	4a1f      	ldr	r2, [pc, #124]	@ (800554c <HAL_TIM_Base_Start_IT+0xdc>)
 80054ce:	4293      	cmp	r3, r2
 80054d0:	d00e      	beq.n	80054f0 <HAL_TIM_Base_Start_IT+0x80>
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	4a1e      	ldr	r2, [pc, #120]	@ (8005550 <HAL_TIM_Base_Start_IT+0xe0>)
 80054d8:	4293      	cmp	r3, r2
 80054da:	d009      	beq.n	80054f0 <HAL_TIM_Base_Start_IT+0x80>
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	4a1c      	ldr	r2, [pc, #112]	@ (8005554 <HAL_TIM_Base_Start_IT+0xe4>)
 80054e2:	4293      	cmp	r3, r2
 80054e4:	d004      	beq.n	80054f0 <HAL_TIM_Base_Start_IT+0x80>
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	4a1b      	ldr	r2, [pc, #108]	@ (8005558 <HAL_TIM_Base_Start_IT+0xe8>)
 80054ec:	4293      	cmp	r3, r2
 80054ee:	d115      	bne.n	800551c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	689a      	ldr	r2, [r3, #8]
 80054f6:	4b19      	ldr	r3, [pc, #100]	@ (800555c <HAL_TIM_Base_Start_IT+0xec>)
 80054f8:	4013      	ands	r3, r2
 80054fa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	2b06      	cmp	r3, #6
 8005500:	d015      	beq.n	800552e <HAL_TIM_Base_Start_IT+0xbe>
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005508:	d011      	beq.n	800552e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	681a      	ldr	r2, [r3, #0]
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	f042 0201 	orr.w	r2, r2, #1
 8005518:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800551a:	e008      	b.n	800552e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	681a      	ldr	r2, [r3, #0]
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	f042 0201 	orr.w	r2, r2, #1
 800552a:	601a      	str	r2, [r3, #0]
 800552c:	e000      	b.n	8005530 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800552e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005530:	2300      	movs	r3, #0
}
 8005532:	4618      	mov	r0, r3
 8005534:	3714      	adds	r7, #20
 8005536:	46bd      	mov	sp, r7
 8005538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800553c:	4770      	bx	lr
 800553e:	bf00      	nop
 8005540:	40010000 	.word	0x40010000
 8005544:	40000400 	.word	0x40000400
 8005548:	40000800 	.word	0x40000800
 800554c:	40000c00 	.word	0x40000c00
 8005550:	40010400 	.word	0x40010400
 8005554:	40014000 	.word	0x40014000
 8005558:	40001800 	.word	0x40001800
 800555c:	00010007 	.word	0x00010007

08005560 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8005560:	b480      	push	{r7}
 8005562:	b083      	sub	sp, #12
 8005564:	af00      	add	r7, sp, #0
 8005566:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	68da      	ldr	r2, [r3, #12]
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	f022 0201 	bic.w	r2, r2, #1
 8005576:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	6a1a      	ldr	r2, [r3, #32]
 800557e:	4b0f      	ldr	r3, [pc, #60]	@ (80055bc <HAL_TIM_Base_Stop_IT+0x5c>)
 8005580:	4013      	ands	r3, r2
 8005582:	2b00      	cmp	r3, #0
 8005584:	d10f      	bne.n	80055a6 <HAL_TIM_Base_Stop_IT+0x46>
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	6a1a      	ldr	r2, [r3, #32]
 800558c:	f240 4344 	movw	r3, #1092	@ 0x444
 8005590:	4013      	ands	r3, r2
 8005592:	2b00      	cmp	r3, #0
 8005594:	d107      	bne.n	80055a6 <HAL_TIM_Base_Stop_IT+0x46>
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	681a      	ldr	r2, [r3, #0]
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	f022 0201 	bic.w	r2, r2, #1
 80055a4:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	2201      	movs	r2, #1
 80055aa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 80055ae:	2300      	movs	r3, #0
}
 80055b0:	4618      	mov	r0, r3
 80055b2:	370c      	adds	r7, #12
 80055b4:	46bd      	mov	sp, r7
 80055b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ba:	4770      	bx	lr
 80055bc:	00111111 	.word	0x00111111

080055c0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80055c0:	b580      	push	{r7, lr}
 80055c2:	b082      	sub	sp, #8
 80055c4:	af00      	add	r7, sp, #0
 80055c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d101      	bne.n	80055d2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80055ce:	2301      	movs	r3, #1
 80055d0:	e049      	b.n	8005666 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80055d8:	b2db      	uxtb	r3, r3
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d106      	bne.n	80055ec <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	2200      	movs	r2, #0
 80055e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80055e6:	6878      	ldr	r0, [r7, #4]
 80055e8:	f000 f841 	bl	800566e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	2202      	movs	r2, #2
 80055f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681a      	ldr	r2, [r3, #0]
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	3304      	adds	r3, #4
 80055fc:	4619      	mov	r1, r3
 80055fe:	4610      	mov	r0, r2
 8005600:	f000 fcc8 	bl	8005f94 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	2201      	movs	r2, #1
 8005608:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	2201      	movs	r2, #1
 8005610:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	2201      	movs	r2, #1
 8005618:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	2201      	movs	r2, #1
 8005620:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	2201      	movs	r2, #1
 8005628:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	2201      	movs	r2, #1
 8005630:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	2201      	movs	r2, #1
 8005638:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	2201      	movs	r2, #1
 8005640:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	2201      	movs	r2, #1
 8005648:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	2201      	movs	r2, #1
 8005650:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	2201      	movs	r2, #1
 8005658:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	2201      	movs	r2, #1
 8005660:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005664:	2300      	movs	r3, #0
}
 8005666:	4618      	mov	r0, r3
 8005668:	3708      	adds	r7, #8
 800566a:	46bd      	mov	sp, r7
 800566c:	bd80      	pop	{r7, pc}

0800566e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800566e:	b480      	push	{r7}
 8005670:	b083      	sub	sp, #12
 8005672:	af00      	add	r7, sp, #0
 8005674:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005676:	bf00      	nop
 8005678:	370c      	adds	r7, #12
 800567a:	46bd      	mov	sp, r7
 800567c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005680:	4770      	bx	lr
	...

08005684 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005684:	b580      	push	{r7, lr}
 8005686:	b084      	sub	sp, #16
 8005688:	af00      	add	r7, sp, #0
 800568a:	6078      	str	r0, [r7, #4]
 800568c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800568e:	683b      	ldr	r3, [r7, #0]
 8005690:	2b00      	cmp	r3, #0
 8005692:	d109      	bne.n	80056a8 <HAL_TIM_PWM_Start+0x24>
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800569a:	b2db      	uxtb	r3, r3
 800569c:	2b01      	cmp	r3, #1
 800569e:	bf14      	ite	ne
 80056a0:	2301      	movne	r3, #1
 80056a2:	2300      	moveq	r3, #0
 80056a4:	b2db      	uxtb	r3, r3
 80056a6:	e03c      	b.n	8005722 <HAL_TIM_PWM_Start+0x9e>
 80056a8:	683b      	ldr	r3, [r7, #0]
 80056aa:	2b04      	cmp	r3, #4
 80056ac:	d109      	bne.n	80056c2 <HAL_TIM_PWM_Start+0x3e>
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80056b4:	b2db      	uxtb	r3, r3
 80056b6:	2b01      	cmp	r3, #1
 80056b8:	bf14      	ite	ne
 80056ba:	2301      	movne	r3, #1
 80056bc:	2300      	moveq	r3, #0
 80056be:	b2db      	uxtb	r3, r3
 80056c0:	e02f      	b.n	8005722 <HAL_TIM_PWM_Start+0x9e>
 80056c2:	683b      	ldr	r3, [r7, #0]
 80056c4:	2b08      	cmp	r3, #8
 80056c6:	d109      	bne.n	80056dc <HAL_TIM_PWM_Start+0x58>
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80056ce:	b2db      	uxtb	r3, r3
 80056d0:	2b01      	cmp	r3, #1
 80056d2:	bf14      	ite	ne
 80056d4:	2301      	movne	r3, #1
 80056d6:	2300      	moveq	r3, #0
 80056d8:	b2db      	uxtb	r3, r3
 80056da:	e022      	b.n	8005722 <HAL_TIM_PWM_Start+0x9e>
 80056dc:	683b      	ldr	r3, [r7, #0]
 80056de:	2b0c      	cmp	r3, #12
 80056e0:	d109      	bne.n	80056f6 <HAL_TIM_PWM_Start+0x72>
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80056e8:	b2db      	uxtb	r3, r3
 80056ea:	2b01      	cmp	r3, #1
 80056ec:	bf14      	ite	ne
 80056ee:	2301      	movne	r3, #1
 80056f0:	2300      	moveq	r3, #0
 80056f2:	b2db      	uxtb	r3, r3
 80056f4:	e015      	b.n	8005722 <HAL_TIM_PWM_Start+0x9e>
 80056f6:	683b      	ldr	r3, [r7, #0]
 80056f8:	2b10      	cmp	r3, #16
 80056fa:	d109      	bne.n	8005710 <HAL_TIM_PWM_Start+0x8c>
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005702:	b2db      	uxtb	r3, r3
 8005704:	2b01      	cmp	r3, #1
 8005706:	bf14      	ite	ne
 8005708:	2301      	movne	r3, #1
 800570a:	2300      	moveq	r3, #0
 800570c:	b2db      	uxtb	r3, r3
 800570e:	e008      	b.n	8005722 <HAL_TIM_PWM_Start+0x9e>
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8005716:	b2db      	uxtb	r3, r3
 8005718:	2b01      	cmp	r3, #1
 800571a:	bf14      	ite	ne
 800571c:	2301      	movne	r3, #1
 800571e:	2300      	moveq	r3, #0
 8005720:	b2db      	uxtb	r3, r3
 8005722:	2b00      	cmp	r3, #0
 8005724:	d001      	beq.n	800572a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8005726:	2301      	movs	r3, #1
 8005728:	e092      	b.n	8005850 <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800572a:	683b      	ldr	r3, [r7, #0]
 800572c:	2b00      	cmp	r3, #0
 800572e:	d104      	bne.n	800573a <HAL_TIM_PWM_Start+0xb6>
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	2202      	movs	r2, #2
 8005734:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005738:	e023      	b.n	8005782 <HAL_TIM_PWM_Start+0xfe>
 800573a:	683b      	ldr	r3, [r7, #0]
 800573c:	2b04      	cmp	r3, #4
 800573e:	d104      	bne.n	800574a <HAL_TIM_PWM_Start+0xc6>
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	2202      	movs	r2, #2
 8005744:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005748:	e01b      	b.n	8005782 <HAL_TIM_PWM_Start+0xfe>
 800574a:	683b      	ldr	r3, [r7, #0]
 800574c:	2b08      	cmp	r3, #8
 800574e:	d104      	bne.n	800575a <HAL_TIM_PWM_Start+0xd6>
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	2202      	movs	r2, #2
 8005754:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005758:	e013      	b.n	8005782 <HAL_TIM_PWM_Start+0xfe>
 800575a:	683b      	ldr	r3, [r7, #0]
 800575c:	2b0c      	cmp	r3, #12
 800575e:	d104      	bne.n	800576a <HAL_TIM_PWM_Start+0xe6>
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	2202      	movs	r2, #2
 8005764:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005768:	e00b      	b.n	8005782 <HAL_TIM_PWM_Start+0xfe>
 800576a:	683b      	ldr	r3, [r7, #0]
 800576c:	2b10      	cmp	r3, #16
 800576e:	d104      	bne.n	800577a <HAL_TIM_PWM_Start+0xf6>
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	2202      	movs	r2, #2
 8005774:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005778:	e003      	b.n	8005782 <HAL_TIM_PWM_Start+0xfe>
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	2202      	movs	r2, #2
 800577e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	2201      	movs	r2, #1
 8005788:	6839      	ldr	r1, [r7, #0]
 800578a:	4618      	mov	r0, r3
 800578c:	f000 ffa0 	bl	80066d0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	4a30      	ldr	r2, [pc, #192]	@ (8005858 <HAL_TIM_PWM_Start+0x1d4>)
 8005796:	4293      	cmp	r3, r2
 8005798:	d004      	beq.n	80057a4 <HAL_TIM_PWM_Start+0x120>
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	4a2f      	ldr	r2, [pc, #188]	@ (800585c <HAL_TIM_PWM_Start+0x1d8>)
 80057a0:	4293      	cmp	r3, r2
 80057a2:	d101      	bne.n	80057a8 <HAL_TIM_PWM_Start+0x124>
 80057a4:	2301      	movs	r3, #1
 80057a6:	e000      	b.n	80057aa <HAL_TIM_PWM_Start+0x126>
 80057a8:	2300      	movs	r3, #0
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d007      	beq.n	80057be <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80057bc:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	4a25      	ldr	r2, [pc, #148]	@ (8005858 <HAL_TIM_PWM_Start+0x1d4>)
 80057c4:	4293      	cmp	r3, r2
 80057c6:	d022      	beq.n	800580e <HAL_TIM_PWM_Start+0x18a>
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80057d0:	d01d      	beq.n	800580e <HAL_TIM_PWM_Start+0x18a>
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	4a22      	ldr	r2, [pc, #136]	@ (8005860 <HAL_TIM_PWM_Start+0x1dc>)
 80057d8:	4293      	cmp	r3, r2
 80057da:	d018      	beq.n	800580e <HAL_TIM_PWM_Start+0x18a>
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	4a20      	ldr	r2, [pc, #128]	@ (8005864 <HAL_TIM_PWM_Start+0x1e0>)
 80057e2:	4293      	cmp	r3, r2
 80057e4:	d013      	beq.n	800580e <HAL_TIM_PWM_Start+0x18a>
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	4a1f      	ldr	r2, [pc, #124]	@ (8005868 <HAL_TIM_PWM_Start+0x1e4>)
 80057ec:	4293      	cmp	r3, r2
 80057ee:	d00e      	beq.n	800580e <HAL_TIM_PWM_Start+0x18a>
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	4a19      	ldr	r2, [pc, #100]	@ (800585c <HAL_TIM_PWM_Start+0x1d8>)
 80057f6:	4293      	cmp	r3, r2
 80057f8:	d009      	beq.n	800580e <HAL_TIM_PWM_Start+0x18a>
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	4a1b      	ldr	r2, [pc, #108]	@ (800586c <HAL_TIM_PWM_Start+0x1e8>)
 8005800:	4293      	cmp	r3, r2
 8005802:	d004      	beq.n	800580e <HAL_TIM_PWM_Start+0x18a>
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	4a19      	ldr	r2, [pc, #100]	@ (8005870 <HAL_TIM_PWM_Start+0x1ec>)
 800580a:	4293      	cmp	r3, r2
 800580c:	d115      	bne.n	800583a <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	689a      	ldr	r2, [r3, #8]
 8005814:	4b17      	ldr	r3, [pc, #92]	@ (8005874 <HAL_TIM_PWM_Start+0x1f0>)
 8005816:	4013      	ands	r3, r2
 8005818:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	2b06      	cmp	r3, #6
 800581e:	d015      	beq.n	800584c <HAL_TIM_PWM_Start+0x1c8>
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005826:	d011      	beq.n	800584c <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	681a      	ldr	r2, [r3, #0]
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	f042 0201 	orr.w	r2, r2, #1
 8005836:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005838:	e008      	b.n	800584c <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	681a      	ldr	r2, [r3, #0]
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	f042 0201 	orr.w	r2, r2, #1
 8005848:	601a      	str	r2, [r3, #0]
 800584a:	e000      	b.n	800584e <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800584c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800584e:	2300      	movs	r3, #0
}
 8005850:	4618      	mov	r0, r3
 8005852:	3710      	adds	r7, #16
 8005854:	46bd      	mov	sp, r7
 8005856:	bd80      	pop	{r7, pc}
 8005858:	40010000 	.word	0x40010000
 800585c:	40010400 	.word	0x40010400
 8005860:	40000400 	.word	0x40000400
 8005864:	40000800 	.word	0x40000800
 8005868:	40000c00 	.word	0x40000c00
 800586c:	40014000 	.word	0x40014000
 8005870:	40001800 	.word	0x40001800
 8005874:	00010007 	.word	0x00010007

08005878 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005878:	b580      	push	{r7, lr}
 800587a:	b082      	sub	sp, #8
 800587c:	af00      	add	r7, sp, #0
 800587e:	6078      	str	r0, [r7, #4]
 8005880:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	2200      	movs	r2, #0
 8005888:	6839      	ldr	r1, [r7, #0]
 800588a:	4618      	mov	r0, r3
 800588c:	f000 ff20 	bl	80066d0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	4a35      	ldr	r2, [pc, #212]	@ (800596c <HAL_TIM_PWM_Stop+0xf4>)
 8005896:	4293      	cmp	r3, r2
 8005898:	d004      	beq.n	80058a4 <HAL_TIM_PWM_Stop+0x2c>
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	4a34      	ldr	r2, [pc, #208]	@ (8005970 <HAL_TIM_PWM_Stop+0xf8>)
 80058a0:	4293      	cmp	r3, r2
 80058a2:	d101      	bne.n	80058a8 <HAL_TIM_PWM_Stop+0x30>
 80058a4:	2301      	movs	r3, #1
 80058a6:	e000      	b.n	80058aa <HAL_TIM_PWM_Stop+0x32>
 80058a8:	2300      	movs	r3, #0
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d016      	beq.n	80058dc <HAL_TIM_PWM_Stop+0x64>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	6a1a      	ldr	r2, [r3, #32]
 80058b4:	4b2f      	ldr	r3, [pc, #188]	@ (8005974 <HAL_TIM_PWM_Stop+0xfc>)
 80058b6:	4013      	ands	r3, r2
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d10f      	bne.n	80058dc <HAL_TIM_PWM_Stop+0x64>
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	6a1a      	ldr	r2, [r3, #32]
 80058c2:	f240 4344 	movw	r3, #1092	@ 0x444
 80058c6:	4013      	ands	r3, r2
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d107      	bne.n	80058dc <HAL_TIM_PWM_Stop+0x64>
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80058da:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	6a1a      	ldr	r2, [r3, #32]
 80058e2:	4b24      	ldr	r3, [pc, #144]	@ (8005974 <HAL_TIM_PWM_Stop+0xfc>)
 80058e4:	4013      	ands	r3, r2
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d10f      	bne.n	800590a <HAL_TIM_PWM_Stop+0x92>
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	6a1a      	ldr	r2, [r3, #32]
 80058f0:	f240 4344 	movw	r3, #1092	@ 0x444
 80058f4:	4013      	ands	r3, r2
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d107      	bne.n	800590a <HAL_TIM_PWM_Stop+0x92>
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	681a      	ldr	r2, [r3, #0]
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	f022 0201 	bic.w	r2, r2, #1
 8005908:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800590a:	683b      	ldr	r3, [r7, #0]
 800590c:	2b00      	cmp	r3, #0
 800590e:	d104      	bne.n	800591a <HAL_TIM_PWM_Stop+0xa2>
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	2201      	movs	r2, #1
 8005914:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005918:	e023      	b.n	8005962 <HAL_TIM_PWM_Stop+0xea>
 800591a:	683b      	ldr	r3, [r7, #0]
 800591c:	2b04      	cmp	r3, #4
 800591e:	d104      	bne.n	800592a <HAL_TIM_PWM_Stop+0xb2>
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	2201      	movs	r2, #1
 8005924:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005928:	e01b      	b.n	8005962 <HAL_TIM_PWM_Stop+0xea>
 800592a:	683b      	ldr	r3, [r7, #0]
 800592c:	2b08      	cmp	r3, #8
 800592e:	d104      	bne.n	800593a <HAL_TIM_PWM_Stop+0xc2>
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	2201      	movs	r2, #1
 8005934:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005938:	e013      	b.n	8005962 <HAL_TIM_PWM_Stop+0xea>
 800593a:	683b      	ldr	r3, [r7, #0]
 800593c:	2b0c      	cmp	r3, #12
 800593e:	d104      	bne.n	800594a <HAL_TIM_PWM_Stop+0xd2>
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	2201      	movs	r2, #1
 8005944:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005948:	e00b      	b.n	8005962 <HAL_TIM_PWM_Stop+0xea>
 800594a:	683b      	ldr	r3, [r7, #0]
 800594c:	2b10      	cmp	r3, #16
 800594e:	d104      	bne.n	800595a <HAL_TIM_PWM_Stop+0xe2>
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	2201      	movs	r2, #1
 8005954:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005958:	e003      	b.n	8005962 <HAL_TIM_PWM_Stop+0xea>
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	2201      	movs	r2, #1
 800595e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Return function status */
  return HAL_OK;
 8005962:	2300      	movs	r3, #0
}
 8005964:	4618      	mov	r0, r3
 8005966:	3708      	adds	r7, #8
 8005968:	46bd      	mov	sp, r7
 800596a:	bd80      	pop	{r7, pc}
 800596c:	40010000 	.word	0x40010000
 8005970:	40010400 	.word	0x40010400
 8005974:	00111111 	.word	0x00111111

08005978 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005978:	b580      	push	{r7, lr}
 800597a:	b084      	sub	sp, #16
 800597c:	af00      	add	r7, sp, #0
 800597e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	68db      	ldr	r3, [r3, #12]
 8005986:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	691b      	ldr	r3, [r3, #16]
 800598e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005990:	68bb      	ldr	r3, [r7, #8]
 8005992:	f003 0302 	and.w	r3, r3, #2
 8005996:	2b00      	cmp	r3, #0
 8005998:	d020      	beq.n	80059dc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	f003 0302 	and.w	r3, r3, #2
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d01b      	beq.n	80059dc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	f06f 0202 	mvn.w	r2, #2
 80059ac:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	2201      	movs	r2, #1
 80059b2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	699b      	ldr	r3, [r3, #24]
 80059ba:	f003 0303 	and.w	r3, r3, #3
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d003      	beq.n	80059ca <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80059c2:	6878      	ldr	r0, [r7, #4]
 80059c4:	f000 fac8 	bl	8005f58 <HAL_TIM_IC_CaptureCallback>
 80059c8:	e005      	b.n	80059d6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80059ca:	6878      	ldr	r0, [r7, #4]
 80059cc:	f000 faba 	bl	8005f44 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80059d0:	6878      	ldr	r0, [r7, #4]
 80059d2:	f000 facb 	bl	8005f6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	2200      	movs	r2, #0
 80059da:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80059dc:	68bb      	ldr	r3, [r7, #8]
 80059de:	f003 0304 	and.w	r3, r3, #4
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d020      	beq.n	8005a28 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	f003 0304 	and.w	r3, r3, #4
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d01b      	beq.n	8005a28 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	f06f 0204 	mvn.w	r2, #4
 80059f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	2202      	movs	r2, #2
 80059fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	699b      	ldr	r3, [r3, #24]
 8005a06:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d003      	beq.n	8005a16 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a0e:	6878      	ldr	r0, [r7, #4]
 8005a10:	f000 faa2 	bl	8005f58 <HAL_TIM_IC_CaptureCallback>
 8005a14:	e005      	b.n	8005a22 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a16:	6878      	ldr	r0, [r7, #4]
 8005a18:	f000 fa94 	bl	8005f44 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a1c:	6878      	ldr	r0, [r7, #4]
 8005a1e:	f000 faa5 	bl	8005f6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	2200      	movs	r2, #0
 8005a26:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005a28:	68bb      	ldr	r3, [r7, #8]
 8005a2a:	f003 0308 	and.w	r3, r3, #8
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d020      	beq.n	8005a74 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	f003 0308 	and.w	r3, r3, #8
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d01b      	beq.n	8005a74 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	f06f 0208 	mvn.w	r2, #8
 8005a44:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	2204      	movs	r2, #4
 8005a4a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	69db      	ldr	r3, [r3, #28]
 8005a52:	f003 0303 	and.w	r3, r3, #3
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d003      	beq.n	8005a62 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a5a:	6878      	ldr	r0, [r7, #4]
 8005a5c:	f000 fa7c 	bl	8005f58 <HAL_TIM_IC_CaptureCallback>
 8005a60:	e005      	b.n	8005a6e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a62:	6878      	ldr	r0, [r7, #4]
 8005a64:	f000 fa6e 	bl	8005f44 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a68:	6878      	ldr	r0, [r7, #4]
 8005a6a:	f000 fa7f 	bl	8005f6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	2200      	movs	r2, #0
 8005a72:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005a74:	68bb      	ldr	r3, [r7, #8]
 8005a76:	f003 0310 	and.w	r3, r3, #16
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d020      	beq.n	8005ac0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	f003 0310 	and.w	r3, r3, #16
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d01b      	beq.n	8005ac0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	f06f 0210 	mvn.w	r2, #16
 8005a90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	2208      	movs	r2, #8
 8005a96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	69db      	ldr	r3, [r3, #28]
 8005a9e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d003      	beq.n	8005aae <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005aa6:	6878      	ldr	r0, [r7, #4]
 8005aa8:	f000 fa56 	bl	8005f58 <HAL_TIM_IC_CaptureCallback>
 8005aac:	e005      	b.n	8005aba <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005aae:	6878      	ldr	r0, [r7, #4]
 8005ab0:	f000 fa48 	bl	8005f44 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ab4:	6878      	ldr	r0, [r7, #4]
 8005ab6:	f000 fa59 	bl	8005f6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	2200      	movs	r2, #0
 8005abe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005ac0:	68bb      	ldr	r3, [r7, #8]
 8005ac2:	f003 0301 	and.w	r3, r3, #1
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d00c      	beq.n	8005ae4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	f003 0301 	and.w	r3, r3, #1
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d007      	beq.n	8005ae4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	f06f 0201 	mvn.w	r2, #1
 8005adc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005ade:	6878      	ldr	r0, [r7, #4]
 8005ae0:	f7fb fede 	bl	80018a0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005ae4:	68bb      	ldr	r3, [r7, #8]
 8005ae6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d104      	bne.n	8005af8 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8005aee:	68bb      	ldr	r3, [r7, #8]
 8005af0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d00c      	beq.n	8005b12 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d007      	beq.n	8005b12 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8005b0a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005b0c:	6878      	ldr	r0, [r7, #4]
 8005b0e:	f000 fe9d 	bl	800684c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8005b12:	68bb      	ldr	r3, [r7, #8]
 8005b14:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d00c      	beq.n	8005b36 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d007      	beq.n	8005b36 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8005b2e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005b30:	6878      	ldr	r0, [r7, #4]
 8005b32:	f000 fe95 	bl	8006860 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005b36:	68bb      	ldr	r3, [r7, #8]
 8005b38:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d00c      	beq.n	8005b5a <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d007      	beq.n	8005b5a <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005b52:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005b54:	6878      	ldr	r0, [r7, #4]
 8005b56:	f000 fa13 	bl	8005f80 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005b5a:	68bb      	ldr	r3, [r7, #8]
 8005b5c:	f003 0320 	and.w	r3, r3, #32
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d00c      	beq.n	8005b7e <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	f003 0320 	and.w	r3, r3, #32
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d007      	beq.n	8005b7e <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	f06f 0220 	mvn.w	r2, #32
 8005b76:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005b78:	6878      	ldr	r0, [r7, #4]
 8005b7a:	f000 fe5d 	bl	8006838 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005b7e:	bf00      	nop
 8005b80:	3710      	adds	r7, #16
 8005b82:	46bd      	mov	sp, r7
 8005b84:	bd80      	pop	{r7, pc}
	...

08005b88 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005b88:	b580      	push	{r7, lr}
 8005b8a:	b086      	sub	sp, #24
 8005b8c:	af00      	add	r7, sp, #0
 8005b8e:	60f8      	str	r0, [r7, #12]
 8005b90:	60b9      	str	r1, [r7, #8]
 8005b92:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005b94:	2300      	movs	r3, #0
 8005b96:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005b9e:	2b01      	cmp	r3, #1
 8005ba0:	d101      	bne.n	8005ba6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005ba2:	2302      	movs	r3, #2
 8005ba4:	e0ff      	b.n	8005da6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	2201      	movs	r2, #1
 8005baa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	2b14      	cmp	r3, #20
 8005bb2:	f200 80f0 	bhi.w	8005d96 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005bb6:	a201      	add	r2, pc, #4	@ (adr r2, 8005bbc <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005bb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bbc:	08005c11 	.word	0x08005c11
 8005bc0:	08005d97 	.word	0x08005d97
 8005bc4:	08005d97 	.word	0x08005d97
 8005bc8:	08005d97 	.word	0x08005d97
 8005bcc:	08005c51 	.word	0x08005c51
 8005bd0:	08005d97 	.word	0x08005d97
 8005bd4:	08005d97 	.word	0x08005d97
 8005bd8:	08005d97 	.word	0x08005d97
 8005bdc:	08005c93 	.word	0x08005c93
 8005be0:	08005d97 	.word	0x08005d97
 8005be4:	08005d97 	.word	0x08005d97
 8005be8:	08005d97 	.word	0x08005d97
 8005bec:	08005cd3 	.word	0x08005cd3
 8005bf0:	08005d97 	.word	0x08005d97
 8005bf4:	08005d97 	.word	0x08005d97
 8005bf8:	08005d97 	.word	0x08005d97
 8005bfc:	08005d15 	.word	0x08005d15
 8005c00:	08005d97 	.word	0x08005d97
 8005c04:	08005d97 	.word	0x08005d97
 8005c08:	08005d97 	.word	0x08005d97
 8005c0c:	08005d55 	.word	0x08005d55
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	68b9      	ldr	r1, [r7, #8]
 8005c16:	4618      	mov	r0, r3
 8005c18:	f000 fa62 	bl	80060e0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	699a      	ldr	r2, [r3, #24]
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	f042 0208 	orr.w	r2, r2, #8
 8005c2a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	699a      	ldr	r2, [r3, #24]
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	f022 0204 	bic.w	r2, r2, #4
 8005c3a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	6999      	ldr	r1, [r3, #24]
 8005c42:	68bb      	ldr	r3, [r7, #8]
 8005c44:	691a      	ldr	r2, [r3, #16]
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	430a      	orrs	r2, r1
 8005c4c:	619a      	str	r2, [r3, #24]
      break;
 8005c4e:	e0a5      	b.n	8005d9c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	68b9      	ldr	r1, [r7, #8]
 8005c56:	4618      	mov	r0, r3
 8005c58:	f000 fab4 	bl	80061c4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	699a      	ldr	r2, [r3, #24]
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005c6a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	699a      	ldr	r2, [r3, #24]
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005c7a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	6999      	ldr	r1, [r3, #24]
 8005c82:	68bb      	ldr	r3, [r7, #8]
 8005c84:	691b      	ldr	r3, [r3, #16]
 8005c86:	021a      	lsls	r2, r3, #8
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	430a      	orrs	r2, r1
 8005c8e:	619a      	str	r2, [r3, #24]
      break;
 8005c90:	e084      	b.n	8005d9c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	68b9      	ldr	r1, [r7, #8]
 8005c98:	4618      	mov	r0, r3
 8005c9a:	f000 fb0b 	bl	80062b4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	69da      	ldr	r2, [r3, #28]
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	f042 0208 	orr.w	r2, r2, #8
 8005cac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	69da      	ldr	r2, [r3, #28]
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	f022 0204 	bic.w	r2, r2, #4
 8005cbc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	69d9      	ldr	r1, [r3, #28]
 8005cc4:	68bb      	ldr	r3, [r7, #8]
 8005cc6:	691a      	ldr	r2, [r3, #16]
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	430a      	orrs	r2, r1
 8005cce:	61da      	str	r2, [r3, #28]
      break;
 8005cd0:	e064      	b.n	8005d9c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	68b9      	ldr	r1, [r7, #8]
 8005cd8:	4618      	mov	r0, r3
 8005cda:	f000 fb61 	bl	80063a0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	69da      	ldr	r2, [r3, #28]
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005cec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	69da      	ldr	r2, [r3, #28]
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005cfc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	69d9      	ldr	r1, [r3, #28]
 8005d04:	68bb      	ldr	r3, [r7, #8]
 8005d06:	691b      	ldr	r3, [r3, #16]
 8005d08:	021a      	lsls	r2, r3, #8
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	430a      	orrs	r2, r1
 8005d10:	61da      	str	r2, [r3, #28]
      break;
 8005d12:	e043      	b.n	8005d9c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	68b9      	ldr	r1, [r7, #8]
 8005d1a:	4618      	mov	r0, r3
 8005d1c:	f000 fb98 	bl	8006450 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	f042 0208 	orr.w	r2, r2, #8
 8005d2e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	f022 0204 	bic.w	r2, r2, #4
 8005d3e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8005d46:	68bb      	ldr	r3, [r7, #8]
 8005d48:	691a      	ldr	r2, [r3, #16]
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	430a      	orrs	r2, r1
 8005d50:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8005d52:	e023      	b.n	8005d9c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	68b9      	ldr	r1, [r7, #8]
 8005d5a:	4618      	mov	r0, r3
 8005d5c:	f000 fbca 	bl	80064f4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005d6e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005d7e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8005d86:	68bb      	ldr	r3, [r7, #8]
 8005d88:	691b      	ldr	r3, [r3, #16]
 8005d8a:	021a      	lsls	r2, r3, #8
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	430a      	orrs	r2, r1
 8005d92:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8005d94:	e002      	b.n	8005d9c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8005d96:	2301      	movs	r3, #1
 8005d98:	75fb      	strb	r3, [r7, #23]
      break;
 8005d9a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	2200      	movs	r2, #0
 8005da0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005da4:	7dfb      	ldrb	r3, [r7, #23]
}
 8005da6:	4618      	mov	r0, r3
 8005da8:	3718      	adds	r7, #24
 8005daa:	46bd      	mov	sp, r7
 8005dac:	bd80      	pop	{r7, pc}
 8005dae:	bf00      	nop

08005db0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005db0:	b580      	push	{r7, lr}
 8005db2:	b084      	sub	sp, #16
 8005db4:	af00      	add	r7, sp, #0
 8005db6:	6078      	str	r0, [r7, #4]
 8005db8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005dba:	2300      	movs	r3, #0
 8005dbc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005dc4:	2b01      	cmp	r3, #1
 8005dc6:	d101      	bne.n	8005dcc <HAL_TIM_ConfigClockSource+0x1c>
 8005dc8:	2302      	movs	r3, #2
 8005dca:	e0b4      	b.n	8005f36 <HAL_TIM_ConfigClockSource+0x186>
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	2201      	movs	r2, #1
 8005dd0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	2202      	movs	r2, #2
 8005dd8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	689b      	ldr	r3, [r3, #8]
 8005de2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005de4:	68ba      	ldr	r2, [r7, #8]
 8005de6:	4b56      	ldr	r3, [pc, #344]	@ (8005f40 <HAL_TIM_ConfigClockSource+0x190>)
 8005de8:	4013      	ands	r3, r2
 8005dea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005dec:	68bb      	ldr	r3, [r7, #8]
 8005dee:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005df2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	68ba      	ldr	r2, [r7, #8]
 8005dfa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005dfc:	683b      	ldr	r3, [r7, #0]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005e04:	d03e      	beq.n	8005e84 <HAL_TIM_ConfigClockSource+0xd4>
 8005e06:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005e0a:	f200 8087 	bhi.w	8005f1c <HAL_TIM_ConfigClockSource+0x16c>
 8005e0e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005e12:	f000 8086 	beq.w	8005f22 <HAL_TIM_ConfigClockSource+0x172>
 8005e16:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005e1a:	d87f      	bhi.n	8005f1c <HAL_TIM_ConfigClockSource+0x16c>
 8005e1c:	2b70      	cmp	r3, #112	@ 0x70
 8005e1e:	d01a      	beq.n	8005e56 <HAL_TIM_ConfigClockSource+0xa6>
 8005e20:	2b70      	cmp	r3, #112	@ 0x70
 8005e22:	d87b      	bhi.n	8005f1c <HAL_TIM_ConfigClockSource+0x16c>
 8005e24:	2b60      	cmp	r3, #96	@ 0x60
 8005e26:	d050      	beq.n	8005eca <HAL_TIM_ConfigClockSource+0x11a>
 8005e28:	2b60      	cmp	r3, #96	@ 0x60
 8005e2a:	d877      	bhi.n	8005f1c <HAL_TIM_ConfigClockSource+0x16c>
 8005e2c:	2b50      	cmp	r3, #80	@ 0x50
 8005e2e:	d03c      	beq.n	8005eaa <HAL_TIM_ConfigClockSource+0xfa>
 8005e30:	2b50      	cmp	r3, #80	@ 0x50
 8005e32:	d873      	bhi.n	8005f1c <HAL_TIM_ConfigClockSource+0x16c>
 8005e34:	2b40      	cmp	r3, #64	@ 0x40
 8005e36:	d058      	beq.n	8005eea <HAL_TIM_ConfigClockSource+0x13a>
 8005e38:	2b40      	cmp	r3, #64	@ 0x40
 8005e3a:	d86f      	bhi.n	8005f1c <HAL_TIM_ConfigClockSource+0x16c>
 8005e3c:	2b30      	cmp	r3, #48	@ 0x30
 8005e3e:	d064      	beq.n	8005f0a <HAL_TIM_ConfigClockSource+0x15a>
 8005e40:	2b30      	cmp	r3, #48	@ 0x30
 8005e42:	d86b      	bhi.n	8005f1c <HAL_TIM_ConfigClockSource+0x16c>
 8005e44:	2b20      	cmp	r3, #32
 8005e46:	d060      	beq.n	8005f0a <HAL_TIM_ConfigClockSource+0x15a>
 8005e48:	2b20      	cmp	r3, #32
 8005e4a:	d867      	bhi.n	8005f1c <HAL_TIM_ConfigClockSource+0x16c>
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d05c      	beq.n	8005f0a <HAL_TIM_ConfigClockSource+0x15a>
 8005e50:	2b10      	cmp	r3, #16
 8005e52:	d05a      	beq.n	8005f0a <HAL_TIM_ConfigClockSource+0x15a>
 8005e54:	e062      	b.n	8005f1c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005e5a:	683b      	ldr	r3, [r7, #0]
 8005e5c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005e5e:	683b      	ldr	r3, [r7, #0]
 8005e60:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005e62:	683b      	ldr	r3, [r7, #0]
 8005e64:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005e66:	f000 fc13 	bl	8006690 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	689b      	ldr	r3, [r3, #8]
 8005e70:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005e72:	68bb      	ldr	r3, [r7, #8]
 8005e74:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005e78:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	68ba      	ldr	r2, [r7, #8]
 8005e80:	609a      	str	r2, [r3, #8]
      break;
 8005e82:	e04f      	b.n	8005f24 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005e88:	683b      	ldr	r3, [r7, #0]
 8005e8a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005e8c:	683b      	ldr	r3, [r7, #0]
 8005e8e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005e90:	683b      	ldr	r3, [r7, #0]
 8005e92:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005e94:	f000 fbfc 	bl	8006690 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	689a      	ldr	r2, [r3, #8]
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005ea6:	609a      	str	r2, [r3, #8]
      break;
 8005ea8:	e03c      	b.n	8005f24 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005eae:	683b      	ldr	r3, [r7, #0]
 8005eb0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005eb2:	683b      	ldr	r3, [r7, #0]
 8005eb4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005eb6:	461a      	mov	r2, r3
 8005eb8:	f000 fb70 	bl	800659c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	2150      	movs	r1, #80	@ 0x50
 8005ec2:	4618      	mov	r0, r3
 8005ec4:	f000 fbc9 	bl	800665a <TIM_ITRx_SetConfig>
      break;
 8005ec8:	e02c      	b.n	8005f24 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005ece:	683b      	ldr	r3, [r7, #0]
 8005ed0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005ed2:	683b      	ldr	r3, [r7, #0]
 8005ed4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005ed6:	461a      	mov	r2, r3
 8005ed8:	f000 fb8f 	bl	80065fa <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	2160      	movs	r1, #96	@ 0x60
 8005ee2:	4618      	mov	r0, r3
 8005ee4:	f000 fbb9 	bl	800665a <TIM_ITRx_SetConfig>
      break;
 8005ee8:	e01c      	b.n	8005f24 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005eee:	683b      	ldr	r3, [r7, #0]
 8005ef0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005ef2:	683b      	ldr	r3, [r7, #0]
 8005ef4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005ef6:	461a      	mov	r2, r3
 8005ef8:	f000 fb50 	bl	800659c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	2140      	movs	r1, #64	@ 0x40
 8005f02:	4618      	mov	r0, r3
 8005f04:	f000 fba9 	bl	800665a <TIM_ITRx_SetConfig>
      break;
 8005f08:	e00c      	b.n	8005f24 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681a      	ldr	r2, [r3, #0]
 8005f0e:	683b      	ldr	r3, [r7, #0]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	4619      	mov	r1, r3
 8005f14:	4610      	mov	r0, r2
 8005f16:	f000 fba0 	bl	800665a <TIM_ITRx_SetConfig>
      break;
 8005f1a:	e003      	b.n	8005f24 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005f1c:	2301      	movs	r3, #1
 8005f1e:	73fb      	strb	r3, [r7, #15]
      break;
 8005f20:	e000      	b.n	8005f24 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005f22:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	2201      	movs	r2, #1
 8005f28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	2200      	movs	r2, #0
 8005f30:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005f34:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f36:	4618      	mov	r0, r3
 8005f38:	3710      	adds	r7, #16
 8005f3a:	46bd      	mov	sp, r7
 8005f3c:	bd80      	pop	{r7, pc}
 8005f3e:	bf00      	nop
 8005f40:	fffeff88 	.word	0xfffeff88

08005f44 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005f44:	b480      	push	{r7}
 8005f46:	b083      	sub	sp, #12
 8005f48:	af00      	add	r7, sp, #0
 8005f4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005f4c:	bf00      	nop
 8005f4e:	370c      	adds	r7, #12
 8005f50:	46bd      	mov	sp, r7
 8005f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f56:	4770      	bx	lr

08005f58 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005f58:	b480      	push	{r7}
 8005f5a:	b083      	sub	sp, #12
 8005f5c:	af00      	add	r7, sp, #0
 8005f5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005f60:	bf00      	nop
 8005f62:	370c      	adds	r7, #12
 8005f64:	46bd      	mov	sp, r7
 8005f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f6a:	4770      	bx	lr

08005f6c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005f6c:	b480      	push	{r7}
 8005f6e:	b083      	sub	sp, #12
 8005f70:	af00      	add	r7, sp, #0
 8005f72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005f74:	bf00      	nop
 8005f76:	370c      	adds	r7, #12
 8005f78:	46bd      	mov	sp, r7
 8005f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f7e:	4770      	bx	lr

08005f80 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005f80:	b480      	push	{r7}
 8005f82:	b083      	sub	sp, #12
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005f88:	bf00      	nop
 8005f8a:	370c      	adds	r7, #12
 8005f8c:	46bd      	mov	sp, r7
 8005f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f92:	4770      	bx	lr

08005f94 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005f94:	b480      	push	{r7}
 8005f96:	b085      	sub	sp, #20
 8005f98:	af00      	add	r7, sp, #0
 8005f9a:	6078      	str	r0, [r7, #4]
 8005f9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	4a43      	ldr	r2, [pc, #268]	@ (80060b4 <TIM_Base_SetConfig+0x120>)
 8005fa8:	4293      	cmp	r3, r2
 8005faa:	d013      	beq.n	8005fd4 <TIM_Base_SetConfig+0x40>
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005fb2:	d00f      	beq.n	8005fd4 <TIM_Base_SetConfig+0x40>
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	4a40      	ldr	r2, [pc, #256]	@ (80060b8 <TIM_Base_SetConfig+0x124>)
 8005fb8:	4293      	cmp	r3, r2
 8005fba:	d00b      	beq.n	8005fd4 <TIM_Base_SetConfig+0x40>
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	4a3f      	ldr	r2, [pc, #252]	@ (80060bc <TIM_Base_SetConfig+0x128>)
 8005fc0:	4293      	cmp	r3, r2
 8005fc2:	d007      	beq.n	8005fd4 <TIM_Base_SetConfig+0x40>
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	4a3e      	ldr	r2, [pc, #248]	@ (80060c0 <TIM_Base_SetConfig+0x12c>)
 8005fc8:	4293      	cmp	r3, r2
 8005fca:	d003      	beq.n	8005fd4 <TIM_Base_SetConfig+0x40>
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	4a3d      	ldr	r2, [pc, #244]	@ (80060c4 <TIM_Base_SetConfig+0x130>)
 8005fd0:	4293      	cmp	r3, r2
 8005fd2:	d108      	bne.n	8005fe6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005fda:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005fdc:	683b      	ldr	r3, [r7, #0]
 8005fde:	685b      	ldr	r3, [r3, #4]
 8005fe0:	68fa      	ldr	r2, [r7, #12]
 8005fe2:	4313      	orrs	r3, r2
 8005fe4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	4a32      	ldr	r2, [pc, #200]	@ (80060b4 <TIM_Base_SetConfig+0x120>)
 8005fea:	4293      	cmp	r3, r2
 8005fec:	d02b      	beq.n	8006046 <TIM_Base_SetConfig+0xb2>
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005ff4:	d027      	beq.n	8006046 <TIM_Base_SetConfig+0xb2>
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	4a2f      	ldr	r2, [pc, #188]	@ (80060b8 <TIM_Base_SetConfig+0x124>)
 8005ffa:	4293      	cmp	r3, r2
 8005ffc:	d023      	beq.n	8006046 <TIM_Base_SetConfig+0xb2>
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	4a2e      	ldr	r2, [pc, #184]	@ (80060bc <TIM_Base_SetConfig+0x128>)
 8006002:	4293      	cmp	r3, r2
 8006004:	d01f      	beq.n	8006046 <TIM_Base_SetConfig+0xb2>
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	4a2d      	ldr	r2, [pc, #180]	@ (80060c0 <TIM_Base_SetConfig+0x12c>)
 800600a:	4293      	cmp	r3, r2
 800600c:	d01b      	beq.n	8006046 <TIM_Base_SetConfig+0xb2>
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	4a2c      	ldr	r2, [pc, #176]	@ (80060c4 <TIM_Base_SetConfig+0x130>)
 8006012:	4293      	cmp	r3, r2
 8006014:	d017      	beq.n	8006046 <TIM_Base_SetConfig+0xb2>
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	4a2b      	ldr	r2, [pc, #172]	@ (80060c8 <TIM_Base_SetConfig+0x134>)
 800601a:	4293      	cmp	r3, r2
 800601c:	d013      	beq.n	8006046 <TIM_Base_SetConfig+0xb2>
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	4a2a      	ldr	r2, [pc, #168]	@ (80060cc <TIM_Base_SetConfig+0x138>)
 8006022:	4293      	cmp	r3, r2
 8006024:	d00f      	beq.n	8006046 <TIM_Base_SetConfig+0xb2>
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	4a29      	ldr	r2, [pc, #164]	@ (80060d0 <TIM_Base_SetConfig+0x13c>)
 800602a:	4293      	cmp	r3, r2
 800602c:	d00b      	beq.n	8006046 <TIM_Base_SetConfig+0xb2>
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	4a28      	ldr	r2, [pc, #160]	@ (80060d4 <TIM_Base_SetConfig+0x140>)
 8006032:	4293      	cmp	r3, r2
 8006034:	d007      	beq.n	8006046 <TIM_Base_SetConfig+0xb2>
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	4a27      	ldr	r2, [pc, #156]	@ (80060d8 <TIM_Base_SetConfig+0x144>)
 800603a:	4293      	cmp	r3, r2
 800603c:	d003      	beq.n	8006046 <TIM_Base_SetConfig+0xb2>
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	4a26      	ldr	r2, [pc, #152]	@ (80060dc <TIM_Base_SetConfig+0x148>)
 8006042:	4293      	cmp	r3, r2
 8006044:	d108      	bne.n	8006058 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800604c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800604e:	683b      	ldr	r3, [r7, #0]
 8006050:	68db      	ldr	r3, [r3, #12]
 8006052:	68fa      	ldr	r2, [r7, #12]
 8006054:	4313      	orrs	r3, r2
 8006056:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800605e:	683b      	ldr	r3, [r7, #0]
 8006060:	695b      	ldr	r3, [r3, #20]
 8006062:	4313      	orrs	r3, r2
 8006064:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006066:	683b      	ldr	r3, [r7, #0]
 8006068:	689a      	ldr	r2, [r3, #8]
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800606e:	683b      	ldr	r3, [r7, #0]
 8006070:	681a      	ldr	r2, [r3, #0]
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	4a0e      	ldr	r2, [pc, #56]	@ (80060b4 <TIM_Base_SetConfig+0x120>)
 800607a:	4293      	cmp	r3, r2
 800607c:	d003      	beq.n	8006086 <TIM_Base_SetConfig+0xf2>
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	4a10      	ldr	r2, [pc, #64]	@ (80060c4 <TIM_Base_SetConfig+0x130>)
 8006082:	4293      	cmp	r3, r2
 8006084:	d103      	bne.n	800608e <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006086:	683b      	ldr	r3, [r7, #0]
 8006088:	691a      	ldr	r2, [r3, #16]
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	f043 0204 	orr.w	r2, r3, #4
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	2201      	movs	r2, #1
 800609e:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	68fa      	ldr	r2, [r7, #12]
 80060a4:	601a      	str	r2, [r3, #0]
}
 80060a6:	bf00      	nop
 80060a8:	3714      	adds	r7, #20
 80060aa:	46bd      	mov	sp, r7
 80060ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b0:	4770      	bx	lr
 80060b2:	bf00      	nop
 80060b4:	40010000 	.word	0x40010000
 80060b8:	40000400 	.word	0x40000400
 80060bc:	40000800 	.word	0x40000800
 80060c0:	40000c00 	.word	0x40000c00
 80060c4:	40010400 	.word	0x40010400
 80060c8:	40014000 	.word	0x40014000
 80060cc:	40014400 	.word	0x40014400
 80060d0:	40014800 	.word	0x40014800
 80060d4:	40001800 	.word	0x40001800
 80060d8:	40001c00 	.word	0x40001c00
 80060dc:	40002000 	.word	0x40002000

080060e0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80060e0:	b480      	push	{r7}
 80060e2:	b087      	sub	sp, #28
 80060e4:	af00      	add	r7, sp, #0
 80060e6:	6078      	str	r0, [r7, #4]
 80060e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	6a1b      	ldr	r3, [r3, #32]
 80060ee:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	6a1b      	ldr	r3, [r3, #32]
 80060f4:	f023 0201 	bic.w	r2, r3, #1
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	685b      	ldr	r3, [r3, #4]
 8006100:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	699b      	ldr	r3, [r3, #24]
 8006106:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006108:	68fa      	ldr	r2, [r7, #12]
 800610a:	4b2b      	ldr	r3, [pc, #172]	@ (80061b8 <TIM_OC1_SetConfig+0xd8>)
 800610c:	4013      	ands	r3, r2
 800610e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	f023 0303 	bic.w	r3, r3, #3
 8006116:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006118:	683b      	ldr	r3, [r7, #0]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	68fa      	ldr	r2, [r7, #12]
 800611e:	4313      	orrs	r3, r2
 8006120:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006122:	697b      	ldr	r3, [r7, #20]
 8006124:	f023 0302 	bic.w	r3, r3, #2
 8006128:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800612a:	683b      	ldr	r3, [r7, #0]
 800612c:	689b      	ldr	r3, [r3, #8]
 800612e:	697a      	ldr	r2, [r7, #20]
 8006130:	4313      	orrs	r3, r2
 8006132:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	4a21      	ldr	r2, [pc, #132]	@ (80061bc <TIM_OC1_SetConfig+0xdc>)
 8006138:	4293      	cmp	r3, r2
 800613a:	d003      	beq.n	8006144 <TIM_OC1_SetConfig+0x64>
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	4a20      	ldr	r2, [pc, #128]	@ (80061c0 <TIM_OC1_SetConfig+0xe0>)
 8006140:	4293      	cmp	r3, r2
 8006142:	d10c      	bne.n	800615e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006144:	697b      	ldr	r3, [r7, #20]
 8006146:	f023 0308 	bic.w	r3, r3, #8
 800614a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800614c:	683b      	ldr	r3, [r7, #0]
 800614e:	68db      	ldr	r3, [r3, #12]
 8006150:	697a      	ldr	r2, [r7, #20]
 8006152:	4313      	orrs	r3, r2
 8006154:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006156:	697b      	ldr	r3, [r7, #20]
 8006158:	f023 0304 	bic.w	r3, r3, #4
 800615c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	4a16      	ldr	r2, [pc, #88]	@ (80061bc <TIM_OC1_SetConfig+0xdc>)
 8006162:	4293      	cmp	r3, r2
 8006164:	d003      	beq.n	800616e <TIM_OC1_SetConfig+0x8e>
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	4a15      	ldr	r2, [pc, #84]	@ (80061c0 <TIM_OC1_SetConfig+0xe0>)
 800616a:	4293      	cmp	r3, r2
 800616c:	d111      	bne.n	8006192 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800616e:	693b      	ldr	r3, [r7, #16]
 8006170:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006174:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006176:	693b      	ldr	r3, [r7, #16]
 8006178:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800617c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800617e:	683b      	ldr	r3, [r7, #0]
 8006180:	695b      	ldr	r3, [r3, #20]
 8006182:	693a      	ldr	r2, [r7, #16]
 8006184:	4313      	orrs	r3, r2
 8006186:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006188:	683b      	ldr	r3, [r7, #0]
 800618a:	699b      	ldr	r3, [r3, #24]
 800618c:	693a      	ldr	r2, [r7, #16]
 800618e:	4313      	orrs	r3, r2
 8006190:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	693a      	ldr	r2, [r7, #16]
 8006196:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	68fa      	ldr	r2, [r7, #12]
 800619c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800619e:	683b      	ldr	r3, [r7, #0]
 80061a0:	685a      	ldr	r2, [r3, #4]
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	697a      	ldr	r2, [r7, #20]
 80061aa:	621a      	str	r2, [r3, #32]
}
 80061ac:	bf00      	nop
 80061ae:	371c      	adds	r7, #28
 80061b0:	46bd      	mov	sp, r7
 80061b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b6:	4770      	bx	lr
 80061b8:	fffeff8f 	.word	0xfffeff8f
 80061bc:	40010000 	.word	0x40010000
 80061c0:	40010400 	.word	0x40010400

080061c4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80061c4:	b480      	push	{r7}
 80061c6:	b087      	sub	sp, #28
 80061c8:	af00      	add	r7, sp, #0
 80061ca:	6078      	str	r0, [r7, #4]
 80061cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	6a1b      	ldr	r3, [r3, #32]
 80061d2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	6a1b      	ldr	r3, [r3, #32]
 80061d8:	f023 0210 	bic.w	r2, r3, #16
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	685b      	ldr	r3, [r3, #4]
 80061e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	699b      	ldr	r3, [r3, #24]
 80061ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80061ec:	68fa      	ldr	r2, [r7, #12]
 80061ee:	4b2e      	ldr	r3, [pc, #184]	@ (80062a8 <TIM_OC2_SetConfig+0xe4>)
 80061f0:	4013      	ands	r3, r2
 80061f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80061fa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80061fc:	683b      	ldr	r3, [r7, #0]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	021b      	lsls	r3, r3, #8
 8006202:	68fa      	ldr	r2, [r7, #12]
 8006204:	4313      	orrs	r3, r2
 8006206:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006208:	697b      	ldr	r3, [r7, #20]
 800620a:	f023 0320 	bic.w	r3, r3, #32
 800620e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006210:	683b      	ldr	r3, [r7, #0]
 8006212:	689b      	ldr	r3, [r3, #8]
 8006214:	011b      	lsls	r3, r3, #4
 8006216:	697a      	ldr	r2, [r7, #20]
 8006218:	4313      	orrs	r3, r2
 800621a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	4a23      	ldr	r2, [pc, #140]	@ (80062ac <TIM_OC2_SetConfig+0xe8>)
 8006220:	4293      	cmp	r3, r2
 8006222:	d003      	beq.n	800622c <TIM_OC2_SetConfig+0x68>
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	4a22      	ldr	r2, [pc, #136]	@ (80062b0 <TIM_OC2_SetConfig+0xec>)
 8006228:	4293      	cmp	r3, r2
 800622a:	d10d      	bne.n	8006248 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800622c:	697b      	ldr	r3, [r7, #20]
 800622e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006232:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006234:	683b      	ldr	r3, [r7, #0]
 8006236:	68db      	ldr	r3, [r3, #12]
 8006238:	011b      	lsls	r3, r3, #4
 800623a:	697a      	ldr	r2, [r7, #20]
 800623c:	4313      	orrs	r3, r2
 800623e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006240:	697b      	ldr	r3, [r7, #20]
 8006242:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006246:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	4a18      	ldr	r2, [pc, #96]	@ (80062ac <TIM_OC2_SetConfig+0xe8>)
 800624c:	4293      	cmp	r3, r2
 800624e:	d003      	beq.n	8006258 <TIM_OC2_SetConfig+0x94>
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	4a17      	ldr	r2, [pc, #92]	@ (80062b0 <TIM_OC2_SetConfig+0xec>)
 8006254:	4293      	cmp	r3, r2
 8006256:	d113      	bne.n	8006280 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006258:	693b      	ldr	r3, [r7, #16]
 800625a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800625e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006260:	693b      	ldr	r3, [r7, #16]
 8006262:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006266:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006268:	683b      	ldr	r3, [r7, #0]
 800626a:	695b      	ldr	r3, [r3, #20]
 800626c:	009b      	lsls	r3, r3, #2
 800626e:	693a      	ldr	r2, [r7, #16]
 8006270:	4313      	orrs	r3, r2
 8006272:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006274:	683b      	ldr	r3, [r7, #0]
 8006276:	699b      	ldr	r3, [r3, #24]
 8006278:	009b      	lsls	r3, r3, #2
 800627a:	693a      	ldr	r2, [r7, #16]
 800627c:	4313      	orrs	r3, r2
 800627e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	693a      	ldr	r2, [r7, #16]
 8006284:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	68fa      	ldr	r2, [r7, #12]
 800628a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800628c:	683b      	ldr	r3, [r7, #0]
 800628e:	685a      	ldr	r2, [r3, #4]
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	697a      	ldr	r2, [r7, #20]
 8006298:	621a      	str	r2, [r3, #32]
}
 800629a:	bf00      	nop
 800629c:	371c      	adds	r7, #28
 800629e:	46bd      	mov	sp, r7
 80062a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a4:	4770      	bx	lr
 80062a6:	bf00      	nop
 80062a8:	feff8fff 	.word	0xfeff8fff
 80062ac:	40010000 	.word	0x40010000
 80062b0:	40010400 	.word	0x40010400

080062b4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80062b4:	b480      	push	{r7}
 80062b6:	b087      	sub	sp, #28
 80062b8:	af00      	add	r7, sp, #0
 80062ba:	6078      	str	r0, [r7, #4]
 80062bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	6a1b      	ldr	r3, [r3, #32]
 80062c2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	6a1b      	ldr	r3, [r3, #32]
 80062c8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	685b      	ldr	r3, [r3, #4]
 80062d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	69db      	ldr	r3, [r3, #28]
 80062da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80062dc:	68fa      	ldr	r2, [r7, #12]
 80062de:	4b2d      	ldr	r3, [pc, #180]	@ (8006394 <TIM_OC3_SetConfig+0xe0>)
 80062e0:	4013      	ands	r3, r2
 80062e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	f023 0303 	bic.w	r3, r3, #3
 80062ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80062ec:	683b      	ldr	r3, [r7, #0]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	68fa      	ldr	r2, [r7, #12]
 80062f2:	4313      	orrs	r3, r2
 80062f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80062f6:	697b      	ldr	r3, [r7, #20]
 80062f8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80062fc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80062fe:	683b      	ldr	r3, [r7, #0]
 8006300:	689b      	ldr	r3, [r3, #8]
 8006302:	021b      	lsls	r3, r3, #8
 8006304:	697a      	ldr	r2, [r7, #20]
 8006306:	4313      	orrs	r3, r2
 8006308:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	4a22      	ldr	r2, [pc, #136]	@ (8006398 <TIM_OC3_SetConfig+0xe4>)
 800630e:	4293      	cmp	r3, r2
 8006310:	d003      	beq.n	800631a <TIM_OC3_SetConfig+0x66>
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	4a21      	ldr	r2, [pc, #132]	@ (800639c <TIM_OC3_SetConfig+0xe8>)
 8006316:	4293      	cmp	r3, r2
 8006318:	d10d      	bne.n	8006336 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800631a:	697b      	ldr	r3, [r7, #20]
 800631c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006320:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006322:	683b      	ldr	r3, [r7, #0]
 8006324:	68db      	ldr	r3, [r3, #12]
 8006326:	021b      	lsls	r3, r3, #8
 8006328:	697a      	ldr	r2, [r7, #20]
 800632a:	4313      	orrs	r3, r2
 800632c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800632e:	697b      	ldr	r3, [r7, #20]
 8006330:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006334:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	4a17      	ldr	r2, [pc, #92]	@ (8006398 <TIM_OC3_SetConfig+0xe4>)
 800633a:	4293      	cmp	r3, r2
 800633c:	d003      	beq.n	8006346 <TIM_OC3_SetConfig+0x92>
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	4a16      	ldr	r2, [pc, #88]	@ (800639c <TIM_OC3_SetConfig+0xe8>)
 8006342:	4293      	cmp	r3, r2
 8006344:	d113      	bne.n	800636e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006346:	693b      	ldr	r3, [r7, #16]
 8006348:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800634c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800634e:	693b      	ldr	r3, [r7, #16]
 8006350:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006354:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006356:	683b      	ldr	r3, [r7, #0]
 8006358:	695b      	ldr	r3, [r3, #20]
 800635a:	011b      	lsls	r3, r3, #4
 800635c:	693a      	ldr	r2, [r7, #16]
 800635e:	4313      	orrs	r3, r2
 8006360:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006362:	683b      	ldr	r3, [r7, #0]
 8006364:	699b      	ldr	r3, [r3, #24]
 8006366:	011b      	lsls	r3, r3, #4
 8006368:	693a      	ldr	r2, [r7, #16]
 800636a:	4313      	orrs	r3, r2
 800636c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	693a      	ldr	r2, [r7, #16]
 8006372:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	68fa      	ldr	r2, [r7, #12]
 8006378:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800637a:	683b      	ldr	r3, [r7, #0]
 800637c:	685a      	ldr	r2, [r3, #4]
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	697a      	ldr	r2, [r7, #20]
 8006386:	621a      	str	r2, [r3, #32]
}
 8006388:	bf00      	nop
 800638a:	371c      	adds	r7, #28
 800638c:	46bd      	mov	sp, r7
 800638e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006392:	4770      	bx	lr
 8006394:	fffeff8f 	.word	0xfffeff8f
 8006398:	40010000 	.word	0x40010000
 800639c:	40010400 	.word	0x40010400

080063a0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80063a0:	b480      	push	{r7}
 80063a2:	b087      	sub	sp, #28
 80063a4:	af00      	add	r7, sp, #0
 80063a6:	6078      	str	r0, [r7, #4]
 80063a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	6a1b      	ldr	r3, [r3, #32]
 80063ae:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	6a1b      	ldr	r3, [r3, #32]
 80063b4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	685b      	ldr	r3, [r3, #4]
 80063c0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	69db      	ldr	r3, [r3, #28]
 80063c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80063c8:	68fa      	ldr	r2, [r7, #12]
 80063ca:	4b1e      	ldr	r3, [pc, #120]	@ (8006444 <TIM_OC4_SetConfig+0xa4>)
 80063cc:	4013      	ands	r3, r2
 80063ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80063d6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80063d8:	683b      	ldr	r3, [r7, #0]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	021b      	lsls	r3, r3, #8
 80063de:	68fa      	ldr	r2, [r7, #12]
 80063e0:	4313      	orrs	r3, r2
 80063e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80063e4:	693b      	ldr	r3, [r7, #16]
 80063e6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80063ea:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80063ec:	683b      	ldr	r3, [r7, #0]
 80063ee:	689b      	ldr	r3, [r3, #8]
 80063f0:	031b      	lsls	r3, r3, #12
 80063f2:	693a      	ldr	r2, [r7, #16]
 80063f4:	4313      	orrs	r3, r2
 80063f6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	4a13      	ldr	r2, [pc, #76]	@ (8006448 <TIM_OC4_SetConfig+0xa8>)
 80063fc:	4293      	cmp	r3, r2
 80063fe:	d003      	beq.n	8006408 <TIM_OC4_SetConfig+0x68>
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	4a12      	ldr	r2, [pc, #72]	@ (800644c <TIM_OC4_SetConfig+0xac>)
 8006404:	4293      	cmp	r3, r2
 8006406:	d109      	bne.n	800641c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006408:	697b      	ldr	r3, [r7, #20]
 800640a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800640e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006410:	683b      	ldr	r3, [r7, #0]
 8006412:	695b      	ldr	r3, [r3, #20]
 8006414:	019b      	lsls	r3, r3, #6
 8006416:	697a      	ldr	r2, [r7, #20]
 8006418:	4313      	orrs	r3, r2
 800641a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	697a      	ldr	r2, [r7, #20]
 8006420:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	68fa      	ldr	r2, [r7, #12]
 8006426:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006428:	683b      	ldr	r3, [r7, #0]
 800642a:	685a      	ldr	r2, [r3, #4]
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	693a      	ldr	r2, [r7, #16]
 8006434:	621a      	str	r2, [r3, #32]
}
 8006436:	bf00      	nop
 8006438:	371c      	adds	r7, #28
 800643a:	46bd      	mov	sp, r7
 800643c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006440:	4770      	bx	lr
 8006442:	bf00      	nop
 8006444:	feff8fff 	.word	0xfeff8fff
 8006448:	40010000 	.word	0x40010000
 800644c:	40010400 	.word	0x40010400

08006450 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006450:	b480      	push	{r7}
 8006452:	b087      	sub	sp, #28
 8006454:	af00      	add	r7, sp, #0
 8006456:	6078      	str	r0, [r7, #4]
 8006458:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	6a1b      	ldr	r3, [r3, #32]
 800645e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	6a1b      	ldr	r3, [r3, #32]
 8006464:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	685b      	ldr	r3, [r3, #4]
 8006470:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006476:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006478:	68fa      	ldr	r2, [r7, #12]
 800647a:	4b1b      	ldr	r3, [pc, #108]	@ (80064e8 <TIM_OC5_SetConfig+0x98>)
 800647c:	4013      	ands	r3, r2
 800647e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006480:	683b      	ldr	r3, [r7, #0]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	68fa      	ldr	r2, [r7, #12]
 8006486:	4313      	orrs	r3, r2
 8006488:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800648a:	693b      	ldr	r3, [r7, #16]
 800648c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8006490:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006492:	683b      	ldr	r3, [r7, #0]
 8006494:	689b      	ldr	r3, [r3, #8]
 8006496:	041b      	lsls	r3, r3, #16
 8006498:	693a      	ldr	r2, [r7, #16]
 800649a:	4313      	orrs	r3, r2
 800649c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	4a12      	ldr	r2, [pc, #72]	@ (80064ec <TIM_OC5_SetConfig+0x9c>)
 80064a2:	4293      	cmp	r3, r2
 80064a4:	d003      	beq.n	80064ae <TIM_OC5_SetConfig+0x5e>
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	4a11      	ldr	r2, [pc, #68]	@ (80064f0 <TIM_OC5_SetConfig+0xa0>)
 80064aa:	4293      	cmp	r3, r2
 80064ac:	d109      	bne.n	80064c2 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80064ae:	697b      	ldr	r3, [r7, #20]
 80064b0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80064b4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80064b6:	683b      	ldr	r3, [r7, #0]
 80064b8:	695b      	ldr	r3, [r3, #20]
 80064ba:	021b      	lsls	r3, r3, #8
 80064bc:	697a      	ldr	r2, [r7, #20]
 80064be:	4313      	orrs	r3, r2
 80064c0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	697a      	ldr	r2, [r7, #20]
 80064c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	68fa      	ldr	r2, [r7, #12]
 80064cc:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80064ce:	683b      	ldr	r3, [r7, #0]
 80064d0:	685a      	ldr	r2, [r3, #4]
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	693a      	ldr	r2, [r7, #16]
 80064da:	621a      	str	r2, [r3, #32]
}
 80064dc:	bf00      	nop
 80064de:	371c      	adds	r7, #28
 80064e0:	46bd      	mov	sp, r7
 80064e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e6:	4770      	bx	lr
 80064e8:	fffeff8f 	.word	0xfffeff8f
 80064ec:	40010000 	.word	0x40010000
 80064f0:	40010400 	.word	0x40010400

080064f4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80064f4:	b480      	push	{r7}
 80064f6:	b087      	sub	sp, #28
 80064f8:	af00      	add	r7, sp, #0
 80064fa:	6078      	str	r0, [r7, #4]
 80064fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	6a1b      	ldr	r3, [r3, #32]
 8006502:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	6a1b      	ldr	r3, [r3, #32]
 8006508:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	685b      	ldr	r3, [r3, #4]
 8006514:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800651a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800651c:	68fa      	ldr	r2, [r7, #12]
 800651e:	4b1c      	ldr	r3, [pc, #112]	@ (8006590 <TIM_OC6_SetConfig+0x9c>)
 8006520:	4013      	ands	r3, r2
 8006522:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006524:	683b      	ldr	r3, [r7, #0]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	021b      	lsls	r3, r3, #8
 800652a:	68fa      	ldr	r2, [r7, #12]
 800652c:	4313      	orrs	r3, r2
 800652e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006530:	693b      	ldr	r3, [r7, #16]
 8006532:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006536:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006538:	683b      	ldr	r3, [r7, #0]
 800653a:	689b      	ldr	r3, [r3, #8]
 800653c:	051b      	lsls	r3, r3, #20
 800653e:	693a      	ldr	r2, [r7, #16]
 8006540:	4313      	orrs	r3, r2
 8006542:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	4a13      	ldr	r2, [pc, #76]	@ (8006594 <TIM_OC6_SetConfig+0xa0>)
 8006548:	4293      	cmp	r3, r2
 800654a:	d003      	beq.n	8006554 <TIM_OC6_SetConfig+0x60>
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	4a12      	ldr	r2, [pc, #72]	@ (8006598 <TIM_OC6_SetConfig+0xa4>)
 8006550:	4293      	cmp	r3, r2
 8006552:	d109      	bne.n	8006568 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006554:	697b      	ldr	r3, [r7, #20]
 8006556:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800655a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800655c:	683b      	ldr	r3, [r7, #0]
 800655e:	695b      	ldr	r3, [r3, #20]
 8006560:	029b      	lsls	r3, r3, #10
 8006562:	697a      	ldr	r2, [r7, #20]
 8006564:	4313      	orrs	r3, r2
 8006566:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	697a      	ldr	r2, [r7, #20]
 800656c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	68fa      	ldr	r2, [r7, #12]
 8006572:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006574:	683b      	ldr	r3, [r7, #0]
 8006576:	685a      	ldr	r2, [r3, #4]
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	693a      	ldr	r2, [r7, #16]
 8006580:	621a      	str	r2, [r3, #32]
}
 8006582:	bf00      	nop
 8006584:	371c      	adds	r7, #28
 8006586:	46bd      	mov	sp, r7
 8006588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800658c:	4770      	bx	lr
 800658e:	bf00      	nop
 8006590:	feff8fff 	.word	0xfeff8fff
 8006594:	40010000 	.word	0x40010000
 8006598:	40010400 	.word	0x40010400

0800659c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800659c:	b480      	push	{r7}
 800659e:	b087      	sub	sp, #28
 80065a0:	af00      	add	r7, sp, #0
 80065a2:	60f8      	str	r0, [r7, #12]
 80065a4:	60b9      	str	r1, [r7, #8]
 80065a6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	6a1b      	ldr	r3, [r3, #32]
 80065ac:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	6a1b      	ldr	r3, [r3, #32]
 80065b2:	f023 0201 	bic.w	r2, r3, #1
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	699b      	ldr	r3, [r3, #24]
 80065be:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80065c0:	693b      	ldr	r3, [r7, #16]
 80065c2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80065c6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	011b      	lsls	r3, r3, #4
 80065cc:	693a      	ldr	r2, [r7, #16]
 80065ce:	4313      	orrs	r3, r2
 80065d0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80065d2:	697b      	ldr	r3, [r7, #20]
 80065d4:	f023 030a 	bic.w	r3, r3, #10
 80065d8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80065da:	697a      	ldr	r2, [r7, #20]
 80065dc:	68bb      	ldr	r3, [r7, #8]
 80065de:	4313      	orrs	r3, r2
 80065e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	693a      	ldr	r2, [r7, #16]
 80065e6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	697a      	ldr	r2, [r7, #20]
 80065ec:	621a      	str	r2, [r3, #32]
}
 80065ee:	bf00      	nop
 80065f0:	371c      	adds	r7, #28
 80065f2:	46bd      	mov	sp, r7
 80065f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f8:	4770      	bx	lr

080065fa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80065fa:	b480      	push	{r7}
 80065fc:	b087      	sub	sp, #28
 80065fe:	af00      	add	r7, sp, #0
 8006600:	60f8      	str	r0, [r7, #12]
 8006602:	60b9      	str	r1, [r7, #8]
 8006604:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	6a1b      	ldr	r3, [r3, #32]
 800660a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	6a1b      	ldr	r3, [r3, #32]
 8006610:	f023 0210 	bic.w	r2, r3, #16
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	699b      	ldr	r3, [r3, #24]
 800661c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800661e:	693b      	ldr	r3, [r7, #16]
 8006620:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006624:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	031b      	lsls	r3, r3, #12
 800662a:	693a      	ldr	r2, [r7, #16]
 800662c:	4313      	orrs	r3, r2
 800662e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006630:	697b      	ldr	r3, [r7, #20]
 8006632:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006636:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006638:	68bb      	ldr	r3, [r7, #8]
 800663a:	011b      	lsls	r3, r3, #4
 800663c:	697a      	ldr	r2, [r7, #20]
 800663e:	4313      	orrs	r3, r2
 8006640:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	693a      	ldr	r2, [r7, #16]
 8006646:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	697a      	ldr	r2, [r7, #20]
 800664c:	621a      	str	r2, [r3, #32]
}
 800664e:	bf00      	nop
 8006650:	371c      	adds	r7, #28
 8006652:	46bd      	mov	sp, r7
 8006654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006658:	4770      	bx	lr

0800665a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800665a:	b480      	push	{r7}
 800665c:	b085      	sub	sp, #20
 800665e:	af00      	add	r7, sp, #0
 8006660:	6078      	str	r0, [r7, #4]
 8006662:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	689b      	ldr	r3, [r3, #8]
 8006668:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006670:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006672:	683a      	ldr	r2, [r7, #0]
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	4313      	orrs	r3, r2
 8006678:	f043 0307 	orr.w	r3, r3, #7
 800667c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	68fa      	ldr	r2, [r7, #12]
 8006682:	609a      	str	r2, [r3, #8]
}
 8006684:	bf00      	nop
 8006686:	3714      	adds	r7, #20
 8006688:	46bd      	mov	sp, r7
 800668a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800668e:	4770      	bx	lr

08006690 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006690:	b480      	push	{r7}
 8006692:	b087      	sub	sp, #28
 8006694:	af00      	add	r7, sp, #0
 8006696:	60f8      	str	r0, [r7, #12]
 8006698:	60b9      	str	r1, [r7, #8]
 800669a:	607a      	str	r2, [r7, #4]
 800669c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	689b      	ldr	r3, [r3, #8]
 80066a2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80066a4:	697b      	ldr	r3, [r7, #20]
 80066a6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80066aa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80066ac:	683b      	ldr	r3, [r7, #0]
 80066ae:	021a      	lsls	r2, r3, #8
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	431a      	orrs	r2, r3
 80066b4:	68bb      	ldr	r3, [r7, #8]
 80066b6:	4313      	orrs	r3, r2
 80066b8:	697a      	ldr	r2, [r7, #20]
 80066ba:	4313      	orrs	r3, r2
 80066bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	697a      	ldr	r2, [r7, #20]
 80066c2:	609a      	str	r2, [r3, #8]
}
 80066c4:	bf00      	nop
 80066c6:	371c      	adds	r7, #28
 80066c8:	46bd      	mov	sp, r7
 80066ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ce:	4770      	bx	lr

080066d0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80066d0:	b480      	push	{r7}
 80066d2:	b087      	sub	sp, #28
 80066d4:	af00      	add	r7, sp, #0
 80066d6:	60f8      	str	r0, [r7, #12]
 80066d8:	60b9      	str	r1, [r7, #8]
 80066da:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80066dc:	68bb      	ldr	r3, [r7, #8]
 80066de:	f003 031f 	and.w	r3, r3, #31
 80066e2:	2201      	movs	r2, #1
 80066e4:	fa02 f303 	lsl.w	r3, r2, r3
 80066e8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	6a1a      	ldr	r2, [r3, #32]
 80066ee:	697b      	ldr	r3, [r7, #20]
 80066f0:	43db      	mvns	r3, r3
 80066f2:	401a      	ands	r2, r3
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	6a1a      	ldr	r2, [r3, #32]
 80066fc:	68bb      	ldr	r3, [r7, #8]
 80066fe:	f003 031f 	and.w	r3, r3, #31
 8006702:	6879      	ldr	r1, [r7, #4]
 8006704:	fa01 f303 	lsl.w	r3, r1, r3
 8006708:	431a      	orrs	r2, r3
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	621a      	str	r2, [r3, #32]
}
 800670e:	bf00      	nop
 8006710:	371c      	adds	r7, #28
 8006712:	46bd      	mov	sp, r7
 8006714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006718:	4770      	bx	lr
	...

0800671c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800671c:	b480      	push	{r7}
 800671e:	b085      	sub	sp, #20
 8006720:	af00      	add	r7, sp, #0
 8006722:	6078      	str	r0, [r7, #4]
 8006724:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800672c:	2b01      	cmp	r3, #1
 800672e:	d101      	bne.n	8006734 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006730:	2302      	movs	r3, #2
 8006732:	e06d      	b.n	8006810 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	2201      	movs	r2, #1
 8006738:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	2202      	movs	r2, #2
 8006740:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	685b      	ldr	r3, [r3, #4]
 800674a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	689b      	ldr	r3, [r3, #8]
 8006752:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	4a30      	ldr	r2, [pc, #192]	@ (800681c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800675a:	4293      	cmp	r3, r2
 800675c:	d004      	beq.n	8006768 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	4a2f      	ldr	r2, [pc, #188]	@ (8006820 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006764:	4293      	cmp	r3, r2
 8006766:	d108      	bne.n	800677a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800676e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006770:	683b      	ldr	r3, [r7, #0]
 8006772:	685b      	ldr	r3, [r3, #4]
 8006774:	68fa      	ldr	r2, [r7, #12]
 8006776:	4313      	orrs	r3, r2
 8006778:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006780:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006782:	683b      	ldr	r3, [r7, #0]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	68fa      	ldr	r2, [r7, #12]
 8006788:	4313      	orrs	r3, r2
 800678a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	68fa      	ldr	r2, [r7, #12]
 8006792:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	4a20      	ldr	r2, [pc, #128]	@ (800681c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800679a:	4293      	cmp	r3, r2
 800679c:	d022      	beq.n	80067e4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80067a6:	d01d      	beq.n	80067e4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	4a1d      	ldr	r2, [pc, #116]	@ (8006824 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80067ae:	4293      	cmp	r3, r2
 80067b0:	d018      	beq.n	80067e4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	4a1c      	ldr	r2, [pc, #112]	@ (8006828 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80067b8:	4293      	cmp	r3, r2
 80067ba:	d013      	beq.n	80067e4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	4a1a      	ldr	r2, [pc, #104]	@ (800682c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80067c2:	4293      	cmp	r3, r2
 80067c4:	d00e      	beq.n	80067e4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	4a15      	ldr	r2, [pc, #84]	@ (8006820 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80067cc:	4293      	cmp	r3, r2
 80067ce:	d009      	beq.n	80067e4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	4a16      	ldr	r2, [pc, #88]	@ (8006830 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80067d6:	4293      	cmp	r3, r2
 80067d8:	d004      	beq.n	80067e4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	4a15      	ldr	r2, [pc, #84]	@ (8006834 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80067e0:	4293      	cmp	r3, r2
 80067e2:	d10c      	bne.n	80067fe <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80067e4:	68bb      	ldr	r3, [r7, #8]
 80067e6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80067ea:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80067ec:	683b      	ldr	r3, [r7, #0]
 80067ee:	689b      	ldr	r3, [r3, #8]
 80067f0:	68ba      	ldr	r2, [r7, #8]
 80067f2:	4313      	orrs	r3, r2
 80067f4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	68ba      	ldr	r2, [r7, #8]
 80067fc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	2201      	movs	r2, #1
 8006802:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	2200      	movs	r2, #0
 800680a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800680e:	2300      	movs	r3, #0
}
 8006810:	4618      	mov	r0, r3
 8006812:	3714      	adds	r7, #20
 8006814:	46bd      	mov	sp, r7
 8006816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800681a:	4770      	bx	lr
 800681c:	40010000 	.word	0x40010000
 8006820:	40010400 	.word	0x40010400
 8006824:	40000400 	.word	0x40000400
 8006828:	40000800 	.word	0x40000800
 800682c:	40000c00 	.word	0x40000c00
 8006830:	40014000 	.word	0x40014000
 8006834:	40001800 	.word	0x40001800

08006838 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006838:	b480      	push	{r7}
 800683a:	b083      	sub	sp, #12
 800683c:	af00      	add	r7, sp, #0
 800683e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006840:	bf00      	nop
 8006842:	370c      	adds	r7, #12
 8006844:	46bd      	mov	sp, r7
 8006846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800684a:	4770      	bx	lr

0800684c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800684c:	b480      	push	{r7}
 800684e:	b083      	sub	sp, #12
 8006850:	af00      	add	r7, sp, #0
 8006852:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006854:	bf00      	nop
 8006856:	370c      	adds	r7, #12
 8006858:	46bd      	mov	sp, r7
 800685a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800685e:	4770      	bx	lr

08006860 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006860:	b480      	push	{r7}
 8006862:	b083      	sub	sp, #12
 8006864:	af00      	add	r7, sp, #0
 8006866:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006868:	bf00      	nop
 800686a:	370c      	adds	r7, #12
 800686c:	46bd      	mov	sp, r7
 800686e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006872:	4770      	bx	lr

08006874 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006874:	b580      	push	{r7, lr}
 8006876:	b082      	sub	sp, #8
 8006878:	af00      	add	r7, sp, #0
 800687a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	2b00      	cmp	r3, #0
 8006880:	d101      	bne.n	8006886 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006882:	2301      	movs	r3, #1
 8006884:	e040      	b.n	8006908 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800688a:	2b00      	cmp	r3, #0
 800688c:	d106      	bne.n	800689c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	2200      	movs	r2, #0
 8006892:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006896:	6878      	ldr	r0, [r7, #4]
 8006898:	f7fc f952 	bl	8002b40 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	2224      	movs	r2, #36	@ 0x24
 80068a0:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	681a      	ldr	r2, [r3, #0]
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	f022 0201 	bic.w	r2, r2, #1
 80068b0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d002      	beq.n	80068c0 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80068ba:	6878      	ldr	r0, [r7, #4]
 80068bc:	f000 fd98 	bl	80073f0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80068c0:	6878      	ldr	r0, [r7, #4]
 80068c2:	f000 fb31 	bl	8006f28 <UART_SetConfig>
 80068c6:	4603      	mov	r3, r0
 80068c8:	2b01      	cmp	r3, #1
 80068ca:	d101      	bne.n	80068d0 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80068cc:	2301      	movs	r3, #1
 80068ce:	e01b      	b.n	8006908 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	685a      	ldr	r2, [r3, #4]
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80068de:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	689a      	ldr	r2, [r3, #8]
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80068ee:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	681a      	ldr	r2, [r3, #0]
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	f042 0201 	orr.w	r2, r2, #1
 80068fe:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006900:	6878      	ldr	r0, [r7, #4]
 8006902:	f000 fe17 	bl	8007534 <UART_CheckIdleState>
 8006906:	4603      	mov	r3, r0
}
 8006908:	4618      	mov	r0, r3
 800690a:	3708      	adds	r7, #8
 800690c:	46bd      	mov	sp, r7
 800690e:	bd80      	pop	{r7, pc}

08006910 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006910:	b580      	push	{r7, lr}
 8006912:	b0ba      	sub	sp, #232	@ 0xe8
 8006914:	af00      	add	r7, sp, #0
 8006916:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	69db      	ldr	r3, [r3, #28]
 800691e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	689b      	ldr	r3, [r3, #8]
 8006932:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006936:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800693a:	f640 030f 	movw	r3, #2063	@ 0x80f
 800693e:	4013      	ands	r3, r2
 8006940:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8006944:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006948:	2b00      	cmp	r3, #0
 800694a:	d115      	bne.n	8006978 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800694c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006950:	f003 0320 	and.w	r3, r3, #32
 8006954:	2b00      	cmp	r3, #0
 8006956:	d00f      	beq.n	8006978 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006958:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800695c:	f003 0320 	and.w	r3, r3, #32
 8006960:	2b00      	cmp	r3, #0
 8006962:	d009      	beq.n	8006978 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006968:	2b00      	cmp	r3, #0
 800696a:	f000 82b1 	beq.w	8006ed0 <HAL_UART_IRQHandler+0x5c0>
      {
        huart->RxISR(huart);
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006972:	6878      	ldr	r0, [r7, #4]
 8006974:	4798      	blx	r3
      }
      return;
 8006976:	e2ab      	b.n	8006ed0 <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006978:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800697c:	2b00      	cmp	r3, #0
 800697e:	f000 8117 	beq.w	8006bb0 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8006982:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006986:	f003 0301 	and.w	r3, r3, #1
 800698a:	2b00      	cmp	r3, #0
 800698c:	d106      	bne.n	800699c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800698e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8006992:	4b85      	ldr	r3, [pc, #532]	@ (8006ba8 <HAL_UART_IRQHandler+0x298>)
 8006994:	4013      	ands	r3, r2
 8006996:	2b00      	cmp	r3, #0
 8006998:	f000 810a 	beq.w	8006bb0 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800699c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80069a0:	f003 0301 	and.w	r3, r3, #1
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d011      	beq.n	80069cc <HAL_UART_IRQHandler+0xbc>
 80069a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80069ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d00b      	beq.n	80069cc <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	2201      	movs	r2, #1
 80069ba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80069c2:	f043 0201 	orr.w	r2, r3, #1
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80069cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80069d0:	f003 0302 	and.w	r3, r3, #2
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d011      	beq.n	80069fc <HAL_UART_IRQHandler+0xec>
 80069d8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80069dc:	f003 0301 	and.w	r3, r3, #1
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d00b      	beq.n	80069fc <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	2202      	movs	r2, #2
 80069ea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80069f2:	f043 0204 	orr.w	r2, r3, #4
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80069fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006a00:	f003 0304 	and.w	r3, r3, #4
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d011      	beq.n	8006a2c <HAL_UART_IRQHandler+0x11c>
 8006a08:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006a0c:	f003 0301 	and.w	r3, r3, #1
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d00b      	beq.n	8006a2c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	2204      	movs	r2, #4
 8006a1a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006a22:	f043 0202 	orr.w	r2, r3, #2
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006a2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006a30:	f003 0308 	and.w	r3, r3, #8
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d017      	beq.n	8006a68 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006a38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006a3c:	f003 0320 	and.w	r3, r3, #32
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d105      	bne.n	8006a50 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8006a44:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006a48:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d00b      	beq.n	8006a68 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	2208      	movs	r2, #8
 8006a56:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006a5e:	f043 0208 	orr.w	r2, r3, #8
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006a68:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006a6c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d012      	beq.n	8006a9a <HAL_UART_IRQHandler+0x18a>
 8006a74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006a78:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d00c      	beq.n	8006a9a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006a88:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006a90:	f043 0220 	orr.w	r2, r3, #32
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	f000 8217 	beq.w	8006ed4 <HAL_UART_IRQHandler+0x5c4>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8006aa6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006aaa:	f003 0320 	and.w	r3, r3, #32
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d00d      	beq.n	8006ace <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006ab2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006ab6:	f003 0320 	and.w	r3, r3, #32
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d007      	beq.n	8006ace <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d003      	beq.n	8006ace <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006aca:	6878      	ldr	r0, [r7, #4]
 8006acc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006ad4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	689b      	ldr	r3, [r3, #8]
 8006ade:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ae2:	2b40      	cmp	r3, #64	@ 0x40
 8006ae4:	d005      	beq.n	8006af2 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006ae6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006aea:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d04f      	beq.n	8006b92 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006af2:	6878      	ldr	r0, [r7, #4]
 8006af4:	f000 fde2 	bl	80076bc <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	689b      	ldr	r3, [r3, #8]
 8006afe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b02:	2b40      	cmp	r3, #64	@ 0x40
 8006b04:	d141      	bne.n	8006b8a <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	3308      	adds	r3, #8
 8006b0c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b10:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006b14:	e853 3f00 	ldrex	r3, [r3]
 8006b18:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8006b1c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006b20:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006b24:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	3308      	adds	r3, #8
 8006b2e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8006b32:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8006b36:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b3a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8006b3e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8006b42:	e841 2300 	strex	r3, r2, [r1]
 8006b46:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8006b4a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d1d9      	bne.n	8006b06 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d013      	beq.n	8006b82 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006b5e:	4a13      	ldr	r2, [pc, #76]	@ (8006bac <HAL_UART_IRQHandler+0x29c>)
 8006b60:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006b66:	4618      	mov	r0, r3
 8006b68:	f7fd f80b 	bl	8003b82 <HAL_DMA_Abort_IT>
 8006b6c:	4603      	mov	r3, r0
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d017      	beq.n	8006ba2 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006b76:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006b78:	687a      	ldr	r2, [r7, #4]
 8006b7a:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8006b7c:	4610      	mov	r0, r2
 8006b7e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b80:	e00f      	b.n	8006ba2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006b82:	6878      	ldr	r0, [r7, #4]
 8006b84:	f000 f9ba 	bl	8006efc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b88:	e00b      	b.n	8006ba2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006b8a:	6878      	ldr	r0, [r7, #4]
 8006b8c:	f000 f9b6 	bl	8006efc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006b90:	e007      	b.n	8006ba2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006b92:	6878      	ldr	r0, [r7, #4]
 8006b94:	f000 f9b2 	bl	8006efc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	2200      	movs	r2, #0
 8006b9c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8006ba0:	e198      	b.n	8006ed4 <HAL_UART_IRQHandler+0x5c4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006ba2:	bf00      	nop
    return;
 8006ba4:	e196      	b.n	8006ed4 <HAL_UART_IRQHandler+0x5c4>
 8006ba6:	bf00      	nop
 8006ba8:	04000120 	.word	0x04000120
 8006bac:	08007785 	.word	0x08007785

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006bb4:	2b01      	cmp	r3, #1
 8006bb6:	f040 8166 	bne.w	8006e86 <HAL_UART_IRQHandler+0x576>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006bba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006bbe:	f003 0310 	and.w	r3, r3, #16
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	f000 815f 	beq.w	8006e86 <HAL_UART_IRQHandler+0x576>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006bc8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006bcc:	f003 0310 	and.w	r3, r3, #16
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	f000 8158 	beq.w	8006e86 <HAL_UART_IRQHandler+0x576>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	2210      	movs	r2, #16
 8006bdc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	689b      	ldr	r3, [r3, #8]
 8006be4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006be8:	2b40      	cmp	r3, #64	@ 0x40
 8006bea:	f040 80d0 	bne.w	8006d8e <HAL_UART_IRQHandler+0x47e>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	685b      	ldr	r3, [r3, #4]
 8006bf6:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006bfa:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	f000 80ab 	beq.w	8006d5a <HAL_UART_IRQHandler+0x44a>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8006c0a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006c0e:	429a      	cmp	r2, r3
 8006c10:	f080 80a3 	bcs.w	8006d5a <HAL_UART_IRQHandler+0x44a>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006c1a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006c22:	69db      	ldr	r3, [r3, #28]
 8006c24:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006c28:	f000 8086 	beq.w	8006d38 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c34:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006c38:	e853 3f00 	ldrex	r3, [r3]
 8006c3c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8006c40:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006c44:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006c48:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	461a      	mov	r2, r3
 8006c52:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8006c56:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006c5a:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c5e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8006c62:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006c66:	e841 2300 	strex	r3, r2, [r1]
 8006c6a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8006c6e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d1da      	bne.n	8006c2c <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	3308      	adds	r3, #8
 8006c7c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c7e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006c80:	e853 3f00 	ldrex	r3, [r3]
 8006c84:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8006c86:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006c88:	f023 0301 	bic.w	r3, r3, #1
 8006c8c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	3308      	adds	r3, #8
 8006c96:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006c9a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8006c9e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ca0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8006ca2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8006ca6:	e841 2300 	strex	r3, r2, [r1]
 8006caa:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006cac:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d1e1      	bne.n	8006c76 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	3308      	adds	r3, #8
 8006cb8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cba:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006cbc:	e853 3f00 	ldrex	r3, [r3]
 8006cc0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8006cc2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006cc4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006cc8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	3308      	adds	r3, #8
 8006cd2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8006cd6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006cd8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cda:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006cdc:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8006cde:	e841 2300 	strex	r3, r2, [r1]
 8006ce2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006ce4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d1e3      	bne.n	8006cb2 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	2220      	movs	r2, #32
 8006cee:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	2200      	movs	r2, #0
 8006cf6:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cfe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006d00:	e853 3f00 	ldrex	r3, [r3]
 8006d04:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006d06:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006d08:	f023 0310 	bic.w	r3, r3, #16
 8006d0c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	461a      	mov	r2, r3
 8006d16:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006d1a:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006d1c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d1e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006d20:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006d22:	e841 2300 	strex	r3, r2, [r1]
 8006d26:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006d28:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d1e4      	bne.n	8006cf8 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006d32:	4618      	mov	r0, r3
 8006d34:	f7fc feb5 	bl	8003aa2 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	2202      	movs	r2, #2
 8006d3c:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006d4a:	b29b      	uxth	r3, r3
 8006d4c:	1ad3      	subs	r3, r2, r3
 8006d4e:	b29b      	uxth	r3, r3
 8006d50:	4619      	mov	r1, r3
 8006d52:	6878      	ldr	r0, [r7, #4]
 8006d54:	f000 f8dc 	bl	8006f10 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8006d58:	e0be      	b.n	8006ed8 <HAL_UART_IRQHandler+0x5c8>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8006d60:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006d64:	429a      	cmp	r2, r3
 8006d66:	f040 80b7 	bne.w	8006ed8 <HAL_UART_IRQHandler+0x5c8>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006d6e:	69db      	ldr	r3, [r3, #28]
 8006d70:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006d74:	f040 80b0 	bne.w	8006ed8 <HAL_UART_IRQHandler+0x5c8>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	2202      	movs	r2, #2
 8006d7c:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8006d84:	4619      	mov	r1, r3
 8006d86:	6878      	ldr	r0, [r7, #4]
 8006d88:	f000 f8c2 	bl	8006f10 <HAL_UARTEx_RxEventCallback>
      return;
 8006d8c:	e0a4      	b.n	8006ed8 <HAL_UART_IRQHandler+0x5c8>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006d9a:	b29b      	uxth	r3, r3
 8006d9c:	1ad3      	subs	r3, r2, r3
 8006d9e:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006da8:	b29b      	uxth	r3, r3
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	f000 8096 	beq.w	8006edc <HAL_UART_IRQHandler+0x5cc>
          && (nb_rx_data > 0U))
 8006db0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	f000 8091 	beq.w	8006edc <HAL_UART_IRQHandler+0x5cc>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dc0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006dc2:	e853 3f00 	ldrex	r3, [r3]
 8006dc6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006dc8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006dca:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006dce:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	461a      	mov	r2, r3
 8006dd8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006ddc:	647b      	str	r3, [r7, #68]	@ 0x44
 8006dde:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006de0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006de2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006de4:	e841 2300 	strex	r3, r2, [r1]
 8006de8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006dea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d1e4      	bne.n	8006dba <HAL_UART_IRQHandler+0x4aa>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	3308      	adds	r3, #8
 8006df6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006df8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006dfa:	e853 3f00 	ldrex	r3, [r3]
 8006dfe:	623b      	str	r3, [r7, #32]
   return(result);
 8006e00:	6a3b      	ldr	r3, [r7, #32]
 8006e02:	f023 0301 	bic.w	r3, r3, #1
 8006e06:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	3308      	adds	r3, #8
 8006e10:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8006e14:	633a      	str	r2, [r7, #48]	@ 0x30
 8006e16:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e18:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006e1a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006e1c:	e841 2300 	strex	r3, r2, [r1]
 8006e20:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006e22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d1e3      	bne.n	8006df0 <HAL_UART_IRQHandler+0x4e0>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	2220      	movs	r2, #32
 8006e2c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	2200      	movs	r2, #0
 8006e34:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	2200      	movs	r2, #0
 8006e3a:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e42:	693b      	ldr	r3, [r7, #16]
 8006e44:	e853 3f00 	ldrex	r3, [r3]
 8006e48:	60fb      	str	r3, [r7, #12]
   return(result);
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	f023 0310 	bic.w	r3, r3, #16
 8006e50:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	461a      	mov	r2, r3
 8006e5a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8006e5e:	61fb      	str	r3, [r7, #28]
 8006e60:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e62:	69b9      	ldr	r1, [r7, #24]
 8006e64:	69fa      	ldr	r2, [r7, #28]
 8006e66:	e841 2300 	strex	r3, r2, [r1]
 8006e6a:	617b      	str	r3, [r7, #20]
   return(result);
 8006e6c:	697b      	ldr	r3, [r7, #20]
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d1e4      	bne.n	8006e3c <HAL_UART_IRQHandler+0x52c>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	2202      	movs	r2, #2
 8006e76:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006e78:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006e7c:	4619      	mov	r1, r3
 8006e7e:	6878      	ldr	r0, [r7, #4]
 8006e80:	f000 f846 	bl	8006f10 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006e84:	e02a      	b.n	8006edc <HAL_UART_IRQHandler+0x5cc>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8006e86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006e8a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d00e      	beq.n	8006eb0 <HAL_UART_IRQHandler+0x5a0>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8006e92:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006e96:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d008      	beq.n	8006eb0 <HAL_UART_IRQHandler+0x5a0>
  {
    if (huart->TxISR != NULL)
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d01c      	beq.n	8006ee0 <HAL_UART_IRQHandler+0x5d0>
    {
      huart->TxISR(huart);
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006eaa:	6878      	ldr	r0, [r7, #4]
 8006eac:	4798      	blx	r3
    }
    return;
 8006eae:	e017      	b.n	8006ee0 <HAL_UART_IRQHandler+0x5d0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006eb0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006eb4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d012      	beq.n	8006ee2 <HAL_UART_IRQHandler+0x5d2>
 8006ebc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006ec0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d00c      	beq.n	8006ee2 <HAL_UART_IRQHandler+0x5d2>
  {
    UART_EndTransmit_IT(huart);
 8006ec8:	6878      	ldr	r0, [r7, #4]
 8006eca:	f000 fc6d 	bl	80077a8 <UART_EndTransmit_IT>
    return;
 8006ece:	e008      	b.n	8006ee2 <HAL_UART_IRQHandler+0x5d2>
      return;
 8006ed0:	bf00      	nop
 8006ed2:	e006      	b.n	8006ee2 <HAL_UART_IRQHandler+0x5d2>
    return;
 8006ed4:	bf00      	nop
 8006ed6:	e004      	b.n	8006ee2 <HAL_UART_IRQHandler+0x5d2>
      return;
 8006ed8:	bf00      	nop
 8006eda:	e002      	b.n	8006ee2 <HAL_UART_IRQHandler+0x5d2>
      return;
 8006edc:	bf00      	nop
 8006ede:	e000      	b.n	8006ee2 <HAL_UART_IRQHandler+0x5d2>
    return;
 8006ee0:	bf00      	nop
  }

}
 8006ee2:	37e8      	adds	r7, #232	@ 0xe8
 8006ee4:	46bd      	mov	sp, r7
 8006ee6:	bd80      	pop	{r7, pc}

08006ee8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006ee8:	b480      	push	{r7}
 8006eea:	b083      	sub	sp, #12
 8006eec:	af00      	add	r7, sp, #0
 8006eee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006ef0:	bf00      	nop
 8006ef2:	370c      	adds	r7, #12
 8006ef4:	46bd      	mov	sp, r7
 8006ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006efa:	4770      	bx	lr

08006efc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006efc:	b480      	push	{r7}
 8006efe:	b083      	sub	sp, #12
 8006f00:	af00      	add	r7, sp, #0
 8006f02:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006f04:	bf00      	nop
 8006f06:	370c      	adds	r7, #12
 8006f08:	46bd      	mov	sp, r7
 8006f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f0e:	4770      	bx	lr

08006f10 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006f10:	b480      	push	{r7}
 8006f12:	b083      	sub	sp, #12
 8006f14:	af00      	add	r7, sp, #0
 8006f16:	6078      	str	r0, [r7, #4]
 8006f18:	460b      	mov	r3, r1
 8006f1a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006f1c:	bf00      	nop
 8006f1e:	370c      	adds	r7, #12
 8006f20:	46bd      	mov	sp, r7
 8006f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f26:	4770      	bx	lr

08006f28 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006f28:	b580      	push	{r7, lr}
 8006f2a:	b088      	sub	sp, #32
 8006f2c:	af00      	add	r7, sp, #0
 8006f2e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006f30:	2300      	movs	r3, #0
 8006f32:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	689a      	ldr	r2, [r3, #8]
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	691b      	ldr	r3, [r3, #16]
 8006f3c:	431a      	orrs	r2, r3
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	695b      	ldr	r3, [r3, #20]
 8006f42:	431a      	orrs	r2, r3
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	69db      	ldr	r3, [r3, #28]
 8006f48:	4313      	orrs	r3, r2
 8006f4a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	681a      	ldr	r2, [r3, #0]
 8006f52:	4ba6      	ldr	r3, [pc, #664]	@ (80071ec <UART_SetConfig+0x2c4>)
 8006f54:	4013      	ands	r3, r2
 8006f56:	687a      	ldr	r2, [r7, #4]
 8006f58:	6812      	ldr	r2, [r2, #0]
 8006f5a:	6979      	ldr	r1, [r7, #20]
 8006f5c:	430b      	orrs	r3, r1
 8006f5e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	685b      	ldr	r3, [r3, #4]
 8006f66:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	68da      	ldr	r2, [r3, #12]
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	430a      	orrs	r2, r1
 8006f74:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	699b      	ldr	r3, [r3, #24]
 8006f7a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	6a1b      	ldr	r3, [r3, #32]
 8006f80:	697a      	ldr	r2, [r7, #20]
 8006f82:	4313      	orrs	r3, r2
 8006f84:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	689b      	ldr	r3, [r3, #8]
 8006f8c:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	697a      	ldr	r2, [r7, #20]
 8006f96:	430a      	orrs	r2, r1
 8006f98:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	4a94      	ldr	r2, [pc, #592]	@ (80071f0 <UART_SetConfig+0x2c8>)
 8006fa0:	4293      	cmp	r3, r2
 8006fa2:	d120      	bne.n	8006fe6 <UART_SetConfig+0xbe>
 8006fa4:	4b93      	ldr	r3, [pc, #588]	@ (80071f4 <UART_SetConfig+0x2cc>)
 8006fa6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006faa:	f003 0303 	and.w	r3, r3, #3
 8006fae:	2b03      	cmp	r3, #3
 8006fb0:	d816      	bhi.n	8006fe0 <UART_SetConfig+0xb8>
 8006fb2:	a201      	add	r2, pc, #4	@ (adr r2, 8006fb8 <UART_SetConfig+0x90>)
 8006fb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fb8:	08006fc9 	.word	0x08006fc9
 8006fbc:	08006fd5 	.word	0x08006fd5
 8006fc0:	08006fcf 	.word	0x08006fcf
 8006fc4:	08006fdb 	.word	0x08006fdb
 8006fc8:	2301      	movs	r3, #1
 8006fca:	77fb      	strb	r3, [r7, #31]
 8006fcc:	e150      	b.n	8007270 <UART_SetConfig+0x348>
 8006fce:	2302      	movs	r3, #2
 8006fd0:	77fb      	strb	r3, [r7, #31]
 8006fd2:	e14d      	b.n	8007270 <UART_SetConfig+0x348>
 8006fd4:	2304      	movs	r3, #4
 8006fd6:	77fb      	strb	r3, [r7, #31]
 8006fd8:	e14a      	b.n	8007270 <UART_SetConfig+0x348>
 8006fda:	2308      	movs	r3, #8
 8006fdc:	77fb      	strb	r3, [r7, #31]
 8006fde:	e147      	b.n	8007270 <UART_SetConfig+0x348>
 8006fe0:	2310      	movs	r3, #16
 8006fe2:	77fb      	strb	r3, [r7, #31]
 8006fe4:	e144      	b.n	8007270 <UART_SetConfig+0x348>
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	4a83      	ldr	r2, [pc, #524]	@ (80071f8 <UART_SetConfig+0x2d0>)
 8006fec:	4293      	cmp	r3, r2
 8006fee:	d132      	bne.n	8007056 <UART_SetConfig+0x12e>
 8006ff0:	4b80      	ldr	r3, [pc, #512]	@ (80071f4 <UART_SetConfig+0x2cc>)
 8006ff2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006ff6:	f003 030c 	and.w	r3, r3, #12
 8006ffa:	2b0c      	cmp	r3, #12
 8006ffc:	d828      	bhi.n	8007050 <UART_SetConfig+0x128>
 8006ffe:	a201      	add	r2, pc, #4	@ (adr r2, 8007004 <UART_SetConfig+0xdc>)
 8007000:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007004:	08007039 	.word	0x08007039
 8007008:	08007051 	.word	0x08007051
 800700c:	08007051 	.word	0x08007051
 8007010:	08007051 	.word	0x08007051
 8007014:	08007045 	.word	0x08007045
 8007018:	08007051 	.word	0x08007051
 800701c:	08007051 	.word	0x08007051
 8007020:	08007051 	.word	0x08007051
 8007024:	0800703f 	.word	0x0800703f
 8007028:	08007051 	.word	0x08007051
 800702c:	08007051 	.word	0x08007051
 8007030:	08007051 	.word	0x08007051
 8007034:	0800704b 	.word	0x0800704b
 8007038:	2300      	movs	r3, #0
 800703a:	77fb      	strb	r3, [r7, #31]
 800703c:	e118      	b.n	8007270 <UART_SetConfig+0x348>
 800703e:	2302      	movs	r3, #2
 8007040:	77fb      	strb	r3, [r7, #31]
 8007042:	e115      	b.n	8007270 <UART_SetConfig+0x348>
 8007044:	2304      	movs	r3, #4
 8007046:	77fb      	strb	r3, [r7, #31]
 8007048:	e112      	b.n	8007270 <UART_SetConfig+0x348>
 800704a:	2308      	movs	r3, #8
 800704c:	77fb      	strb	r3, [r7, #31]
 800704e:	e10f      	b.n	8007270 <UART_SetConfig+0x348>
 8007050:	2310      	movs	r3, #16
 8007052:	77fb      	strb	r3, [r7, #31]
 8007054:	e10c      	b.n	8007270 <UART_SetConfig+0x348>
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	4a68      	ldr	r2, [pc, #416]	@ (80071fc <UART_SetConfig+0x2d4>)
 800705c:	4293      	cmp	r3, r2
 800705e:	d120      	bne.n	80070a2 <UART_SetConfig+0x17a>
 8007060:	4b64      	ldr	r3, [pc, #400]	@ (80071f4 <UART_SetConfig+0x2cc>)
 8007062:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007066:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800706a:	2b30      	cmp	r3, #48	@ 0x30
 800706c:	d013      	beq.n	8007096 <UART_SetConfig+0x16e>
 800706e:	2b30      	cmp	r3, #48	@ 0x30
 8007070:	d814      	bhi.n	800709c <UART_SetConfig+0x174>
 8007072:	2b20      	cmp	r3, #32
 8007074:	d009      	beq.n	800708a <UART_SetConfig+0x162>
 8007076:	2b20      	cmp	r3, #32
 8007078:	d810      	bhi.n	800709c <UART_SetConfig+0x174>
 800707a:	2b00      	cmp	r3, #0
 800707c:	d002      	beq.n	8007084 <UART_SetConfig+0x15c>
 800707e:	2b10      	cmp	r3, #16
 8007080:	d006      	beq.n	8007090 <UART_SetConfig+0x168>
 8007082:	e00b      	b.n	800709c <UART_SetConfig+0x174>
 8007084:	2300      	movs	r3, #0
 8007086:	77fb      	strb	r3, [r7, #31]
 8007088:	e0f2      	b.n	8007270 <UART_SetConfig+0x348>
 800708a:	2302      	movs	r3, #2
 800708c:	77fb      	strb	r3, [r7, #31]
 800708e:	e0ef      	b.n	8007270 <UART_SetConfig+0x348>
 8007090:	2304      	movs	r3, #4
 8007092:	77fb      	strb	r3, [r7, #31]
 8007094:	e0ec      	b.n	8007270 <UART_SetConfig+0x348>
 8007096:	2308      	movs	r3, #8
 8007098:	77fb      	strb	r3, [r7, #31]
 800709a:	e0e9      	b.n	8007270 <UART_SetConfig+0x348>
 800709c:	2310      	movs	r3, #16
 800709e:	77fb      	strb	r3, [r7, #31]
 80070a0:	e0e6      	b.n	8007270 <UART_SetConfig+0x348>
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	4a56      	ldr	r2, [pc, #344]	@ (8007200 <UART_SetConfig+0x2d8>)
 80070a8:	4293      	cmp	r3, r2
 80070aa:	d120      	bne.n	80070ee <UART_SetConfig+0x1c6>
 80070ac:	4b51      	ldr	r3, [pc, #324]	@ (80071f4 <UART_SetConfig+0x2cc>)
 80070ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80070b2:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80070b6:	2bc0      	cmp	r3, #192	@ 0xc0
 80070b8:	d013      	beq.n	80070e2 <UART_SetConfig+0x1ba>
 80070ba:	2bc0      	cmp	r3, #192	@ 0xc0
 80070bc:	d814      	bhi.n	80070e8 <UART_SetConfig+0x1c0>
 80070be:	2b80      	cmp	r3, #128	@ 0x80
 80070c0:	d009      	beq.n	80070d6 <UART_SetConfig+0x1ae>
 80070c2:	2b80      	cmp	r3, #128	@ 0x80
 80070c4:	d810      	bhi.n	80070e8 <UART_SetConfig+0x1c0>
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d002      	beq.n	80070d0 <UART_SetConfig+0x1a8>
 80070ca:	2b40      	cmp	r3, #64	@ 0x40
 80070cc:	d006      	beq.n	80070dc <UART_SetConfig+0x1b4>
 80070ce:	e00b      	b.n	80070e8 <UART_SetConfig+0x1c0>
 80070d0:	2300      	movs	r3, #0
 80070d2:	77fb      	strb	r3, [r7, #31]
 80070d4:	e0cc      	b.n	8007270 <UART_SetConfig+0x348>
 80070d6:	2302      	movs	r3, #2
 80070d8:	77fb      	strb	r3, [r7, #31]
 80070da:	e0c9      	b.n	8007270 <UART_SetConfig+0x348>
 80070dc:	2304      	movs	r3, #4
 80070de:	77fb      	strb	r3, [r7, #31]
 80070e0:	e0c6      	b.n	8007270 <UART_SetConfig+0x348>
 80070e2:	2308      	movs	r3, #8
 80070e4:	77fb      	strb	r3, [r7, #31]
 80070e6:	e0c3      	b.n	8007270 <UART_SetConfig+0x348>
 80070e8:	2310      	movs	r3, #16
 80070ea:	77fb      	strb	r3, [r7, #31]
 80070ec:	e0c0      	b.n	8007270 <UART_SetConfig+0x348>
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	4a44      	ldr	r2, [pc, #272]	@ (8007204 <UART_SetConfig+0x2dc>)
 80070f4:	4293      	cmp	r3, r2
 80070f6:	d125      	bne.n	8007144 <UART_SetConfig+0x21c>
 80070f8:	4b3e      	ldr	r3, [pc, #248]	@ (80071f4 <UART_SetConfig+0x2cc>)
 80070fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80070fe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007102:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007106:	d017      	beq.n	8007138 <UART_SetConfig+0x210>
 8007108:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800710c:	d817      	bhi.n	800713e <UART_SetConfig+0x216>
 800710e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007112:	d00b      	beq.n	800712c <UART_SetConfig+0x204>
 8007114:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007118:	d811      	bhi.n	800713e <UART_SetConfig+0x216>
 800711a:	2b00      	cmp	r3, #0
 800711c:	d003      	beq.n	8007126 <UART_SetConfig+0x1fe>
 800711e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007122:	d006      	beq.n	8007132 <UART_SetConfig+0x20a>
 8007124:	e00b      	b.n	800713e <UART_SetConfig+0x216>
 8007126:	2300      	movs	r3, #0
 8007128:	77fb      	strb	r3, [r7, #31]
 800712a:	e0a1      	b.n	8007270 <UART_SetConfig+0x348>
 800712c:	2302      	movs	r3, #2
 800712e:	77fb      	strb	r3, [r7, #31]
 8007130:	e09e      	b.n	8007270 <UART_SetConfig+0x348>
 8007132:	2304      	movs	r3, #4
 8007134:	77fb      	strb	r3, [r7, #31]
 8007136:	e09b      	b.n	8007270 <UART_SetConfig+0x348>
 8007138:	2308      	movs	r3, #8
 800713a:	77fb      	strb	r3, [r7, #31]
 800713c:	e098      	b.n	8007270 <UART_SetConfig+0x348>
 800713e:	2310      	movs	r3, #16
 8007140:	77fb      	strb	r3, [r7, #31]
 8007142:	e095      	b.n	8007270 <UART_SetConfig+0x348>
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	4a2f      	ldr	r2, [pc, #188]	@ (8007208 <UART_SetConfig+0x2e0>)
 800714a:	4293      	cmp	r3, r2
 800714c:	d125      	bne.n	800719a <UART_SetConfig+0x272>
 800714e:	4b29      	ldr	r3, [pc, #164]	@ (80071f4 <UART_SetConfig+0x2cc>)
 8007150:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007154:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8007158:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800715c:	d017      	beq.n	800718e <UART_SetConfig+0x266>
 800715e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8007162:	d817      	bhi.n	8007194 <UART_SetConfig+0x26c>
 8007164:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007168:	d00b      	beq.n	8007182 <UART_SetConfig+0x25a>
 800716a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800716e:	d811      	bhi.n	8007194 <UART_SetConfig+0x26c>
 8007170:	2b00      	cmp	r3, #0
 8007172:	d003      	beq.n	800717c <UART_SetConfig+0x254>
 8007174:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007178:	d006      	beq.n	8007188 <UART_SetConfig+0x260>
 800717a:	e00b      	b.n	8007194 <UART_SetConfig+0x26c>
 800717c:	2301      	movs	r3, #1
 800717e:	77fb      	strb	r3, [r7, #31]
 8007180:	e076      	b.n	8007270 <UART_SetConfig+0x348>
 8007182:	2302      	movs	r3, #2
 8007184:	77fb      	strb	r3, [r7, #31]
 8007186:	e073      	b.n	8007270 <UART_SetConfig+0x348>
 8007188:	2304      	movs	r3, #4
 800718a:	77fb      	strb	r3, [r7, #31]
 800718c:	e070      	b.n	8007270 <UART_SetConfig+0x348>
 800718e:	2308      	movs	r3, #8
 8007190:	77fb      	strb	r3, [r7, #31]
 8007192:	e06d      	b.n	8007270 <UART_SetConfig+0x348>
 8007194:	2310      	movs	r3, #16
 8007196:	77fb      	strb	r3, [r7, #31]
 8007198:	e06a      	b.n	8007270 <UART_SetConfig+0x348>
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	4a1b      	ldr	r2, [pc, #108]	@ (800720c <UART_SetConfig+0x2e4>)
 80071a0:	4293      	cmp	r3, r2
 80071a2:	d138      	bne.n	8007216 <UART_SetConfig+0x2ee>
 80071a4:	4b13      	ldr	r3, [pc, #76]	@ (80071f4 <UART_SetConfig+0x2cc>)
 80071a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80071aa:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 80071ae:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80071b2:	d017      	beq.n	80071e4 <UART_SetConfig+0x2bc>
 80071b4:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80071b8:	d82a      	bhi.n	8007210 <UART_SetConfig+0x2e8>
 80071ba:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80071be:	d00b      	beq.n	80071d8 <UART_SetConfig+0x2b0>
 80071c0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80071c4:	d824      	bhi.n	8007210 <UART_SetConfig+0x2e8>
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d003      	beq.n	80071d2 <UART_SetConfig+0x2aa>
 80071ca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80071ce:	d006      	beq.n	80071de <UART_SetConfig+0x2b6>
 80071d0:	e01e      	b.n	8007210 <UART_SetConfig+0x2e8>
 80071d2:	2300      	movs	r3, #0
 80071d4:	77fb      	strb	r3, [r7, #31]
 80071d6:	e04b      	b.n	8007270 <UART_SetConfig+0x348>
 80071d8:	2302      	movs	r3, #2
 80071da:	77fb      	strb	r3, [r7, #31]
 80071dc:	e048      	b.n	8007270 <UART_SetConfig+0x348>
 80071de:	2304      	movs	r3, #4
 80071e0:	77fb      	strb	r3, [r7, #31]
 80071e2:	e045      	b.n	8007270 <UART_SetConfig+0x348>
 80071e4:	2308      	movs	r3, #8
 80071e6:	77fb      	strb	r3, [r7, #31]
 80071e8:	e042      	b.n	8007270 <UART_SetConfig+0x348>
 80071ea:	bf00      	nop
 80071ec:	efff69f3 	.word	0xefff69f3
 80071f0:	40011000 	.word	0x40011000
 80071f4:	40023800 	.word	0x40023800
 80071f8:	40004400 	.word	0x40004400
 80071fc:	40004800 	.word	0x40004800
 8007200:	40004c00 	.word	0x40004c00
 8007204:	40005000 	.word	0x40005000
 8007208:	40011400 	.word	0x40011400
 800720c:	40007800 	.word	0x40007800
 8007210:	2310      	movs	r3, #16
 8007212:	77fb      	strb	r3, [r7, #31]
 8007214:	e02c      	b.n	8007270 <UART_SetConfig+0x348>
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	4a72      	ldr	r2, [pc, #456]	@ (80073e4 <UART_SetConfig+0x4bc>)
 800721c:	4293      	cmp	r3, r2
 800721e:	d125      	bne.n	800726c <UART_SetConfig+0x344>
 8007220:	4b71      	ldr	r3, [pc, #452]	@ (80073e8 <UART_SetConfig+0x4c0>)
 8007222:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007226:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800722a:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800722e:	d017      	beq.n	8007260 <UART_SetConfig+0x338>
 8007230:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8007234:	d817      	bhi.n	8007266 <UART_SetConfig+0x33e>
 8007236:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800723a:	d00b      	beq.n	8007254 <UART_SetConfig+0x32c>
 800723c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007240:	d811      	bhi.n	8007266 <UART_SetConfig+0x33e>
 8007242:	2b00      	cmp	r3, #0
 8007244:	d003      	beq.n	800724e <UART_SetConfig+0x326>
 8007246:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800724a:	d006      	beq.n	800725a <UART_SetConfig+0x332>
 800724c:	e00b      	b.n	8007266 <UART_SetConfig+0x33e>
 800724e:	2300      	movs	r3, #0
 8007250:	77fb      	strb	r3, [r7, #31]
 8007252:	e00d      	b.n	8007270 <UART_SetConfig+0x348>
 8007254:	2302      	movs	r3, #2
 8007256:	77fb      	strb	r3, [r7, #31]
 8007258:	e00a      	b.n	8007270 <UART_SetConfig+0x348>
 800725a:	2304      	movs	r3, #4
 800725c:	77fb      	strb	r3, [r7, #31]
 800725e:	e007      	b.n	8007270 <UART_SetConfig+0x348>
 8007260:	2308      	movs	r3, #8
 8007262:	77fb      	strb	r3, [r7, #31]
 8007264:	e004      	b.n	8007270 <UART_SetConfig+0x348>
 8007266:	2310      	movs	r3, #16
 8007268:	77fb      	strb	r3, [r7, #31]
 800726a:	e001      	b.n	8007270 <UART_SetConfig+0x348>
 800726c:	2310      	movs	r3, #16
 800726e:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	69db      	ldr	r3, [r3, #28]
 8007274:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007278:	d15b      	bne.n	8007332 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800727a:	7ffb      	ldrb	r3, [r7, #31]
 800727c:	2b08      	cmp	r3, #8
 800727e:	d828      	bhi.n	80072d2 <UART_SetConfig+0x3aa>
 8007280:	a201      	add	r2, pc, #4	@ (adr r2, 8007288 <UART_SetConfig+0x360>)
 8007282:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007286:	bf00      	nop
 8007288:	080072ad 	.word	0x080072ad
 800728c:	080072b5 	.word	0x080072b5
 8007290:	080072bd 	.word	0x080072bd
 8007294:	080072d3 	.word	0x080072d3
 8007298:	080072c3 	.word	0x080072c3
 800729c:	080072d3 	.word	0x080072d3
 80072a0:	080072d3 	.word	0x080072d3
 80072a4:	080072d3 	.word	0x080072d3
 80072a8:	080072cb 	.word	0x080072cb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80072ac:	f7fd fc70 	bl	8004b90 <HAL_RCC_GetPCLK1Freq>
 80072b0:	61b8      	str	r0, [r7, #24]
        break;
 80072b2:	e013      	b.n	80072dc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80072b4:	f7fd fc80 	bl	8004bb8 <HAL_RCC_GetPCLK2Freq>
 80072b8:	61b8      	str	r0, [r7, #24]
        break;
 80072ba:	e00f      	b.n	80072dc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80072bc:	4b4b      	ldr	r3, [pc, #300]	@ (80073ec <UART_SetConfig+0x4c4>)
 80072be:	61bb      	str	r3, [r7, #24]
        break;
 80072c0:	e00c      	b.n	80072dc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80072c2:	f7fd fb53 	bl	800496c <HAL_RCC_GetSysClockFreq>
 80072c6:	61b8      	str	r0, [r7, #24]
        break;
 80072c8:	e008      	b.n	80072dc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80072ca:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80072ce:	61bb      	str	r3, [r7, #24]
        break;
 80072d0:	e004      	b.n	80072dc <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80072d2:	2300      	movs	r3, #0
 80072d4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80072d6:	2301      	movs	r3, #1
 80072d8:	77bb      	strb	r3, [r7, #30]
        break;
 80072da:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80072dc:	69bb      	ldr	r3, [r7, #24]
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d074      	beq.n	80073cc <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80072e2:	69bb      	ldr	r3, [r7, #24]
 80072e4:	005a      	lsls	r2, r3, #1
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	685b      	ldr	r3, [r3, #4]
 80072ea:	085b      	lsrs	r3, r3, #1
 80072ec:	441a      	add	r2, r3
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	685b      	ldr	r3, [r3, #4]
 80072f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80072f6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80072f8:	693b      	ldr	r3, [r7, #16]
 80072fa:	2b0f      	cmp	r3, #15
 80072fc:	d916      	bls.n	800732c <UART_SetConfig+0x404>
 80072fe:	693b      	ldr	r3, [r7, #16]
 8007300:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007304:	d212      	bcs.n	800732c <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007306:	693b      	ldr	r3, [r7, #16]
 8007308:	b29b      	uxth	r3, r3
 800730a:	f023 030f 	bic.w	r3, r3, #15
 800730e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007310:	693b      	ldr	r3, [r7, #16]
 8007312:	085b      	lsrs	r3, r3, #1
 8007314:	b29b      	uxth	r3, r3
 8007316:	f003 0307 	and.w	r3, r3, #7
 800731a:	b29a      	uxth	r2, r3
 800731c:	89fb      	ldrh	r3, [r7, #14]
 800731e:	4313      	orrs	r3, r2
 8007320:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	89fa      	ldrh	r2, [r7, #14]
 8007328:	60da      	str	r2, [r3, #12]
 800732a:	e04f      	b.n	80073cc <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800732c:	2301      	movs	r3, #1
 800732e:	77bb      	strb	r3, [r7, #30]
 8007330:	e04c      	b.n	80073cc <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007332:	7ffb      	ldrb	r3, [r7, #31]
 8007334:	2b08      	cmp	r3, #8
 8007336:	d828      	bhi.n	800738a <UART_SetConfig+0x462>
 8007338:	a201      	add	r2, pc, #4	@ (adr r2, 8007340 <UART_SetConfig+0x418>)
 800733a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800733e:	bf00      	nop
 8007340:	08007365 	.word	0x08007365
 8007344:	0800736d 	.word	0x0800736d
 8007348:	08007375 	.word	0x08007375
 800734c:	0800738b 	.word	0x0800738b
 8007350:	0800737b 	.word	0x0800737b
 8007354:	0800738b 	.word	0x0800738b
 8007358:	0800738b 	.word	0x0800738b
 800735c:	0800738b 	.word	0x0800738b
 8007360:	08007383 	.word	0x08007383
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007364:	f7fd fc14 	bl	8004b90 <HAL_RCC_GetPCLK1Freq>
 8007368:	61b8      	str	r0, [r7, #24]
        break;
 800736a:	e013      	b.n	8007394 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800736c:	f7fd fc24 	bl	8004bb8 <HAL_RCC_GetPCLK2Freq>
 8007370:	61b8      	str	r0, [r7, #24]
        break;
 8007372:	e00f      	b.n	8007394 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007374:	4b1d      	ldr	r3, [pc, #116]	@ (80073ec <UART_SetConfig+0x4c4>)
 8007376:	61bb      	str	r3, [r7, #24]
        break;
 8007378:	e00c      	b.n	8007394 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800737a:	f7fd faf7 	bl	800496c <HAL_RCC_GetSysClockFreq>
 800737e:	61b8      	str	r0, [r7, #24]
        break;
 8007380:	e008      	b.n	8007394 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007382:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007386:	61bb      	str	r3, [r7, #24]
        break;
 8007388:	e004      	b.n	8007394 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800738a:	2300      	movs	r3, #0
 800738c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800738e:	2301      	movs	r3, #1
 8007390:	77bb      	strb	r3, [r7, #30]
        break;
 8007392:	bf00      	nop
    }

    if (pclk != 0U)
 8007394:	69bb      	ldr	r3, [r7, #24]
 8007396:	2b00      	cmp	r3, #0
 8007398:	d018      	beq.n	80073cc <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	685b      	ldr	r3, [r3, #4]
 800739e:	085a      	lsrs	r2, r3, #1
 80073a0:	69bb      	ldr	r3, [r7, #24]
 80073a2:	441a      	add	r2, r3
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	685b      	ldr	r3, [r3, #4]
 80073a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80073ac:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80073ae:	693b      	ldr	r3, [r7, #16]
 80073b0:	2b0f      	cmp	r3, #15
 80073b2:	d909      	bls.n	80073c8 <UART_SetConfig+0x4a0>
 80073b4:	693b      	ldr	r3, [r7, #16]
 80073b6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80073ba:	d205      	bcs.n	80073c8 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80073bc:	693b      	ldr	r3, [r7, #16]
 80073be:	b29a      	uxth	r2, r3
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	60da      	str	r2, [r3, #12]
 80073c6:	e001      	b.n	80073cc <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80073c8:	2301      	movs	r3, #1
 80073ca:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	2200      	movs	r2, #0
 80073d0:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	2200      	movs	r2, #0
 80073d6:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80073d8:	7fbb      	ldrb	r3, [r7, #30]
}
 80073da:	4618      	mov	r0, r3
 80073dc:	3720      	adds	r7, #32
 80073de:	46bd      	mov	sp, r7
 80073e0:	bd80      	pop	{r7, pc}
 80073e2:	bf00      	nop
 80073e4:	40007c00 	.word	0x40007c00
 80073e8:	40023800 	.word	0x40023800
 80073ec:	00f42400 	.word	0x00f42400

080073f0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80073f0:	b480      	push	{r7}
 80073f2:	b083      	sub	sp, #12
 80073f4:	af00      	add	r7, sp, #0
 80073f6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80073fc:	f003 0308 	and.w	r3, r3, #8
 8007400:	2b00      	cmp	r3, #0
 8007402:	d00a      	beq.n	800741a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	685b      	ldr	r3, [r3, #4]
 800740a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	430a      	orrs	r2, r1
 8007418:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800741e:	f003 0301 	and.w	r3, r3, #1
 8007422:	2b00      	cmp	r3, #0
 8007424:	d00a      	beq.n	800743c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	685b      	ldr	r3, [r3, #4]
 800742c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	430a      	orrs	r2, r1
 800743a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007440:	f003 0302 	and.w	r3, r3, #2
 8007444:	2b00      	cmp	r3, #0
 8007446:	d00a      	beq.n	800745e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	685b      	ldr	r3, [r3, #4]
 800744e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	430a      	orrs	r2, r1
 800745c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007462:	f003 0304 	and.w	r3, r3, #4
 8007466:	2b00      	cmp	r3, #0
 8007468:	d00a      	beq.n	8007480 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	685b      	ldr	r3, [r3, #4]
 8007470:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	430a      	orrs	r2, r1
 800747e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007484:	f003 0310 	and.w	r3, r3, #16
 8007488:	2b00      	cmp	r3, #0
 800748a:	d00a      	beq.n	80074a2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	689b      	ldr	r3, [r3, #8]
 8007492:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	430a      	orrs	r2, r1
 80074a0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80074a6:	f003 0320 	and.w	r3, r3, #32
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d00a      	beq.n	80074c4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	689b      	ldr	r3, [r3, #8]
 80074b4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	430a      	orrs	r2, r1
 80074c2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80074c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d01a      	beq.n	8007506 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	685b      	ldr	r3, [r3, #4]
 80074d6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	430a      	orrs	r2, r1
 80074e4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80074ea:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80074ee:	d10a      	bne.n	8007506 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	685b      	ldr	r3, [r3, #4]
 80074f6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	430a      	orrs	r2, r1
 8007504:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800750a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800750e:	2b00      	cmp	r3, #0
 8007510:	d00a      	beq.n	8007528 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	685b      	ldr	r3, [r3, #4]
 8007518:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	430a      	orrs	r2, r1
 8007526:	605a      	str	r2, [r3, #4]
  }
}
 8007528:	bf00      	nop
 800752a:	370c      	adds	r7, #12
 800752c:	46bd      	mov	sp, r7
 800752e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007532:	4770      	bx	lr

08007534 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007534:	b580      	push	{r7, lr}
 8007536:	b08c      	sub	sp, #48	@ 0x30
 8007538:	af02      	add	r7, sp, #8
 800753a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	2200      	movs	r2, #0
 8007540:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007544:	f7fb fcc0 	bl	8002ec8 <HAL_GetTick>
 8007548:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	f003 0308 	and.w	r3, r3, #8
 8007554:	2b08      	cmp	r3, #8
 8007556:	d12e      	bne.n	80075b6 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007558:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800755c:	9300      	str	r3, [sp, #0]
 800755e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007560:	2200      	movs	r2, #0
 8007562:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8007566:	6878      	ldr	r0, [r7, #4]
 8007568:	f000 f83b 	bl	80075e2 <UART_WaitOnFlagUntilTimeout>
 800756c:	4603      	mov	r3, r0
 800756e:	2b00      	cmp	r3, #0
 8007570:	d021      	beq.n	80075b6 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007578:	693b      	ldr	r3, [r7, #16]
 800757a:	e853 3f00 	ldrex	r3, [r3]
 800757e:	60fb      	str	r3, [r7, #12]
   return(result);
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007586:	623b      	str	r3, [r7, #32]
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	461a      	mov	r2, r3
 800758e:	6a3b      	ldr	r3, [r7, #32]
 8007590:	61fb      	str	r3, [r7, #28]
 8007592:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007594:	69b9      	ldr	r1, [r7, #24]
 8007596:	69fa      	ldr	r2, [r7, #28]
 8007598:	e841 2300 	strex	r3, r2, [r1]
 800759c:	617b      	str	r3, [r7, #20]
   return(result);
 800759e:	697b      	ldr	r3, [r7, #20]
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d1e6      	bne.n	8007572 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	2220      	movs	r2, #32
 80075a8:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	2200      	movs	r2, #0
 80075ae:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80075b2:	2303      	movs	r3, #3
 80075b4:	e011      	b.n	80075da <UART_CheckIdleState+0xa6>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	2220      	movs	r2, #32
 80075ba:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	2220      	movs	r2, #32
 80075c0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	2200      	movs	r2, #0
 80075c8:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	2200      	movs	r2, #0
 80075ce:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	2200      	movs	r2, #0
 80075d4:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80075d8:	2300      	movs	r3, #0
}
 80075da:	4618      	mov	r0, r3
 80075dc:	3728      	adds	r7, #40	@ 0x28
 80075de:	46bd      	mov	sp, r7
 80075e0:	bd80      	pop	{r7, pc}

080075e2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80075e2:	b580      	push	{r7, lr}
 80075e4:	b084      	sub	sp, #16
 80075e6:	af00      	add	r7, sp, #0
 80075e8:	60f8      	str	r0, [r7, #12]
 80075ea:	60b9      	str	r1, [r7, #8]
 80075ec:	603b      	str	r3, [r7, #0]
 80075ee:	4613      	mov	r3, r2
 80075f0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80075f2:	e04f      	b.n	8007694 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80075f4:	69bb      	ldr	r3, [r7, #24]
 80075f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075fa:	d04b      	beq.n	8007694 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80075fc:	f7fb fc64 	bl	8002ec8 <HAL_GetTick>
 8007600:	4602      	mov	r2, r0
 8007602:	683b      	ldr	r3, [r7, #0]
 8007604:	1ad3      	subs	r3, r2, r3
 8007606:	69ba      	ldr	r2, [r7, #24]
 8007608:	429a      	cmp	r2, r3
 800760a:	d302      	bcc.n	8007612 <UART_WaitOnFlagUntilTimeout+0x30>
 800760c:	69bb      	ldr	r3, [r7, #24]
 800760e:	2b00      	cmp	r3, #0
 8007610:	d101      	bne.n	8007616 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007612:	2303      	movs	r3, #3
 8007614:	e04e      	b.n	80076b4 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	f003 0304 	and.w	r3, r3, #4
 8007620:	2b00      	cmp	r3, #0
 8007622:	d037      	beq.n	8007694 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007624:	68bb      	ldr	r3, [r7, #8]
 8007626:	2b80      	cmp	r3, #128	@ 0x80
 8007628:	d034      	beq.n	8007694 <UART_WaitOnFlagUntilTimeout+0xb2>
 800762a:	68bb      	ldr	r3, [r7, #8]
 800762c:	2b40      	cmp	r3, #64	@ 0x40
 800762e:	d031      	beq.n	8007694 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	69db      	ldr	r3, [r3, #28]
 8007636:	f003 0308 	and.w	r3, r3, #8
 800763a:	2b08      	cmp	r3, #8
 800763c:	d110      	bne.n	8007660 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	2208      	movs	r2, #8
 8007644:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007646:	68f8      	ldr	r0, [r7, #12]
 8007648:	f000 f838 	bl	80076bc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	2208      	movs	r2, #8
 8007650:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	2200      	movs	r2, #0
 8007658:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800765c:	2301      	movs	r3, #1
 800765e:	e029      	b.n	80076b4 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	69db      	ldr	r3, [r3, #28]
 8007666:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800766a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800766e:	d111      	bne.n	8007694 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007678:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800767a:	68f8      	ldr	r0, [r7, #12]
 800767c:	f000 f81e 	bl	80076bc <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	2220      	movs	r2, #32
 8007684:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	2200      	movs	r2, #0
 800768c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8007690:	2303      	movs	r3, #3
 8007692:	e00f      	b.n	80076b4 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	69da      	ldr	r2, [r3, #28]
 800769a:	68bb      	ldr	r3, [r7, #8]
 800769c:	4013      	ands	r3, r2
 800769e:	68ba      	ldr	r2, [r7, #8]
 80076a0:	429a      	cmp	r2, r3
 80076a2:	bf0c      	ite	eq
 80076a4:	2301      	moveq	r3, #1
 80076a6:	2300      	movne	r3, #0
 80076a8:	b2db      	uxtb	r3, r3
 80076aa:	461a      	mov	r2, r3
 80076ac:	79fb      	ldrb	r3, [r7, #7]
 80076ae:	429a      	cmp	r2, r3
 80076b0:	d0a0      	beq.n	80075f4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80076b2:	2300      	movs	r3, #0
}
 80076b4:	4618      	mov	r0, r3
 80076b6:	3710      	adds	r7, #16
 80076b8:	46bd      	mov	sp, r7
 80076ba:	bd80      	pop	{r7, pc}

080076bc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80076bc:	b480      	push	{r7}
 80076be:	b095      	sub	sp, #84	@ 0x54
 80076c0:	af00      	add	r7, sp, #0
 80076c2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80076cc:	e853 3f00 	ldrex	r3, [r3]
 80076d0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80076d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076d4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80076d8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	461a      	mov	r2, r3
 80076e0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80076e2:	643b      	str	r3, [r7, #64]	@ 0x40
 80076e4:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076e6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80076e8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80076ea:	e841 2300 	strex	r3, r2, [r1]
 80076ee:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80076f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d1e6      	bne.n	80076c4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	3308      	adds	r3, #8
 80076fc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076fe:	6a3b      	ldr	r3, [r7, #32]
 8007700:	e853 3f00 	ldrex	r3, [r3]
 8007704:	61fb      	str	r3, [r7, #28]
   return(result);
 8007706:	69fb      	ldr	r3, [r7, #28]
 8007708:	f023 0301 	bic.w	r3, r3, #1
 800770c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	3308      	adds	r3, #8
 8007714:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007716:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007718:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800771a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800771c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800771e:	e841 2300 	strex	r3, r2, [r1]
 8007722:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007724:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007726:	2b00      	cmp	r3, #0
 8007728:	d1e5      	bne.n	80076f6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800772e:	2b01      	cmp	r3, #1
 8007730:	d118      	bne.n	8007764 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	e853 3f00 	ldrex	r3, [r3]
 800773e:	60bb      	str	r3, [r7, #8]
   return(result);
 8007740:	68bb      	ldr	r3, [r7, #8]
 8007742:	f023 0310 	bic.w	r3, r3, #16
 8007746:	647b      	str	r3, [r7, #68]	@ 0x44
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	461a      	mov	r2, r3
 800774e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007750:	61bb      	str	r3, [r7, #24]
 8007752:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007754:	6979      	ldr	r1, [r7, #20]
 8007756:	69ba      	ldr	r2, [r7, #24]
 8007758:	e841 2300 	strex	r3, r2, [r1]
 800775c:	613b      	str	r3, [r7, #16]
   return(result);
 800775e:	693b      	ldr	r3, [r7, #16]
 8007760:	2b00      	cmp	r3, #0
 8007762:	d1e6      	bne.n	8007732 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	2220      	movs	r2, #32
 8007768:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	2200      	movs	r2, #0
 8007770:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	2200      	movs	r2, #0
 8007776:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8007778:	bf00      	nop
 800777a:	3754      	adds	r7, #84	@ 0x54
 800777c:	46bd      	mov	sp, r7
 800777e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007782:	4770      	bx	lr

08007784 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007784:	b580      	push	{r7, lr}
 8007786:	b084      	sub	sp, #16
 8007788:	af00      	add	r7, sp, #0
 800778a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007790:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	2200      	movs	r2, #0
 8007796:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800779a:	68f8      	ldr	r0, [r7, #12]
 800779c:	f7ff fbae 	bl	8006efc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80077a0:	bf00      	nop
 80077a2:	3710      	adds	r7, #16
 80077a4:	46bd      	mov	sp, r7
 80077a6:	bd80      	pop	{r7, pc}

080077a8 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80077a8:	b580      	push	{r7, lr}
 80077aa:	b088      	sub	sp, #32
 80077ac:	af00      	add	r7, sp, #0
 80077ae:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	e853 3f00 	ldrex	r3, [r3]
 80077bc:	60bb      	str	r3, [r7, #8]
   return(result);
 80077be:	68bb      	ldr	r3, [r7, #8]
 80077c0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80077c4:	61fb      	str	r3, [r7, #28]
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	461a      	mov	r2, r3
 80077cc:	69fb      	ldr	r3, [r7, #28]
 80077ce:	61bb      	str	r3, [r7, #24]
 80077d0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077d2:	6979      	ldr	r1, [r7, #20]
 80077d4:	69ba      	ldr	r2, [r7, #24]
 80077d6:	e841 2300 	strex	r3, r2, [r1]
 80077da:	613b      	str	r3, [r7, #16]
   return(result);
 80077dc:	693b      	ldr	r3, [r7, #16]
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d1e6      	bne.n	80077b0 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	2220      	movs	r2, #32
 80077e6:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	2200      	movs	r2, #0
 80077ec:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80077ee:	6878      	ldr	r0, [r7, #4]
 80077f0:	f7ff fb7a 	bl	8006ee8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80077f4:	bf00      	nop
 80077f6:	3720      	adds	r7, #32
 80077f8:	46bd      	mov	sp, r7
 80077fa:	bd80      	pop	{r7, pc}

080077fc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80077fc:	b084      	sub	sp, #16
 80077fe:	b580      	push	{r7, lr}
 8007800:	b084      	sub	sp, #16
 8007802:	af00      	add	r7, sp, #0
 8007804:	6078      	str	r0, [r7, #4]
 8007806:	f107 001c 	add.w	r0, r7, #28
 800780a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800780e:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8007812:	2b01      	cmp	r3, #1
 8007814:	d121      	bne.n	800785a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800781a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	68da      	ldr	r2, [r3, #12]
 8007826:	4b21      	ldr	r3, [pc, #132]	@ (80078ac <USB_CoreInit+0xb0>)
 8007828:	4013      	ands	r3, r2
 800782a:	687a      	ldr	r2, [r7, #4]
 800782c:	60d3      	str	r3, [r2, #12]
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	68db      	ldr	r3, [r3, #12]
 8007832:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800783a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800783e:	2b01      	cmp	r3, #1
 8007840:	d105      	bne.n	800784e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	68db      	ldr	r3, [r3, #12]
 8007846:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800784e:	6878      	ldr	r0, [r7, #4]
 8007850:	f000 fa92 	bl	8007d78 <USB_CoreReset>
 8007854:	4603      	mov	r3, r0
 8007856:	73fb      	strb	r3, [r7, #15]
 8007858:	e010      	b.n	800787c <USB_CoreInit+0x80>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	68db      	ldr	r3, [r3, #12]
 800785e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007866:	6878      	ldr	r0, [r7, #4]
 8007868:	f000 fa86 	bl	8007d78 <USB_CoreReset>
 800786c:	4603      	mov	r3, r0
 800786e:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007874:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if (cfg.dma_enable == 1U)
 800787c:	7fbb      	ldrb	r3, [r7, #30]
 800787e:	2b01      	cmp	r3, #1
 8007880:	d10b      	bne.n	800789a <USB_CoreInit+0x9e>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	689b      	ldr	r3, [r3, #8]
 8007886:	f043 0206 	orr.w	r2, r3, #6
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	689b      	ldr	r3, [r3, #8]
 8007892:	f043 0220 	orr.w	r2, r3, #32
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800789a:	7bfb      	ldrb	r3, [r7, #15]
}
 800789c:	4618      	mov	r0, r3
 800789e:	3710      	adds	r7, #16
 80078a0:	46bd      	mov	sp, r7
 80078a2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80078a6:	b004      	add	sp, #16
 80078a8:	4770      	bx	lr
 80078aa:	bf00      	nop
 80078ac:	ffbdffbf 	.word	0xffbdffbf

080078b0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80078b0:	b480      	push	{r7}
 80078b2:	b083      	sub	sp, #12
 80078b4:	af00      	add	r7, sp, #0
 80078b6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	689b      	ldr	r3, [r3, #8]
 80078bc:	f023 0201 	bic.w	r2, r3, #1
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80078c4:	2300      	movs	r3, #0
}
 80078c6:	4618      	mov	r0, r3
 80078c8:	370c      	adds	r7, #12
 80078ca:	46bd      	mov	sp, r7
 80078cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d0:	4770      	bx	lr

080078d2 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80078d2:	b580      	push	{r7, lr}
 80078d4:	b084      	sub	sp, #16
 80078d6:	af00      	add	r7, sp, #0
 80078d8:	6078      	str	r0, [r7, #4]
 80078da:	460b      	mov	r3, r1
 80078dc:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80078de:	2300      	movs	r3, #0
 80078e0:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	68db      	ldr	r3, [r3, #12]
 80078e6:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80078ee:	78fb      	ldrb	r3, [r7, #3]
 80078f0:	2b01      	cmp	r3, #1
 80078f2:	d115      	bne.n	8007920 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	68db      	ldr	r3, [r3, #12]
 80078f8:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8007900:	200a      	movs	r0, #10
 8007902:	f7fb faed 	bl	8002ee0 <HAL_Delay>
      ms += 10U;
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	330a      	adds	r3, #10
 800790a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800790c:	6878      	ldr	r0, [r7, #4]
 800790e:	f000 fa25 	bl	8007d5c <USB_GetMode>
 8007912:	4603      	mov	r3, r0
 8007914:	2b01      	cmp	r3, #1
 8007916:	d01e      	beq.n	8007956 <USB_SetCurrentMode+0x84>
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	2bc7      	cmp	r3, #199	@ 0xc7
 800791c:	d9f0      	bls.n	8007900 <USB_SetCurrentMode+0x2e>
 800791e:	e01a      	b.n	8007956 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8007920:	78fb      	ldrb	r3, [r7, #3]
 8007922:	2b00      	cmp	r3, #0
 8007924:	d115      	bne.n	8007952 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	68db      	ldr	r3, [r3, #12]
 800792a:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8007932:	200a      	movs	r0, #10
 8007934:	f7fb fad4 	bl	8002ee0 <HAL_Delay>
      ms += 10U;
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	330a      	adds	r3, #10
 800793c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800793e:	6878      	ldr	r0, [r7, #4]
 8007940:	f000 fa0c 	bl	8007d5c <USB_GetMode>
 8007944:	4603      	mov	r3, r0
 8007946:	2b00      	cmp	r3, #0
 8007948:	d005      	beq.n	8007956 <USB_SetCurrentMode+0x84>
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	2bc7      	cmp	r3, #199	@ 0xc7
 800794e:	d9f0      	bls.n	8007932 <USB_SetCurrentMode+0x60>
 8007950:	e001      	b.n	8007956 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8007952:	2301      	movs	r3, #1
 8007954:	e005      	b.n	8007962 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	2bc8      	cmp	r3, #200	@ 0xc8
 800795a:	d101      	bne.n	8007960 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800795c:	2301      	movs	r3, #1
 800795e:	e000      	b.n	8007962 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007960:	2300      	movs	r3, #0
}
 8007962:	4618      	mov	r0, r3
 8007964:	3710      	adds	r7, #16
 8007966:	46bd      	mov	sp, r7
 8007968:	bd80      	pop	{r7, pc}
	...

0800796c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800796c:	b084      	sub	sp, #16
 800796e:	b580      	push	{r7, lr}
 8007970:	b086      	sub	sp, #24
 8007972:	af00      	add	r7, sp, #0
 8007974:	6078      	str	r0, [r7, #4]
 8007976:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800797a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800797e:	2300      	movs	r3, #0
 8007980:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8007986:	2300      	movs	r3, #0
 8007988:	613b      	str	r3, [r7, #16]
 800798a:	e009      	b.n	80079a0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800798c:	687a      	ldr	r2, [r7, #4]
 800798e:	693b      	ldr	r3, [r7, #16]
 8007990:	3340      	adds	r3, #64	@ 0x40
 8007992:	009b      	lsls	r3, r3, #2
 8007994:	4413      	add	r3, r2
 8007996:	2200      	movs	r2, #0
 8007998:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800799a:	693b      	ldr	r3, [r7, #16]
 800799c:	3301      	adds	r3, #1
 800799e:	613b      	str	r3, [r7, #16]
 80079a0:	693b      	ldr	r3, [r7, #16]
 80079a2:	2b0e      	cmp	r3, #14
 80079a4:	d9f2      	bls.n	800798c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80079a6:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d11c      	bne.n	80079e8 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80079b4:	685b      	ldr	r3, [r3, #4]
 80079b6:	68fa      	ldr	r2, [r7, #12]
 80079b8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80079bc:	f043 0302 	orr.w	r3, r3, #2
 80079c0:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80079c6:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	601a      	str	r2, [r3, #0]
 80079e6:	e005      	b.n	80079f4 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80079ec:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80079fa:	461a      	mov	r2, r3
 80079fc:	2300      	movs	r3, #0
 80079fe:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007a00:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8007a04:	2b01      	cmp	r3, #1
 8007a06:	d10d      	bne.n	8007a24 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8007a08:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d104      	bne.n	8007a1a <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8007a10:	2100      	movs	r1, #0
 8007a12:	6878      	ldr	r0, [r7, #4]
 8007a14:	f000 f968 	bl	8007ce8 <USB_SetDevSpeed>
 8007a18:	e008      	b.n	8007a2c <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8007a1a:	2101      	movs	r1, #1
 8007a1c:	6878      	ldr	r0, [r7, #4]
 8007a1e:	f000 f963 	bl	8007ce8 <USB_SetDevSpeed>
 8007a22:	e003      	b.n	8007a2c <USB_DevInit+0xc0>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8007a24:	2103      	movs	r1, #3
 8007a26:	6878      	ldr	r0, [r7, #4]
 8007a28:	f000 f95e 	bl	8007ce8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007a2c:	2110      	movs	r1, #16
 8007a2e:	6878      	ldr	r0, [r7, #4]
 8007a30:	f000 f8fa 	bl	8007c28 <USB_FlushTxFifo>
 8007a34:	4603      	mov	r3, r0
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d001      	beq.n	8007a3e <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 8007a3a:	2301      	movs	r3, #1
 8007a3c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007a3e:	6878      	ldr	r0, [r7, #4]
 8007a40:	f000 f924 	bl	8007c8c <USB_FlushRxFifo>
 8007a44:	4603      	mov	r3, r0
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d001      	beq.n	8007a4e <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 8007a4a:	2301      	movs	r3, #1
 8007a4c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007a54:	461a      	mov	r2, r3
 8007a56:	2300      	movs	r3, #0
 8007a58:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007a60:	461a      	mov	r2, r3
 8007a62:	2300      	movs	r3, #0
 8007a64:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007a6c:	461a      	mov	r2, r3
 8007a6e:	2300      	movs	r3, #0
 8007a70:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007a72:	2300      	movs	r3, #0
 8007a74:	613b      	str	r3, [r7, #16]
 8007a76:	e043      	b.n	8007b00 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007a78:	693b      	ldr	r3, [r7, #16]
 8007a7a:	015a      	lsls	r2, r3, #5
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	4413      	add	r3, r2
 8007a80:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007a8a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007a8e:	d118      	bne.n	8007ac2 <USB_DevInit+0x156>
    {
      if (i == 0U)
 8007a90:	693b      	ldr	r3, [r7, #16]
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d10a      	bne.n	8007aac <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007a96:	693b      	ldr	r3, [r7, #16]
 8007a98:	015a      	lsls	r2, r3, #5
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	4413      	add	r3, r2
 8007a9e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007aa2:	461a      	mov	r2, r3
 8007aa4:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8007aa8:	6013      	str	r3, [r2, #0]
 8007aaa:	e013      	b.n	8007ad4 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8007aac:	693b      	ldr	r3, [r7, #16]
 8007aae:	015a      	lsls	r2, r3, #5
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	4413      	add	r3, r2
 8007ab4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007ab8:	461a      	mov	r2, r3
 8007aba:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8007abe:	6013      	str	r3, [r2, #0]
 8007ac0:	e008      	b.n	8007ad4 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8007ac2:	693b      	ldr	r3, [r7, #16]
 8007ac4:	015a      	lsls	r2, r3, #5
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	4413      	add	r3, r2
 8007aca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007ace:	461a      	mov	r2, r3
 8007ad0:	2300      	movs	r3, #0
 8007ad2:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007ad4:	693b      	ldr	r3, [r7, #16]
 8007ad6:	015a      	lsls	r2, r3, #5
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	4413      	add	r3, r2
 8007adc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007ae0:	461a      	mov	r2, r3
 8007ae2:	2300      	movs	r3, #0
 8007ae4:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007ae6:	693b      	ldr	r3, [r7, #16]
 8007ae8:	015a      	lsls	r2, r3, #5
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	4413      	add	r3, r2
 8007aee:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007af2:	461a      	mov	r2, r3
 8007af4:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8007af8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007afa:	693b      	ldr	r3, [r7, #16]
 8007afc:	3301      	adds	r3, #1
 8007afe:	613b      	str	r3, [r7, #16]
 8007b00:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8007b04:	461a      	mov	r2, r3
 8007b06:	693b      	ldr	r3, [r7, #16]
 8007b08:	4293      	cmp	r3, r2
 8007b0a:	d3b5      	bcc.n	8007a78 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007b0c:	2300      	movs	r3, #0
 8007b0e:	613b      	str	r3, [r7, #16]
 8007b10:	e043      	b.n	8007b9a <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007b12:	693b      	ldr	r3, [r7, #16]
 8007b14:	015a      	lsls	r2, r3, #5
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	4413      	add	r3, r2
 8007b1a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007b24:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007b28:	d118      	bne.n	8007b5c <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 8007b2a:	693b      	ldr	r3, [r7, #16]
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d10a      	bne.n	8007b46 <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8007b30:	693b      	ldr	r3, [r7, #16]
 8007b32:	015a      	lsls	r2, r3, #5
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	4413      	add	r3, r2
 8007b38:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007b3c:	461a      	mov	r2, r3
 8007b3e:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8007b42:	6013      	str	r3, [r2, #0]
 8007b44:	e013      	b.n	8007b6e <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007b46:	693b      	ldr	r3, [r7, #16]
 8007b48:	015a      	lsls	r2, r3, #5
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	4413      	add	r3, r2
 8007b4e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007b52:	461a      	mov	r2, r3
 8007b54:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8007b58:	6013      	str	r3, [r2, #0]
 8007b5a:	e008      	b.n	8007b6e <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007b5c:	693b      	ldr	r3, [r7, #16]
 8007b5e:	015a      	lsls	r2, r3, #5
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	4413      	add	r3, r2
 8007b64:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007b68:	461a      	mov	r2, r3
 8007b6a:	2300      	movs	r3, #0
 8007b6c:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007b6e:	693b      	ldr	r3, [r7, #16]
 8007b70:	015a      	lsls	r2, r3, #5
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	4413      	add	r3, r2
 8007b76:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007b7a:	461a      	mov	r2, r3
 8007b7c:	2300      	movs	r3, #0
 8007b7e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8007b80:	693b      	ldr	r3, [r7, #16]
 8007b82:	015a      	lsls	r2, r3, #5
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	4413      	add	r3, r2
 8007b88:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007b8c:	461a      	mov	r2, r3
 8007b8e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8007b92:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007b94:	693b      	ldr	r3, [r7, #16]
 8007b96:	3301      	adds	r3, #1
 8007b98:	613b      	str	r3, [r7, #16]
 8007b9a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8007b9e:	461a      	mov	r2, r3
 8007ba0:	693b      	ldr	r3, [r7, #16]
 8007ba2:	4293      	cmp	r3, r2
 8007ba4:	d3b5      	bcc.n	8007b12 <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007bac:	691b      	ldr	r3, [r3, #16]
 8007bae:	68fa      	ldr	r2, [r7, #12]
 8007bb0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007bb4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007bb8:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	2200      	movs	r2, #0
 8007bbe:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8007bc6:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007bc8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d105      	bne.n	8007bdc <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	699b      	ldr	r3, [r3, #24]
 8007bd4:	f043 0210 	orr.w	r2, r3, #16
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	699a      	ldr	r2, [r3, #24]
 8007be0:	4b0f      	ldr	r3, [pc, #60]	@ (8007c20 <USB_DevInit+0x2b4>)
 8007be2:	4313      	orrs	r3, r2
 8007be4:	687a      	ldr	r2, [r7, #4]
 8007be6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007be8:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d005      	beq.n	8007bfc <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	699b      	ldr	r3, [r3, #24]
 8007bf4:	f043 0208 	orr.w	r2, r3, #8
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8007bfc:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8007c00:	2b01      	cmp	r3, #1
 8007c02:	d105      	bne.n	8007c10 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	699a      	ldr	r2, [r3, #24]
 8007c08:	4b06      	ldr	r3, [pc, #24]	@ (8007c24 <USB_DevInit+0x2b8>)
 8007c0a:	4313      	orrs	r3, r2
 8007c0c:	687a      	ldr	r2, [r7, #4]
 8007c0e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007c10:	7dfb      	ldrb	r3, [r7, #23]
}
 8007c12:	4618      	mov	r0, r3
 8007c14:	3718      	adds	r7, #24
 8007c16:	46bd      	mov	sp, r7
 8007c18:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007c1c:	b004      	add	sp, #16
 8007c1e:	4770      	bx	lr
 8007c20:	803c3800 	.word	0x803c3800
 8007c24:	40000004 	.word	0x40000004

08007c28 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007c28:	b480      	push	{r7}
 8007c2a:	b085      	sub	sp, #20
 8007c2c:	af00      	add	r7, sp, #0
 8007c2e:	6078      	str	r0, [r7, #4]
 8007c30:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007c32:	2300      	movs	r3, #0
 8007c34:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	3301      	adds	r3, #1
 8007c3a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007c42:	d901      	bls.n	8007c48 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007c44:	2303      	movs	r3, #3
 8007c46:	e01b      	b.n	8007c80 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	691b      	ldr	r3, [r3, #16]
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	daf2      	bge.n	8007c36 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007c50:	2300      	movs	r3, #0
 8007c52:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007c54:	683b      	ldr	r3, [r7, #0]
 8007c56:	019b      	lsls	r3, r3, #6
 8007c58:	f043 0220 	orr.w	r2, r3, #32
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	3301      	adds	r3, #1
 8007c64:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007c6c:	d901      	bls.n	8007c72 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8007c6e:	2303      	movs	r3, #3
 8007c70:	e006      	b.n	8007c80 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	691b      	ldr	r3, [r3, #16]
 8007c76:	f003 0320 	and.w	r3, r3, #32
 8007c7a:	2b20      	cmp	r3, #32
 8007c7c:	d0f0      	beq.n	8007c60 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8007c7e:	2300      	movs	r3, #0
}
 8007c80:	4618      	mov	r0, r3
 8007c82:	3714      	adds	r7, #20
 8007c84:	46bd      	mov	sp, r7
 8007c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c8a:	4770      	bx	lr

08007c8c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007c8c:	b480      	push	{r7}
 8007c8e:	b085      	sub	sp, #20
 8007c90:	af00      	add	r7, sp, #0
 8007c92:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007c94:	2300      	movs	r3, #0
 8007c96:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	3301      	adds	r3, #1
 8007c9c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007ca4:	d901      	bls.n	8007caa <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8007ca6:	2303      	movs	r3, #3
 8007ca8:	e018      	b.n	8007cdc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	691b      	ldr	r3, [r3, #16]
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	daf2      	bge.n	8007c98 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8007cb2:	2300      	movs	r3, #0
 8007cb4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	2210      	movs	r2, #16
 8007cba:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	3301      	adds	r3, #1
 8007cc0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007cc8:	d901      	bls.n	8007cce <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8007cca:	2303      	movs	r3, #3
 8007ccc:	e006      	b.n	8007cdc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	691b      	ldr	r3, [r3, #16]
 8007cd2:	f003 0310 	and.w	r3, r3, #16
 8007cd6:	2b10      	cmp	r3, #16
 8007cd8:	d0f0      	beq.n	8007cbc <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8007cda:	2300      	movs	r3, #0
}
 8007cdc:	4618      	mov	r0, r3
 8007cde:	3714      	adds	r7, #20
 8007ce0:	46bd      	mov	sp, r7
 8007ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ce6:	4770      	bx	lr

08007ce8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007ce8:	b480      	push	{r7}
 8007cea:	b085      	sub	sp, #20
 8007cec:	af00      	add	r7, sp, #0
 8007cee:	6078      	str	r0, [r7, #4]
 8007cf0:	460b      	mov	r3, r1
 8007cf2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007cfe:	681a      	ldr	r2, [r3, #0]
 8007d00:	78fb      	ldrb	r3, [r7, #3]
 8007d02:	68f9      	ldr	r1, [r7, #12]
 8007d04:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007d08:	4313      	orrs	r3, r2
 8007d0a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007d0c:	2300      	movs	r3, #0
}
 8007d0e:	4618      	mov	r0, r3
 8007d10:	3714      	adds	r7, #20
 8007d12:	46bd      	mov	sp, r7
 8007d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d18:	4770      	bx	lr

08007d1a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8007d1a:	b480      	push	{r7}
 8007d1c:	b085      	sub	sp, #20
 8007d1e:	af00      	add	r7, sp, #0
 8007d20:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	68fa      	ldr	r2, [r7, #12]
 8007d30:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8007d34:	f023 0303 	bic.w	r3, r3, #3
 8007d38:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007d40:	685b      	ldr	r3, [r3, #4]
 8007d42:	68fa      	ldr	r2, [r7, #12]
 8007d44:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007d48:	f043 0302 	orr.w	r3, r3, #2
 8007d4c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007d4e:	2300      	movs	r3, #0
}
 8007d50:	4618      	mov	r0, r3
 8007d52:	3714      	adds	r7, #20
 8007d54:	46bd      	mov	sp, r7
 8007d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d5a:	4770      	bx	lr

08007d5c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8007d5c:	b480      	push	{r7}
 8007d5e:	b083      	sub	sp, #12
 8007d60:	af00      	add	r7, sp, #0
 8007d62:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	695b      	ldr	r3, [r3, #20]
 8007d68:	f003 0301 	and.w	r3, r3, #1
}
 8007d6c:	4618      	mov	r0, r3
 8007d6e:	370c      	adds	r7, #12
 8007d70:	46bd      	mov	sp, r7
 8007d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d76:	4770      	bx	lr

08007d78 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007d78:	b480      	push	{r7}
 8007d7a:	b085      	sub	sp, #20
 8007d7c:	af00      	add	r7, sp, #0
 8007d7e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007d80:	2300      	movs	r3, #0
 8007d82:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	3301      	adds	r3, #1
 8007d88:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007d90:	d901      	bls.n	8007d96 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007d92:	2303      	movs	r3, #3
 8007d94:	e022      	b.n	8007ddc <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	691b      	ldr	r3, [r3, #16]
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	daf2      	bge.n	8007d84 <USB_CoreReset+0xc>

  count = 10U;
 8007d9e:	230a      	movs	r3, #10
 8007da0:	60fb      	str	r3, [r7, #12]

  /* few cycles before setting core reset */
  while (count > 0U)
 8007da2:	e002      	b.n	8007daa <USB_CoreReset+0x32>
  {
    count--;
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	3b01      	subs	r3, #1
 8007da8:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d1f9      	bne.n	8007da4 <USB_CoreReset+0x2c>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	691b      	ldr	r3, [r3, #16]
 8007db4:	f043 0201 	orr.w	r2, r3, #1
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	3301      	adds	r3, #1
 8007dc0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007dc8:	d901      	bls.n	8007dce <USB_CoreReset+0x56>
    {
      return HAL_TIMEOUT;
 8007dca:	2303      	movs	r3, #3
 8007dcc:	e006      	b.n	8007ddc <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	691b      	ldr	r3, [r3, #16]
 8007dd2:	f003 0301 	and.w	r3, r3, #1
 8007dd6:	2b01      	cmp	r3, #1
 8007dd8:	d0f0      	beq.n	8007dbc <USB_CoreReset+0x44>

  return HAL_OK;
 8007dda:	2300      	movs	r3, #0
}
 8007ddc:	4618      	mov	r0, r3
 8007dde:	3714      	adds	r7, #20
 8007de0:	46bd      	mov	sp, r7
 8007de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de6:	4770      	bx	lr

08007de8 <memset>:
 8007de8:	4402      	add	r2, r0
 8007dea:	4603      	mov	r3, r0
 8007dec:	4293      	cmp	r3, r2
 8007dee:	d100      	bne.n	8007df2 <memset+0xa>
 8007df0:	4770      	bx	lr
 8007df2:	f803 1b01 	strb.w	r1, [r3], #1
 8007df6:	e7f9      	b.n	8007dec <memset+0x4>

08007df8 <__errno>:
 8007df8:	4b01      	ldr	r3, [pc, #4]	@ (8007e00 <__errno+0x8>)
 8007dfa:	6818      	ldr	r0, [r3, #0]
 8007dfc:	4770      	bx	lr
 8007dfe:	bf00      	nop
 8007e00:	20000034 	.word	0x20000034

08007e04 <__libc_init_array>:
 8007e04:	b570      	push	{r4, r5, r6, lr}
 8007e06:	4d0d      	ldr	r5, [pc, #52]	@ (8007e3c <__libc_init_array+0x38>)
 8007e08:	4c0d      	ldr	r4, [pc, #52]	@ (8007e40 <__libc_init_array+0x3c>)
 8007e0a:	1b64      	subs	r4, r4, r5
 8007e0c:	10a4      	asrs	r4, r4, #2
 8007e0e:	2600      	movs	r6, #0
 8007e10:	42a6      	cmp	r6, r4
 8007e12:	d109      	bne.n	8007e28 <__libc_init_array+0x24>
 8007e14:	4d0b      	ldr	r5, [pc, #44]	@ (8007e44 <__libc_init_array+0x40>)
 8007e16:	4c0c      	ldr	r4, [pc, #48]	@ (8007e48 <__libc_init_array+0x44>)
 8007e18:	f000 fee0 	bl	8008bdc <_init>
 8007e1c:	1b64      	subs	r4, r4, r5
 8007e1e:	10a4      	asrs	r4, r4, #2
 8007e20:	2600      	movs	r6, #0
 8007e22:	42a6      	cmp	r6, r4
 8007e24:	d105      	bne.n	8007e32 <__libc_init_array+0x2e>
 8007e26:	bd70      	pop	{r4, r5, r6, pc}
 8007e28:	f855 3b04 	ldr.w	r3, [r5], #4
 8007e2c:	4798      	blx	r3
 8007e2e:	3601      	adds	r6, #1
 8007e30:	e7ee      	b.n	8007e10 <__libc_init_array+0xc>
 8007e32:	f855 3b04 	ldr.w	r3, [r5], #4
 8007e36:	4798      	blx	r3
 8007e38:	3601      	adds	r6, #1
 8007e3a:	e7f2      	b.n	8007e22 <__libc_init_array+0x1e>
 8007e3c:	0800901c 	.word	0x0800901c
 8007e40:	0800901c 	.word	0x0800901c
 8007e44:	0800901c 	.word	0x0800901c
 8007e48:	08009020 	.word	0x08009020

08007e4c <atan2f>:
 8007e4c:	f000 b908 	b.w	8008060 <__ieee754_atan2f>

08007e50 <sqrtf>:
 8007e50:	b508      	push	{r3, lr}
 8007e52:	ed2d 8b02 	vpush	{d8}
 8007e56:	eeb0 8a40 	vmov.f32	s16, s0
 8007e5a:	f000 f85d 	bl	8007f18 <__ieee754_sqrtf>
 8007e5e:	eeb4 8a48 	vcmp.f32	s16, s16
 8007e62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007e66:	d60c      	bvs.n	8007e82 <sqrtf+0x32>
 8007e68:	eddf 8a07 	vldr	s17, [pc, #28]	@ 8007e88 <sqrtf+0x38>
 8007e6c:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8007e70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007e74:	d505      	bpl.n	8007e82 <sqrtf+0x32>
 8007e76:	f7ff ffbf 	bl	8007df8 <__errno>
 8007e7a:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8007e7e:	2321      	movs	r3, #33	@ 0x21
 8007e80:	6003      	str	r3, [r0, #0]
 8007e82:	ecbd 8b02 	vpop	{d8}
 8007e86:	bd08      	pop	{r3, pc}
 8007e88:	00000000 	.word	0x00000000

08007e8c <sinf>:
 8007e8c:	ee10 3a10 	vmov	r3, s0
 8007e90:	b507      	push	{r0, r1, r2, lr}
 8007e92:	4a1f      	ldr	r2, [pc, #124]	@ (8007f10 <sinf+0x84>)
 8007e94:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007e98:	4293      	cmp	r3, r2
 8007e9a:	d807      	bhi.n	8007eac <sinf+0x20>
 8007e9c:	eddf 0a1d 	vldr	s1, [pc, #116]	@ 8007f14 <sinf+0x88>
 8007ea0:	2000      	movs	r0, #0
 8007ea2:	b003      	add	sp, #12
 8007ea4:	f85d eb04 	ldr.w	lr, [sp], #4
 8007ea8:	f000 b892 	b.w	8007fd0 <__kernel_sinf>
 8007eac:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8007eb0:	d304      	bcc.n	8007ebc <sinf+0x30>
 8007eb2:	ee30 0a40 	vsub.f32	s0, s0, s0
 8007eb6:	b003      	add	sp, #12
 8007eb8:	f85d fb04 	ldr.w	pc, [sp], #4
 8007ebc:	4668      	mov	r0, sp
 8007ebe:	f000 f96f 	bl	80081a0 <__ieee754_rem_pio2f>
 8007ec2:	f000 0003 	and.w	r0, r0, #3
 8007ec6:	2801      	cmp	r0, #1
 8007ec8:	d00a      	beq.n	8007ee0 <sinf+0x54>
 8007eca:	2802      	cmp	r0, #2
 8007ecc:	d00f      	beq.n	8007eee <sinf+0x62>
 8007ece:	b9c0      	cbnz	r0, 8007f02 <sinf+0x76>
 8007ed0:	eddd 0a01 	vldr	s1, [sp, #4]
 8007ed4:	ed9d 0a00 	vldr	s0, [sp]
 8007ed8:	2001      	movs	r0, #1
 8007eda:	f000 f879 	bl	8007fd0 <__kernel_sinf>
 8007ede:	e7ea      	b.n	8007eb6 <sinf+0x2a>
 8007ee0:	eddd 0a01 	vldr	s1, [sp, #4]
 8007ee4:	ed9d 0a00 	vldr	s0, [sp]
 8007ee8:	f000 f81a 	bl	8007f20 <__kernel_cosf>
 8007eec:	e7e3      	b.n	8007eb6 <sinf+0x2a>
 8007eee:	eddd 0a01 	vldr	s1, [sp, #4]
 8007ef2:	ed9d 0a00 	vldr	s0, [sp]
 8007ef6:	2001      	movs	r0, #1
 8007ef8:	f000 f86a 	bl	8007fd0 <__kernel_sinf>
 8007efc:	eeb1 0a40 	vneg.f32	s0, s0
 8007f00:	e7d9      	b.n	8007eb6 <sinf+0x2a>
 8007f02:	eddd 0a01 	vldr	s1, [sp, #4]
 8007f06:	ed9d 0a00 	vldr	s0, [sp]
 8007f0a:	f000 f809 	bl	8007f20 <__kernel_cosf>
 8007f0e:	e7f5      	b.n	8007efc <sinf+0x70>
 8007f10:	3f490fd8 	.word	0x3f490fd8
 8007f14:	00000000 	.word	0x00000000

08007f18 <__ieee754_sqrtf>:
 8007f18:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8007f1c:	4770      	bx	lr
	...

08007f20 <__kernel_cosf>:
 8007f20:	ee10 3a10 	vmov	r3, s0
 8007f24:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007f28:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 8007f2c:	eef0 6a40 	vmov.f32	s13, s0
 8007f30:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8007f34:	d204      	bcs.n	8007f40 <__kernel_cosf+0x20>
 8007f36:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 8007f3a:	ee17 2a90 	vmov	r2, s15
 8007f3e:	b342      	cbz	r2, 8007f92 <__kernel_cosf+0x72>
 8007f40:	ee26 7aa6 	vmul.f32	s14, s13, s13
 8007f44:	eddf 7a1a 	vldr	s15, [pc, #104]	@ 8007fb0 <__kernel_cosf+0x90>
 8007f48:	ed9f 6a1a 	vldr	s12, [pc, #104]	@ 8007fb4 <__kernel_cosf+0x94>
 8007f4c:	4a1a      	ldr	r2, [pc, #104]	@ (8007fb8 <__kernel_cosf+0x98>)
 8007f4e:	eea7 6a27 	vfma.f32	s12, s14, s15
 8007f52:	4293      	cmp	r3, r2
 8007f54:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8007fbc <__kernel_cosf+0x9c>
 8007f58:	eee6 7a07 	vfma.f32	s15, s12, s14
 8007f5c:	ed9f 6a18 	vldr	s12, [pc, #96]	@ 8007fc0 <__kernel_cosf+0xa0>
 8007f60:	eea7 6a87 	vfma.f32	s12, s15, s14
 8007f64:	eddf 7a17 	vldr	s15, [pc, #92]	@ 8007fc4 <__kernel_cosf+0xa4>
 8007f68:	eee6 7a07 	vfma.f32	s15, s12, s14
 8007f6c:	ed9f 6a16 	vldr	s12, [pc, #88]	@ 8007fc8 <__kernel_cosf+0xa8>
 8007f70:	eea7 6a87 	vfma.f32	s12, s15, s14
 8007f74:	ee60 0ae6 	vnmul.f32	s1, s1, s13
 8007f78:	ee26 6a07 	vmul.f32	s12, s12, s14
 8007f7c:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8007f80:	eee7 0a06 	vfma.f32	s1, s14, s12
 8007f84:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007f88:	d804      	bhi.n	8007f94 <__kernel_cosf+0x74>
 8007f8a:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8007f8e:	ee30 0a67 	vsub.f32	s0, s0, s15
 8007f92:	4770      	bx	lr
 8007f94:	4a0d      	ldr	r2, [pc, #52]	@ (8007fcc <__kernel_cosf+0xac>)
 8007f96:	4293      	cmp	r3, r2
 8007f98:	bf9a      	itte	ls
 8007f9a:	f103 437f 	addls.w	r3, r3, #4278190080	@ 0xff000000
 8007f9e:	ee07 3a10 	vmovls	s14, r3
 8007fa2:	eeb5 7a02 	vmovhi.f32	s14, #82	@ 0x3e900000  0.2812500
 8007fa6:	ee30 0a47 	vsub.f32	s0, s0, s14
 8007faa:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8007fae:	e7ec      	b.n	8007f8a <__kernel_cosf+0x6a>
 8007fb0:	ad47d74e 	.word	0xad47d74e
 8007fb4:	310f74f6 	.word	0x310f74f6
 8007fb8:	3e999999 	.word	0x3e999999
 8007fbc:	b493f27c 	.word	0xb493f27c
 8007fc0:	37d00d01 	.word	0x37d00d01
 8007fc4:	bab60b61 	.word	0xbab60b61
 8007fc8:	3d2aaaab 	.word	0x3d2aaaab
 8007fcc:	3f480000 	.word	0x3f480000

08007fd0 <__kernel_sinf>:
 8007fd0:	ee10 3a10 	vmov	r3, s0
 8007fd4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007fd8:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 8007fdc:	d204      	bcs.n	8007fe8 <__kernel_sinf+0x18>
 8007fde:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8007fe2:	ee17 3a90 	vmov	r3, s15
 8007fe6:	b35b      	cbz	r3, 8008040 <__kernel_sinf+0x70>
 8007fe8:	ee20 7a00 	vmul.f32	s14, s0, s0
 8007fec:	eddf 7a15 	vldr	s15, [pc, #84]	@ 8008044 <__kernel_sinf+0x74>
 8007ff0:	ed9f 6a15 	vldr	s12, [pc, #84]	@ 8008048 <__kernel_sinf+0x78>
 8007ff4:	eea7 6a27 	vfma.f32	s12, s14, s15
 8007ff8:	eddf 7a14 	vldr	s15, [pc, #80]	@ 800804c <__kernel_sinf+0x7c>
 8007ffc:	eee6 7a07 	vfma.f32	s15, s12, s14
 8008000:	ed9f 6a13 	vldr	s12, [pc, #76]	@ 8008050 <__kernel_sinf+0x80>
 8008004:	eea7 6a87 	vfma.f32	s12, s15, s14
 8008008:	eddf 7a12 	vldr	s15, [pc, #72]	@ 8008054 <__kernel_sinf+0x84>
 800800c:	ee60 6a07 	vmul.f32	s13, s0, s14
 8008010:	eee6 7a07 	vfma.f32	s15, s12, s14
 8008014:	b930      	cbnz	r0, 8008024 <__kernel_sinf+0x54>
 8008016:	ed9f 6a10 	vldr	s12, [pc, #64]	@ 8008058 <__kernel_sinf+0x88>
 800801a:	eea7 6a27 	vfma.f32	s12, s14, s15
 800801e:	eea6 0a26 	vfma.f32	s0, s12, s13
 8008022:	4770      	bx	lr
 8008024:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8008028:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 800802c:	eee0 7a86 	vfma.f32	s15, s1, s12
 8008030:	eed7 0a87 	vfnms.f32	s1, s15, s14
 8008034:	eddf 7a09 	vldr	s15, [pc, #36]	@ 800805c <__kernel_sinf+0x8c>
 8008038:	eee6 0aa7 	vfma.f32	s1, s13, s15
 800803c:	ee30 0a60 	vsub.f32	s0, s0, s1
 8008040:	4770      	bx	lr
 8008042:	bf00      	nop
 8008044:	2f2ec9d3 	.word	0x2f2ec9d3
 8008048:	b2d72f34 	.word	0xb2d72f34
 800804c:	3638ef1b 	.word	0x3638ef1b
 8008050:	b9500d01 	.word	0xb9500d01
 8008054:	3c088889 	.word	0x3c088889
 8008058:	be2aaaab 	.word	0xbe2aaaab
 800805c:	3e2aaaab 	.word	0x3e2aaaab

08008060 <__ieee754_atan2f>:
 8008060:	ee10 2a90 	vmov	r2, s1
 8008064:	f022 4100 	bic.w	r1, r2, #2147483648	@ 0x80000000
 8008068:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 800806c:	b510      	push	{r4, lr}
 800806e:	eef0 7a40 	vmov.f32	s15, s0
 8008072:	d806      	bhi.n	8008082 <__ieee754_atan2f+0x22>
 8008074:	ee10 0a10 	vmov	r0, s0
 8008078:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 800807c:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8008080:	d904      	bls.n	800808c <__ieee754_atan2f+0x2c>
 8008082:	ee77 7aa0 	vadd.f32	s15, s15, s1
 8008086:	eeb0 0a67 	vmov.f32	s0, s15
 800808a:	bd10      	pop	{r4, pc}
 800808c:	f1b2 5f7e 	cmp.w	r2, #1065353216	@ 0x3f800000
 8008090:	d103      	bne.n	800809a <__ieee754_atan2f+0x3a>
 8008092:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008096:	f000 b9b3 	b.w	8008400 <atanf>
 800809a:	1794      	asrs	r4, r2, #30
 800809c:	f004 0402 	and.w	r4, r4, #2
 80080a0:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 80080a4:	b943      	cbnz	r3, 80080b8 <__ieee754_atan2f+0x58>
 80080a6:	2c02      	cmp	r4, #2
 80080a8:	d05e      	beq.n	8008168 <__ieee754_atan2f+0x108>
 80080aa:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 800817c <__ieee754_atan2f+0x11c>
 80080ae:	2c03      	cmp	r4, #3
 80080b0:	bf08      	it	eq
 80080b2:	eef0 7a47 	vmoveq.f32	s15, s14
 80080b6:	e7e6      	b.n	8008086 <__ieee754_atan2f+0x26>
 80080b8:	b941      	cbnz	r1, 80080cc <__ieee754_atan2f+0x6c>
 80080ba:	eddf 7a31 	vldr	s15, [pc, #196]	@ 8008180 <__ieee754_atan2f+0x120>
 80080be:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 8008184 <__ieee754_atan2f+0x124>
 80080c2:	2800      	cmp	r0, #0
 80080c4:	bfa8      	it	ge
 80080c6:	eef0 7a47 	vmovge.f32	s15, s14
 80080ca:	e7dc      	b.n	8008086 <__ieee754_atan2f+0x26>
 80080cc:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 80080d0:	d110      	bne.n	80080f4 <__ieee754_atan2f+0x94>
 80080d2:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 80080d6:	f104 34ff 	add.w	r4, r4, #4294967295
 80080da:	d107      	bne.n	80080ec <__ieee754_atan2f+0x8c>
 80080dc:	2c02      	cmp	r4, #2
 80080de:	d846      	bhi.n	800816e <__ieee754_atan2f+0x10e>
 80080e0:	4b29      	ldr	r3, [pc, #164]	@ (8008188 <__ieee754_atan2f+0x128>)
 80080e2:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80080e6:	edd3 7a00 	vldr	s15, [r3]
 80080ea:	e7cc      	b.n	8008086 <__ieee754_atan2f+0x26>
 80080ec:	2c02      	cmp	r4, #2
 80080ee:	d841      	bhi.n	8008174 <__ieee754_atan2f+0x114>
 80080f0:	4b26      	ldr	r3, [pc, #152]	@ (800818c <__ieee754_atan2f+0x12c>)
 80080f2:	e7f6      	b.n	80080e2 <__ieee754_atan2f+0x82>
 80080f4:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 80080f8:	d0df      	beq.n	80080ba <__ieee754_atan2f+0x5a>
 80080fa:	1a5b      	subs	r3, r3, r1
 80080fc:	f1b3 5ff4 	cmp.w	r3, #511705088	@ 0x1e800000
 8008100:	ea4f 51e3 	mov.w	r1, r3, asr #23
 8008104:	da1a      	bge.n	800813c <__ieee754_atan2f+0xdc>
 8008106:	2a00      	cmp	r2, #0
 8008108:	da01      	bge.n	800810e <__ieee754_atan2f+0xae>
 800810a:	313c      	adds	r1, #60	@ 0x3c
 800810c:	db19      	blt.n	8008142 <__ieee754_atan2f+0xe2>
 800810e:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 8008112:	f000 fa49 	bl	80085a8 <fabsf>
 8008116:	f000 f973 	bl	8008400 <atanf>
 800811a:	eef0 7a40 	vmov.f32	s15, s0
 800811e:	2c01      	cmp	r4, #1
 8008120:	d012      	beq.n	8008148 <__ieee754_atan2f+0xe8>
 8008122:	2c02      	cmp	r4, #2
 8008124:	d017      	beq.n	8008156 <__ieee754_atan2f+0xf6>
 8008126:	2c00      	cmp	r4, #0
 8008128:	d0ad      	beq.n	8008086 <__ieee754_atan2f+0x26>
 800812a:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 8008190 <__ieee754_atan2f+0x130>
 800812e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008132:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 8008194 <__ieee754_atan2f+0x134>
 8008136:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800813a:	e7a4      	b.n	8008086 <__ieee754_atan2f+0x26>
 800813c:	eddf 7a11 	vldr	s15, [pc, #68]	@ 8008184 <__ieee754_atan2f+0x124>
 8008140:	e7ed      	b.n	800811e <__ieee754_atan2f+0xbe>
 8008142:	eddf 7a15 	vldr	s15, [pc, #84]	@ 8008198 <__ieee754_atan2f+0x138>
 8008146:	e7ea      	b.n	800811e <__ieee754_atan2f+0xbe>
 8008148:	ee17 3a90 	vmov	r3, s15
 800814c:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8008150:	ee07 3a90 	vmov	s15, r3
 8008154:	e797      	b.n	8008086 <__ieee754_atan2f+0x26>
 8008156:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 8008190 <__ieee754_atan2f+0x130>
 800815a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800815e:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 8008194 <__ieee754_atan2f+0x134>
 8008162:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008166:	e78e      	b.n	8008086 <__ieee754_atan2f+0x26>
 8008168:	eddf 7a0a 	vldr	s15, [pc, #40]	@ 8008194 <__ieee754_atan2f+0x134>
 800816c:	e78b      	b.n	8008086 <__ieee754_atan2f+0x26>
 800816e:	eddf 7a0b 	vldr	s15, [pc, #44]	@ 800819c <__ieee754_atan2f+0x13c>
 8008172:	e788      	b.n	8008086 <__ieee754_atan2f+0x26>
 8008174:	eddf 7a08 	vldr	s15, [pc, #32]	@ 8008198 <__ieee754_atan2f+0x138>
 8008178:	e785      	b.n	8008086 <__ieee754_atan2f+0x26>
 800817a:	bf00      	nop
 800817c:	c0490fdb 	.word	0xc0490fdb
 8008180:	bfc90fdb 	.word	0xbfc90fdb
 8008184:	3fc90fdb 	.word	0x3fc90fdb
 8008188:	08008c18 	.word	0x08008c18
 800818c:	08008c0c 	.word	0x08008c0c
 8008190:	33bbbd2e 	.word	0x33bbbd2e
 8008194:	40490fdb 	.word	0x40490fdb
 8008198:	00000000 	.word	0x00000000
 800819c:	3f490fdb 	.word	0x3f490fdb

080081a0 <__ieee754_rem_pio2f>:
 80081a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80081a2:	ee10 6a10 	vmov	r6, s0
 80081a6:	4b88      	ldr	r3, [pc, #544]	@ (80083c8 <__ieee754_rem_pio2f+0x228>)
 80081a8:	f026 4500 	bic.w	r5, r6, #2147483648	@ 0x80000000
 80081ac:	429d      	cmp	r5, r3
 80081ae:	b087      	sub	sp, #28
 80081b0:	4604      	mov	r4, r0
 80081b2:	d805      	bhi.n	80081c0 <__ieee754_rem_pio2f+0x20>
 80081b4:	2300      	movs	r3, #0
 80081b6:	ed80 0a00 	vstr	s0, [r0]
 80081ba:	6043      	str	r3, [r0, #4]
 80081bc:	2000      	movs	r0, #0
 80081be:	e022      	b.n	8008206 <__ieee754_rem_pio2f+0x66>
 80081c0:	4b82      	ldr	r3, [pc, #520]	@ (80083cc <__ieee754_rem_pio2f+0x22c>)
 80081c2:	429d      	cmp	r5, r3
 80081c4:	d83a      	bhi.n	800823c <__ieee754_rem_pio2f+0x9c>
 80081c6:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 80081ca:	2e00      	cmp	r6, #0
 80081cc:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 80083d0 <__ieee754_rem_pio2f+0x230>
 80081d0:	4a80      	ldr	r2, [pc, #512]	@ (80083d4 <__ieee754_rem_pio2f+0x234>)
 80081d2:	f023 030f 	bic.w	r3, r3, #15
 80081d6:	dd18      	ble.n	800820a <__ieee754_rem_pio2f+0x6a>
 80081d8:	4293      	cmp	r3, r2
 80081da:	ee70 7a47 	vsub.f32	s15, s0, s14
 80081de:	bf09      	itett	eq
 80081e0:	ed9f 7a7d 	vldreq	s14, [pc, #500]	@ 80083d8 <__ieee754_rem_pio2f+0x238>
 80081e4:	eddf 6a7d 	vldrne	s13, [pc, #500]	@ 80083dc <__ieee754_rem_pio2f+0x23c>
 80081e8:	eddf 6a7d 	vldreq	s13, [pc, #500]	@ 80083e0 <__ieee754_rem_pio2f+0x240>
 80081ec:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 80081f0:	ee37 7ae6 	vsub.f32	s14, s15, s13
 80081f4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80081f8:	ed80 7a00 	vstr	s14, [r0]
 80081fc:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8008200:	edc0 7a01 	vstr	s15, [r0, #4]
 8008204:	2001      	movs	r0, #1
 8008206:	b007      	add	sp, #28
 8008208:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800820a:	4293      	cmp	r3, r2
 800820c:	ee70 7a07 	vadd.f32	s15, s0, s14
 8008210:	bf09      	itett	eq
 8008212:	ed9f 7a71 	vldreq	s14, [pc, #452]	@ 80083d8 <__ieee754_rem_pio2f+0x238>
 8008216:	eddf 6a71 	vldrne	s13, [pc, #452]	@ 80083dc <__ieee754_rem_pio2f+0x23c>
 800821a:	eddf 6a71 	vldreq	s13, [pc, #452]	@ 80083e0 <__ieee754_rem_pio2f+0x240>
 800821e:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 8008222:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8008226:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800822a:	ed80 7a00 	vstr	s14, [r0]
 800822e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008232:	edc0 7a01 	vstr	s15, [r0, #4]
 8008236:	f04f 30ff 	mov.w	r0, #4294967295
 800823a:	e7e4      	b.n	8008206 <__ieee754_rem_pio2f+0x66>
 800823c:	4b69      	ldr	r3, [pc, #420]	@ (80083e4 <__ieee754_rem_pio2f+0x244>)
 800823e:	429d      	cmp	r5, r3
 8008240:	d873      	bhi.n	800832a <__ieee754_rem_pio2f+0x18a>
 8008242:	f000 f9b1 	bl	80085a8 <fabsf>
 8008246:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 80083e8 <__ieee754_rem_pio2f+0x248>
 800824a:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800824e:	eee0 7a07 	vfma.f32	s15, s0, s14
 8008252:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008256:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800825a:	ee17 0a90 	vmov	r0, s15
 800825e:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 80083d0 <__ieee754_rem_pio2f+0x230>
 8008262:	eea7 0a67 	vfms.f32	s0, s14, s15
 8008266:	281f      	cmp	r0, #31
 8008268:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 80083dc <__ieee754_rem_pio2f+0x23c>
 800826c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008270:	eeb1 6a47 	vneg.f32	s12, s14
 8008274:	ee70 6a67 	vsub.f32	s13, s0, s15
 8008278:	ee16 1a90 	vmov	r1, s13
 800827c:	dc09      	bgt.n	8008292 <__ieee754_rem_pio2f+0xf2>
 800827e:	4a5b      	ldr	r2, [pc, #364]	@ (80083ec <__ieee754_rem_pio2f+0x24c>)
 8008280:	1e47      	subs	r7, r0, #1
 8008282:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 8008286:	f852 2027 	ldr.w	r2, [r2, r7, lsl #2]
 800828a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800828e:	4293      	cmp	r3, r2
 8008290:	d107      	bne.n	80082a2 <__ieee754_rem_pio2f+0x102>
 8008292:	f3c1 52c7 	ubfx	r2, r1, #23, #8
 8008296:	ebc2 52d5 	rsb	r2, r2, r5, lsr #23
 800829a:	2a08      	cmp	r2, #8
 800829c:	ea4f 53e5 	mov.w	r3, r5, asr #23
 80082a0:	dc14      	bgt.n	80082cc <__ieee754_rem_pio2f+0x12c>
 80082a2:	6021      	str	r1, [r4, #0]
 80082a4:	ed94 7a00 	vldr	s14, [r4]
 80082a8:	ee30 0a47 	vsub.f32	s0, s0, s14
 80082ac:	2e00      	cmp	r6, #0
 80082ae:	ee30 0a67 	vsub.f32	s0, s0, s15
 80082b2:	ed84 0a01 	vstr	s0, [r4, #4]
 80082b6:	daa6      	bge.n	8008206 <__ieee754_rem_pio2f+0x66>
 80082b8:	eeb1 7a47 	vneg.f32	s14, s14
 80082bc:	eeb1 0a40 	vneg.f32	s0, s0
 80082c0:	ed84 7a00 	vstr	s14, [r4]
 80082c4:	ed84 0a01 	vstr	s0, [r4, #4]
 80082c8:	4240      	negs	r0, r0
 80082ca:	e79c      	b.n	8008206 <__ieee754_rem_pio2f+0x66>
 80082cc:	eddf 5a42 	vldr	s11, [pc, #264]	@ 80083d8 <__ieee754_rem_pio2f+0x238>
 80082d0:	eef0 6a40 	vmov.f32	s13, s0
 80082d4:	eee6 6a25 	vfma.f32	s13, s12, s11
 80082d8:	ee70 7a66 	vsub.f32	s15, s0, s13
 80082dc:	eee6 7a25 	vfma.f32	s15, s12, s11
 80082e0:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 80083e0 <__ieee754_rem_pio2f+0x240>
 80082e4:	eed7 7a25 	vfnms.f32	s15, s14, s11
 80082e8:	ee76 5ae7 	vsub.f32	s11, s13, s15
 80082ec:	ee15 2a90 	vmov	r2, s11
 80082f0:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 80082f4:	1a5b      	subs	r3, r3, r1
 80082f6:	2b19      	cmp	r3, #25
 80082f8:	dc04      	bgt.n	8008304 <__ieee754_rem_pio2f+0x164>
 80082fa:	edc4 5a00 	vstr	s11, [r4]
 80082fe:	eeb0 0a66 	vmov.f32	s0, s13
 8008302:	e7cf      	b.n	80082a4 <__ieee754_rem_pio2f+0x104>
 8008304:	eddf 5a3a 	vldr	s11, [pc, #232]	@ 80083f0 <__ieee754_rem_pio2f+0x250>
 8008308:	eeb0 0a66 	vmov.f32	s0, s13
 800830c:	eea6 0a25 	vfma.f32	s0, s12, s11
 8008310:	ee76 7ac0 	vsub.f32	s15, s13, s0
 8008314:	eddf 6a37 	vldr	s13, [pc, #220]	@ 80083f4 <__ieee754_rem_pio2f+0x254>
 8008318:	eee6 7a25 	vfma.f32	s15, s12, s11
 800831c:	eed7 7a26 	vfnms.f32	s15, s14, s13
 8008320:	ee30 7a67 	vsub.f32	s14, s0, s15
 8008324:	ed84 7a00 	vstr	s14, [r4]
 8008328:	e7bc      	b.n	80082a4 <__ieee754_rem_pio2f+0x104>
 800832a:	f1b5 4fff 	cmp.w	r5, #2139095040	@ 0x7f800000
 800832e:	d306      	bcc.n	800833e <__ieee754_rem_pio2f+0x19e>
 8008330:	ee70 7a40 	vsub.f32	s15, s0, s0
 8008334:	edc0 7a01 	vstr	s15, [r0, #4]
 8008338:	edc0 7a00 	vstr	s15, [r0]
 800833c:	e73e      	b.n	80081bc <__ieee754_rem_pio2f+0x1c>
 800833e:	15ea      	asrs	r2, r5, #23
 8008340:	3a86      	subs	r2, #134	@ 0x86
 8008342:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 8008346:	ee07 3a90 	vmov	s15, r3
 800834a:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800834e:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 80083f8 <__ieee754_rem_pio2f+0x258>
 8008352:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8008356:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800835a:	ed8d 7a03 	vstr	s14, [sp, #12]
 800835e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8008362:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8008366:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800836a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800836e:	ed8d 7a04 	vstr	s14, [sp, #16]
 8008372:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8008376:	eef5 7a40 	vcmp.f32	s15, #0.0
 800837a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800837e:	edcd 7a05 	vstr	s15, [sp, #20]
 8008382:	d11e      	bne.n	80083c2 <__ieee754_rem_pio2f+0x222>
 8008384:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8008388:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800838c:	bf0c      	ite	eq
 800838e:	2301      	moveq	r3, #1
 8008390:	2302      	movne	r3, #2
 8008392:	491a      	ldr	r1, [pc, #104]	@ (80083fc <__ieee754_rem_pio2f+0x25c>)
 8008394:	9101      	str	r1, [sp, #4]
 8008396:	2102      	movs	r1, #2
 8008398:	9100      	str	r1, [sp, #0]
 800839a:	a803      	add	r0, sp, #12
 800839c:	4621      	mov	r1, r4
 800839e:	f000 f90b 	bl	80085b8 <__kernel_rem_pio2f>
 80083a2:	2e00      	cmp	r6, #0
 80083a4:	f6bf af2f 	bge.w	8008206 <__ieee754_rem_pio2f+0x66>
 80083a8:	edd4 7a00 	vldr	s15, [r4]
 80083ac:	eef1 7a67 	vneg.f32	s15, s15
 80083b0:	edc4 7a00 	vstr	s15, [r4]
 80083b4:	edd4 7a01 	vldr	s15, [r4, #4]
 80083b8:	eef1 7a67 	vneg.f32	s15, s15
 80083bc:	edc4 7a01 	vstr	s15, [r4, #4]
 80083c0:	e782      	b.n	80082c8 <__ieee754_rem_pio2f+0x128>
 80083c2:	2303      	movs	r3, #3
 80083c4:	e7e5      	b.n	8008392 <__ieee754_rem_pio2f+0x1f2>
 80083c6:	bf00      	nop
 80083c8:	3f490fd8 	.word	0x3f490fd8
 80083cc:	4016cbe3 	.word	0x4016cbe3
 80083d0:	3fc90f80 	.word	0x3fc90f80
 80083d4:	3fc90fd0 	.word	0x3fc90fd0
 80083d8:	37354400 	.word	0x37354400
 80083dc:	37354443 	.word	0x37354443
 80083e0:	2e85a308 	.word	0x2e85a308
 80083e4:	43490f80 	.word	0x43490f80
 80083e8:	3f22f984 	.word	0x3f22f984
 80083ec:	08008c24 	.word	0x08008c24
 80083f0:	2e85a300 	.word	0x2e85a300
 80083f4:	248d3132 	.word	0x248d3132
 80083f8:	43800000 	.word	0x43800000
 80083fc:	08008ca4 	.word	0x08008ca4

08008400 <atanf>:
 8008400:	b538      	push	{r3, r4, r5, lr}
 8008402:	ee10 5a10 	vmov	r5, s0
 8008406:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 800840a:	f1b4 4fa1 	cmp.w	r4, #1350565888	@ 0x50800000
 800840e:	eef0 7a40 	vmov.f32	s15, s0
 8008412:	d310      	bcc.n	8008436 <atanf+0x36>
 8008414:	f1b4 4fff 	cmp.w	r4, #2139095040	@ 0x7f800000
 8008418:	d904      	bls.n	8008424 <atanf+0x24>
 800841a:	ee70 7a00 	vadd.f32	s15, s0, s0
 800841e:	eeb0 0a67 	vmov.f32	s0, s15
 8008422:	bd38      	pop	{r3, r4, r5, pc}
 8008424:	eddf 7a4d 	vldr	s15, [pc, #308]	@ 800855c <atanf+0x15c>
 8008428:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 8008560 <atanf+0x160>
 800842c:	2d00      	cmp	r5, #0
 800842e:	bfc8      	it	gt
 8008430:	eef0 7a47 	vmovgt.f32	s15, s14
 8008434:	e7f3      	b.n	800841e <atanf+0x1e>
 8008436:	4b4b      	ldr	r3, [pc, #300]	@ (8008564 <atanf+0x164>)
 8008438:	429c      	cmp	r4, r3
 800843a:	d810      	bhi.n	800845e <atanf+0x5e>
 800843c:	f1b4 5f44 	cmp.w	r4, #822083584	@ 0x31000000
 8008440:	d20a      	bcs.n	8008458 <atanf+0x58>
 8008442:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 8008568 <atanf+0x168>
 8008446:	ee30 7a07 	vadd.f32	s14, s0, s14
 800844a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800844e:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8008452:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008456:	dce2      	bgt.n	800841e <atanf+0x1e>
 8008458:	f04f 33ff 	mov.w	r3, #4294967295
 800845c:	e013      	b.n	8008486 <atanf+0x86>
 800845e:	f000 f8a3 	bl	80085a8 <fabsf>
 8008462:	4b42      	ldr	r3, [pc, #264]	@ (800856c <atanf+0x16c>)
 8008464:	429c      	cmp	r4, r3
 8008466:	d84f      	bhi.n	8008508 <atanf+0x108>
 8008468:	f5a3 03d0 	sub.w	r3, r3, #6815744	@ 0x680000
 800846c:	429c      	cmp	r4, r3
 800846e:	d841      	bhi.n	80084f4 <atanf+0xf4>
 8008470:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 8008474:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8008478:	eea0 7a27 	vfma.f32	s14, s0, s15
 800847c:	2300      	movs	r3, #0
 800847e:	ee30 0a27 	vadd.f32	s0, s0, s15
 8008482:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8008486:	1c5a      	adds	r2, r3, #1
 8008488:	ee27 6aa7 	vmul.f32	s12, s15, s15
 800848c:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 8008570 <atanf+0x170>
 8008490:	eddf 5a38 	vldr	s11, [pc, #224]	@ 8008574 <atanf+0x174>
 8008494:	ed9f 5a38 	vldr	s10, [pc, #224]	@ 8008578 <atanf+0x178>
 8008498:	ee66 6a06 	vmul.f32	s13, s12, s12
 800849c:	eee6 5a87 	vfma.f32	s11, s13, s14
 80084a0:	ed9f 7a36 	vldr	s14, [pc, #216]	@ 800857c <atanf+0x17c>
 80084a4:	eea5 7aa6 	vfma.f32	s14, s11, s13
 80084a8:	eddf 5a35 	vldr	s11, [pc, #212]	@ 8008580 <atanf+0x180>
 80084ac:	eee7 5a26 	vfma.f32	s11, s14, s13
 80084b0:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 8008584 <atanf+0x184>
 80084b4:	eea5 7aa6 	vfma.f32	s14, s11, s13
 80084b8:	eddf 5a33 	vldr	s11, [pc, #204]	@ 8008588 <atanf+0x188>
 80084bc:	eee7 5a26 	vfma.f32	s11, s14, s13
 80084c0:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 800858c <atanf+0x18c>
 80084c4:	eea6 5a87 	vfma.f32	s10, s13, s14
 80084c8:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 8008590 <atanf+0x190>
 80084cc:	eea5 7a26 	vfma.f32	s14, s10, s13
 80084d0:	ed9f 5a30 	vldr	s10, [pc, #192]	@ 8008594 <atanf+0x194>
 80084d4:	eea7 5a26 	vfma.f32	s10, s14, s13
 80084d8:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 8008598 <atanf+0x198>
 80084dc:	eea5 7a26 	vfma.f32	s14, s10, s13
 80084e0:	ee27 7a26 	vmul.f32	s14, s14, s13
 80084e4:	eea5 7a86 	vfma.f32	s14, s11, s12
 80084e8:	ee27 7a87 	vmul.f32	s14, s15, s14
 80084ec:	d121      	bne.n	8008532 <atanf+0x132>
 80084ee:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80084f2:	e794      	b.n	800841e <atanf+0x1e>
 80084f4:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 80084f8:	ee30 7a67 	vsub.f32	s14, s0, s15
 80084fc:	ee30 0a27 	vadd.f32	s0, s0, s15
 8008500:	2301      	movs	r3, #1
 8008502:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8008506:	e7be      	b.n	8008486 <atanf+0x86>
 8008508:	4b24      	ldr	r3, [pc, #144]	@ (800859c <atanf+0x19c>)
 800850a:	429c      	cmp	r4, r3
 800850c:	d80b      	bhi.n	8008526 <atanf+0x126>
 800850e:	eef7 7a08 	vmov.f32	s15, #120	@ 0x3fc00000  1.5
 8008512:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8008516:	eea0 7a27 	vfma.f32	s14, s0, s15
 800851a:	2302      	movs	r3, #2
 800851c:	ee70 6a67 	vsub.f32	s13, s0, s15
 8008520:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008524:	e7af      	b.n	8008486 <atanf+0x86>
 8008526:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 800852a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800852e:	2303      	movs	r3, #3
 8008530:	e7a9      	b.n	8008486 <atanf+0x86>
 8008532:	4a1b      	ldr	r2, [pc, #108]	@ (80085a0 <atanf+0x1a0>)
 8008534:	491b      	ldr	r1, [pc, #108]	@ (80085a4 <atanf+0x1a4>)
 8008536:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800853a:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800853e:	edd3 6a00 	vldr	s13, [r3]
 8008542:	ee37 7a66 	vsub.f32	s14, s14, s13
 8008546:	2d00      	cmp	r5, #0
 8008548:	ee37 7a67 	vsub.f32	s14, s14, s15
 800854c:	edd2 7a00 	vldr	s15, [r2]
 8008550:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008554:	bfb8      	it	lt
 8008556:	eef1 7a67 	vneglt.f32	s15, s15
 800855a:	e760      	b.n	800841e <atanf+0x1e>
 800855c:	bfc90fdb 	.word	0xbfc90fdb
 8008560:	3fc90fdb 	.word	0x3fc90fdb
 8008564:	3edfffff 	.word	0x3edfffff
 8008568:	7149f2ca 	.word	0x7149f2ca
 800856c:	3f97ffff 	.word	0x3f97ffff
 8008570:	3c8569d7 	.word	0x3c8569d7
 8008574:	3d4bda59 	.word	0x3d4bda59
 8008578:	bd6ef16b 	.word	0xbd6ef16b
 800857c:	3d886b35 	.word	0x3d886b35
 8008580:	3dba2e6e 	.word	0x3dba2e6e
 8008584:	3e124925 	.word	0x3e124925
 8008588:	3eaaaaab 	.word	0x3eaaaaab
 800858c:	bd15a221 	.word	0xbd15a221
 8008590:	bd9d8795 	.word	0xbd9d8795
 8008594:	bde38e38 	.word	0xbde38e38
 8008598:	be4ccccd 	.word	0xbe4ccccd
 800859c:	401bffff 	.word	0x401bffff
 80085a0:	08008fcc 	.word	0x08008fcc
 80085a4:	08008fbc 	.word	0x08008fbc

080085a8 <fabsf>:
 80085a8:	ee10 3a10 	vmov	r3, s0
 80085ac:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80085b0:	ee00 3a10 	vmov	s0, r3
 80085b4:	4770      	bx	lr
	...

080085b8 <__kernel_rem_pio2f>:
 80085b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085bc:	ed2d 8b04 	vpush	{d8-d9}
 80085c0:	b0d9      	sub	sp, #356	@ 0x164
 80085c2:	4690      	mov	r8, r2
 80085c4:	9001      	str	r0, [sp, #4]
 80085c6:	4ab6      	ldr	r2, [pc, #728]	@ (80088a0 <__kernel_rem_pio2f+0x2e8>)
 80085c8:	9866      	ldr	r0, [sp, #408]	@ 0x198
 80085ca:	f118 0f04 	cmn.w	r8, #4
 80085ce:	f852 a020 	ldr.w	sl, [r2, r0, lsl #2]
 80085d2:	460f      	mov	r7, r1
 80085d4:	f103 3bff 	add.w	fp, r3, #4294967295
 80085d8:	db26      	blt.n	8008628 <__kernel_rem_pio2f+0x70>
 80085da:	f1b8 0203 	subs.w	r2, r8, #3
 80085de:	bf48      	it	mi
 80085e0:	f108 0204 	addmi.w	r2, r8, #4
 80085e4:	10d2      	asrs	r2, r2, #3
 80085e6:	1c55      	adds	r5, r2, #1
 80085e8:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 80085ea:	ed9f 7ab1 	vldr	s14, [pc, #708]	@ 80088b0 <__kernel_rem_pio2f+0x2f8>
 80085ee:	00e8      	lsls	r0, r5, #3
 80085f0:	eba2 060b 	sub.w	r6, r2, fp
 80085f4:	9002      	str	r0, [sp, #8]
 80085f6:	eba8 05c5 	sub.w	r5, r8, r5, lsl #3
 80085fa:	eb0a 0c0b 	add.w	ip, sl, fp
 80085fe:	ac1c      	add	r4, sp, #112	@ 0x70
 8008600:	eb01 0e86 	add.w	lr, r1, r6, lsl #2
 8008604:	2000      	movs	r0, #0
 8008606:	4560      	cmp	r0, ip
 8008608:	dd10      	ble.n	800862c <__kernel_rem_pio2f+0x74>
 800860a:	a91c      	add	r1, sp, #112	@ 0x70
 800860c:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 8008610:	f50d 7988 	add.w	r9, sp, #272	@ 0x110
 8008614:	2600      	movs	r6, #0
 8008616:	4556      	cmp	r6, sl
 8008618:	dc24      	bgt.n	8008664 <__kernel_rem_pio2f+0xac>
 800861a:	f8dd e004 	ldr.w	lr, [sp, #4]
 800861e:	eddf 7aa4 	vldr	s15, [pc, #656]	@ 80088b0 <__kernel_rem_pio2f+0x2f8>
 8008622:	4684      	mov	ip, r0
 8008624:	2400      	movs	r4, #0
 8008626:	e016      	b.n	8008656 <__kernel_rem_pio2f+0x9e>
 8008628:	2200      	movs	r2, #0
 800862a:	e7dc      	b.n	80085e6 <__kernel_rem_pio2f+0x2e>
 800862c:	42c6      	cmn	r6, r0
 800862e:	bf5d      	ittte	pl
 8008630:	f85e 1020 	ldrpl.w	r1, [lr, r0, lsl #2]
 8008634:	ee07 1a90 	vmovpl	s15, r1
 8008638:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 800863c:	eef0 7a47 	vmovmi.f32	s15, s14
 8008640:	ece4 7a01 	vstmia	r4!, {s15}
 8008644:	3001      	adds	r0, #1
 8008646:	e7de      	b.n	8008606 <__kernel_rem_pio2f+0x4e>
 8008648:	ecfe 6a01 	vldmia	lr!, {s13}
 800864c:	ed3c 7a01 	vldmdb	ip!, {s14}
 8008650:	eee6 7a87 	vfma.f32	s15, s13, s14
 8008654:	3401      	adds	r4, #1
 8008656:	455c      	cmp	r4, fp
 8008658:	ddf6      	ble.n	8008648 <__kernel_rem_pio2f+0x90>
 800865a:	ece9 7a01 	vstmia	r9!, {s15}
 800865e:	3601      	adds	r6, #1
 8008660:	3004      	adds	r0, #4
 8008662:	e7d8      	b.n	8008616 <__kernel_rem_pio2f+0x5e>
 8008664:	a908      	add	r1, sp, #32
 8008666:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800866a:	9104      	str	r1, [sp, #16]
 800866c:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 800866e:	eddf 8a8f 	vldr	s17, [pc, #572]	@ 80088ac <__kernel_rem_pio2f+0x2f4>
 8008672:	ed9f 9a8d 	vldr	s18, [pc, #564]	@ 80088a8 <__kernel_rem_pio2f+0x2f0>
 8008676:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 800867a:	9203      	str	r2, [sp, #12]
 800867c:	4654      	mov	r4, sl
 800867e:	00a2      	lsls	r2, r4, #2
 8008680:	9205      	str	r2, [sp, #20]
 8008682:	aa58      	add	r2, sp, #352	@ 0x160
 8008684:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 8008688:	ed12 0a14 	vldr	s0, [r2, #-80]	@ 0xffffffb0
 800868c:	a944      	add	r1, sp, #272	@ 0x110
 800868e:	aa08      	add	r2, sp, #32
 8008690:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 8008694:	4694      	mov	ip, r2
 8008696:	4626      	mov	r6, r4
 8008698:	2e00      	cmp	r6, #0
 800869a:	dc4c      	bgt.n	8008736 <__kernel_rem_pio2f+0x17e>
 800869c:	4628      	mov	r0, r5
 800869e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80086a2:	f000 f9f1 	bl	8008a88 <scalbnf>
 80086a6:	eeb0 8a40 	vmov.f32	s16, s0
 80086aa:	eeb4 0a00 	vmov.f32	s0, #64	@ 0x3e000000  0.125
 80086ae:	ee28 0a00 	vmul.f32	s0, s16, s0
 80086b2:	f000 fa4f 	bl	8008b54 <floorf>
 80086b6:	eef2 7a00 	vmov.f32	s15, #32	@ 0x41000000  8.0
 80086ba:	eea0 8a67 	vfms.f32	s16, s0, s15
 80086be:	2d00      	cmp	r5, #0
 80086c0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80086c4:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 80086c8:	ee17 9a90 	vmov	r9, s15
 80086cc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80086d0:	ee38 8a67 	vsub.f32	s16, s16, s15
 80086d4:	dd41      	ble.n	800875a <__kernel_rem_pio2f+0x1a2>
 80086d6:	f104 3cff 	add.w	ip, r4, #4294967295
 80086da:	a908      	add	r1, sp, #32
 80086dc:	f1c5 0e08 	rsb	lr, r5, #8
 80086e0:	f851 602c 	ldr.w	r6, [r1, ip, lsl #2]
 80086e4:	fa46 f00e 	asr.w	r0, r6, lr
 80086e8:	4481      	add	r9, r0
 80086ea:	fa00 f00e 	lsl.w	r0, r0, lr
 80086ee:	1a36      	subs	r6, r6, r0
 80086f0:	f1c5 0007 	rsb	r0, r5, #7
 80086f4:	f841 602c 	str.w	r6, [r1, ip, lsl #2]
 80086f8:	4106      	asrs	r6, r0
 80086fa:	2e00      	cmp	r6, #0
 80086fc:	dd3c      	ble.n	8008778 <__kernel_rem_pio2f+0x1c0>
 80086fe:	f04f 0e00 	mov.w	lr, #0
 8008702:	f109 0901 	add.w	r9, r9, #1
 8008706:	4670      	mov	r0, lr
 8008708:	4574      	cmp	r4, lr
 800870a:	dc68      	bgt.n	80087de <__kernel_rem_pio2f+0x226>
 800870c:	2d00      	cmp	r5, #0
 800870e:	dd03      	ble.n	8008718 <__kernel_rem_pio2f+0x160>
 8008710:	2d01      	cmp	r5, #1
 8008712:	d074      	beq.n	80087fe <__kernel_rem_pio2f+0x246>
 8008714:	2d02      	cmp	r5, #2
 8008716:	d07d      	beq.n	8008814 <__kernel_rem_pio2f+0x25c>
 8008718:	2e02      	cmp	r6, #2
 800871a:	d12d      	bne.n	8008778 <__kernel_rem_pio2f+0x1c0>
 800871c:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8008720:	ee30 8a48 	vsub.f32	s16, s0, s16
 8008724:	b340      	cbz	r0, 8008778 <__kernel_rem_pio2f+0x1c0>
 8008726:	4628      	mov	r0, r5
 8008728:	9306      	str	r3, [sp, #24]
 800872a:	f000 f9ad 	bl	8008a88 <scalbnf>
 800872e:	9b06      	ldr	r3, [sp, #24]
 8008730:	ee38 8a40 	vsub.f32	s16, s16, s0
 8008734:	e020      	b.n	8008778 <__kernel_rem_pio2f+0x1c0>
 8008736:	ee60 7a28 	vmul.f32	s15, s0, s17
 800873a:	3e01      	subs	r6, #1
 800873c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008740:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008744:	eea7 0ac9 	vfms.f32	s0, s15, s18
 8008748:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800874c:	ecac 0a01 	vstmia	ip!, {s0}
 8008750:	ed30 0a01 	vldmdb	r0!, {s0}
 8008754:	ee37 0a80 	vadd.f32	s0, s15, s0
 8008758:	e79e      	b.n	8008698 <__kernel_rem_pio2f+0xe0>
 800875a:	d105      	bne.n	8008768 <__kernel_rem_pio2f+0x1b0>
 800875c:	1e60      	subs	r0, r4, #1
 800875e:	a908      	add	r1, sp, #32
 8008760:	f851 6020 	ldr.w	r6, [r1, r0, lsl #2]
 8008764:	11f6      	asrs	r6, r6, #7
 8008766:	e7c8      	b.n	80086fa <__kernel_rem_pio2f+0x142>
 8008768:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800876c:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8008770:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008774:	da31      	bge.n	80087da <__kernel_rem_pio2f+0x222>
 8008776:	2600      	movs	r6, #0
 8008778:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800877c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008780:	f040 8098 	bne.w	80088b4 <__kernel_rem_pio2f+0x2fc>
 8008784:	1e60      	subs	r0, r4, #1
 8008786:	2200      	movs	r2, #0
 8008788:	4550      	cmp	r0, sl
 800878a:	da4b      	bge.n	8008824 <__kernel_rem_pio2f+0x26c>
 800878c:	2a00      	cmp	r2, #0
 800878e:	d065      	beq.n	800885c <__kernel_rem_pio2f+0x2a4>
 8008790:	3c01      	subs	r4, #1
 8008792:	ab08      	add	r3, sp, #32
 8008794:	3d08      	subs	r5, #8
 8008796:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800879a:	2b00      	cmp	r3, #0
 800879c:	d0f8      	beq.n	8008790 <__kernel_rem_pio2f+0x1d8>
 800879e:	4628      	mov	r0, r5
 80087a0:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 80087a4:	f000 f970 	bl	8008a88 <scalbnf>
 80087a8:	1c63      	adds	r3, r4, #1
 80087aa:	aa44      	add	r2, sp, #272	@ 0x110
 80087ac:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 80088ac <__kernel_rem_pio2f+0x2f4>
 80087b0:	0099      	lsls	r1, r3, #2
 80087b2:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 80087b6:	4623      	mov	r3, r4
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	f280 80a9 	bge.w	8008910 <__kernel_rem_pio2f+0x358>
 80087be:	4623      	mov	r3, r4
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	f2c0 80c7 	blt.w	8008954 <__kernel_rem_pio2f+0x39c>
 80087c6:	aa44      	add	r2, sp, #272	@ 0x110
 80087c8:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 80087cc:	f8df c0d4 	ldr.w	ip, [pc, #212]	@ 80088a4 <__kernel_rem_pio2f+0x2ec>
 80087d0:	eddf 7a37 	vldr	s15, [pc, #220]	@ 80088b0 <__kernel_rem_pio2f+0x2f8>
 80087d4:	2000      	movs	r0, #0
 80087d6:	1ae2      	subs	r2, r4, r3
 80087d8:	e0b1      	b.n	800893e <__kernel_rem_pio2f+0x386>
 80087da:	2602      	movs	r6, #2
 80087dc:	e78f      	b.n	80086fe <__kernel_rem_pio2f+0x146>
 80087de:	f852 1b04 	ldr.w	r1, [r2], #4
 80087e2:	b948      	cbnz	r0, 80087f8 <__kernel_rem_pio2f+0x240>
 80087e4:	b121      	cbz	r1, 80087f0 <__kernel_rem_pio2f+0x238>
 80087e6:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 80087ea:	f842 1c04 	str.w	r1, [r2, #-4]
 80087ee:	2101      	movs	r1, #1
 80087f0:	f10e 0e01 	add.w	lr, lr, #1
 80087f4:	4608      	mov	r0, r1
 80087f6:	e787      	b.n	8008708 <__kernel_rem_pio2f+0x150>
 80087f8:	f1c1 01ff 	rsb	r1, r1, #255	@ 0xff
 80087fc:	e7f5      	b.n	80087ea <__kernel_rem_pio2f+0x232>
 80087fe:	f104 3cff 	add.w	ip, r4, #4294967295
 8008802:	aa08      	add	r2, sp, #32
 8008804:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 8008808:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800880c:	a908      	add	r1, sp, #32
 800880e:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 8008812:	e781      	b.n	8008718 <__kernel_rem_pio2f+0x160>
 8008814:	f104 3cff 	add.w	ip, r4, #4294967295
 8008818:	aa08      	add	r2, sp, #32
 800881a:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 800881e:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8008822:	e7f3      	b.n	800880c <__kernel_rem_pio2f+0x254>
 8008824:	a908      	add	r1, sp, #32
 8008826:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 800882a:	3801      	subs	r0, #1
 800882c:	430a      	orrs	r2, r1
 800882e:	e7ab      	b.n	8008788 <__kernel_rem_pio2f+0x1d0>
 8008830:	3201      	adds	r2, #1
 8008832:	f850 6d04 	ldr.w	r6, [r0, #-4]!
 8008836:	2e00      	cmp	r6, #0
 8008838:	d0fa      	beq.n	8008830 <__kernel_rem_pio2f+0x278>
 800883a:	9905      	ldr	r1, [sp, #20]
 800883c:	f501 71b0 	add.w	r1, r1, #352	@ 0x160
 8008840:	eb0d 0001 	add.w	r0, sp, r1
 8008844:	18e6      	adds	r6, r4, r3
 8008846:	a91c      	add	r1, sp, #112	@ 0x70
 8008848:	f104 0c01 	add.w	ip, r4, #1
 800884c:	384c      	subs	r0, #76	@ 0x4c
 800884e:	eb01 0686 	add.w	r6, r1, r6, lsl #2
 8008852:	4422      	add	r2, r4
 8008854:	4562      	cmp	r2, ip
 8008856:	da04      	bge.n	8008862 <__kernel_rem_pio2f+0x2aa>
 8008858:	4614      	mov	r4, r2
 800885a:	e710      	b.n	800867e <__kernel_rem_pio2f+0xc6>
 800885c:	9804      	ldr	r0, [sp, #16]
 800885e:	2201      	movs	r2, #1
 8008860:	e7e7      	b.n	8008832 <__kernel_rem_pio2f+0x27a>
 8008862:	9903      	ldr	r1, [sp, #12]
 8008864:	f8dd e004 	ldr.w	lr, [sp, #4]
 8008868:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 800886c:	9105      	str	r1, [sp, #20]
 800886e:	ee07 1a90 	vmov	s15, r1
 8008872:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008876:	2400      	movs	r4, #0
 8008878:	ece6 7a01 	vstmia	r6!, {s15}
 800887c:	eddf 7a0c 	vldr	s15, [pc, #48]	@ 80088b0 <__kernel_rem_pio2f+0x2f8>
 8008880:	46b1      	mov	r9, r6
 8008882:	455c      	cmp	r4, fp
 8008884:	dd04      	ble.n	8008890 <__kernel_rem_pio2f+0x2d8>
 8008886:	ece0 7a01 	vstmia	r0!, {s15}
 800888a:	f10c 0c01 	add.w	ip, ip, #1
 800888e:	e7e1      	b.n	8008854 <__kernel_rem_pio2f+0x29c>
 8008890:	ecfe 6a01 	vldmia	lr!, {s13}
 8008894:	ed39 7a01 	vldmdb	r9!, {s14}
 8008898:	3401      	adds	r4, #1
 800889a:	eee6 7a87 	vfma.f32	s15, s13, s14
 800889e:	e7f0      	b.n	8008882 <__kernel_rem_pio2f+0x2ca>
 80088a0:	08009008 	.word	0x08009008
 80088a4:	08008fdc 	.word	0x08008fdc
 80088a8:	43800000 	.word	0x43800000
 80088ac:	3b800000 	.word	0x3b800000
 80088b0:	00000000 	.word	0x00000000
 80088b4:	9b02      	ldr	r3, [sp, #8]
 80088b6:	eeb0 0a48 	vmov.f32	s0, s16
 80088ba:	eba3 0008 	sub.w	r0, r3, r8
 80088be:	f000 f8e3 	bl	8008a88 <scalbnf>
 80088c2:	ed1f 7a07 	vldr	s14, [pc, #-28]	@ 80088a8 <__kernel_rem_pio2f+0x2f0>
 80088c6:	eeb4 0ac7 	vcmpe.f32	s0, s14
 80088ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80088ce:	db19      	blt.n	8008904 <__kernel_rem_pio2f+0x34c>
 80088d0:	ed5f 7a0a 	vldr	s15, [pc, #-40]	@ 80088ac <__kernel_rem_pio2f+0x2f4>
 80088d4:	ee60 7a27 	vmul.f32	s15, s0, s15
 80088d8:	aa08      	add	r2, sp, #32
 80088da:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80088de:	3508      	adds	r5, #8
 80088e0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80088e4:	eea7 0ac7 	vfms.f32	s0, s15, s14
 80088e8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80088ec:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80088f0:	ee10 3a10 	vmov	r3, s0
 80088f4:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 80088f8:	ee17 3a90 	vmov	r3, s15
 80088fc:	3401      	adds	r4, #1
 80088fe:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8008902:	e74c      	b.n	800879e <__kernel_rem_pio2f+0x1e6>
 8008904:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8008908:	aa08      	add	r2, sp, #32
 800890a:	ee10 3a10 	vmov	r3, s0
 800890e:	e7f6      	b.n	80088fe <__kernel_rem_pio2f+0x346>
 8008910:	a808      	add	r0, sp, #32
 8008912:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 8008916:	9001      	str	r0, [sp, #4]
 8008918:	ee07 0a90 	vmov	s15, r0
 800891c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8008920:	3b01      	subs	r3, #1
 8008922:	ee67 7a80 	vmul.f32	s15, s15, s0
 8008926:	ee20 0a07 	vmul.f32	s0, s0, s14
 800892a:	ed62 7a01 	vstmdb	r2!, {s15}
 800892e:	e743      	b.n	80087b8 <__kernel_rem_pio2f+0x200>
 8008930:	ecfc 6a01 	vldmia	ip!, {s13}
 8008934:	ecb5 7a01 	vldmia	r5!, {s14}
 8008938:	eee6 7a87 	vfma.f32	s15, s13, s14
 800893c:	3001      	adds	r0, #1
 800893e:	4550      	cmp	r0, sl
 8008940:	dc01      	bgt.n	8008946 <__kernel_rem_pio2f+0x38e>
 8008942:	4290      	cmp	r0, r2
 8008944:	ddf4      	ble.n	8008930 <__kernel_rem_pio2f+0x378>
 8008946:	a858      	add	r0, sp, #352	@ 0x160
 8008948:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800894c:	ed42 7a28 	vstr	s15, [r2, #-160]	@ 0xffffff60
 8008950:	3b01      	subs	r3, #1
 8008952:	e735      	b.n	80087c0 <__kernel_rem_pio2f+0x208>
 8008954:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 8008956:	2b02      	cmp	r3, #2
 8008958:	dc09      	bgt.n	800896e <__kernel_rem_pio2f+0x3b6>
 800895a:	2b00      	cmp	r3, #0
 800895c:	dc27      	bgt.n	80089ae <__kernel_rem_pio2f+0x3f6>
 800895e:	d040      	beq.n	80089e2 <__kernel_rem_pio2f+0x42a>
 8008960:	f009 0007 	and.w	r0, r9, #7
 8008964:	b059      	add	sp, #356	@ 0x164
 8008966:	ecbd 8b04 	vpop	{d8-d9}
 800896a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800896e:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 8008970:	2b03      	cmp	r3, #3
 8008972:	d1f5      	bne.n	8008960 <__kernel_rem_pio2f+0x3a8>
 8008974:	aa30      	add	r2, sp, #192	@ 0xc0
 8008976:	1f0b      	subs	r3, r1, #4
 8008978:	4413      	add	r3, r2
 800897a:	461a      	mov	r2, r3
 800897c:	4620      	mov	r0, r4
 800897e:	2800      	cmp	r0, #0
 8008980:	dc50      	bgt.n	8008a24 <__kernel_rem_pio2f+0x46c>
 8008982:	4622      	mov	r2, r4
 8008984:	2a01      	cmp	r2, #1
 8008986:	dc5d      	bgt.n	8008a44 <__kernel_rem_pio2f+0x48c>
 8008988:	ab30      	add	r3, sp, #192	@ 0xc0
 800898a:	ed5f 7a37 	vldr	s15, [pc, #-220]	@ 80088b0 <__kernel_rem_pio2f+0x2f8>
 800898e:	440b      	add	r3, r1
 8008990:	2c01      	cmp	r4, #1
 8008992:	dc67      	bgt.n	8008a64 <__kernel_rem_pio2f+0x4ac>
 8008994:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 8008998:	ed9d 7a31 	vldr	s14, [sp, #196]	@ 0xc4
 800899c:	2e00      	cmp	r6, #0
 800899e:	d167      	bne.n	8008a70 <__kernel_rem_pio2f+0x4b8>
 80089a0:	edc7 6a00 	vstr	s13, [r7]
 80089a4:	ed87 7a01 	vstr	s14, [r7, #4]
 80089a8:	edc7 7a02 	vstr	s15, [r7, #8]
 80089ac:	e7d8      	b.n	8008960 <__kernel_rem_pio2f+0x3a8>
 80089ae:	ab30      	add	r3, sp, #192	@ 0xc0
 80089b0:	ed1f 7a41 	vldr	s14, [pc, #-260]	@ 80088b0 <__kernel_rem_pio2f+0x2f8>
 80089b4:	440b      	add	r3, r1
 80089b6:	4622      	mov	r2, r4
 80089b8:	2a00      	cmp	r2, #0
 80089ba:	da24      	bge.n	8008a06 <__kernel_rem_pio2f+0x44e>
 80089bc:	b34e      	cbz	r6, 8008a12 <__kernel_rem_pio2f+0x45a>
 80089be:	eef1 7a47 	vneg.f32	s15, s14
 80089c2:	edc7 7a00 	vstr	s15, [r7]
 80089c6:	eddd 7a30 	vldr	s15, [sp, #192]	@ 0xc0
 80089ca:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80089ce:	aa31      	add	r2, sp, #196	@ 0xc4
 80089d0:	2301      	movs	r3, #1
 80089d2:	429c      	cmp	r4, r3
 80089d4:	da20      	bge.n	8008a18 <__kernel_rem_pio2f+0x460>
 80089d6:	b10e      	cbz	r6, 80089dc <__kernel_rem_pio2f+0x424>
 80089d8:	eef1 7a67 	vneg.f32	s15, s15
 80089dc:	edc7 7a01 	vstr	s15, [r7, #4]
 80089e0:	e7be      	b.n	8008960 <__kernel_rem_pio2f+0x3a8>
 80089e2:	ab30      	add	r3, sp, #192	@ 0xc0
 80089e4:	ed5f 7a4e 	vldr	s15, [pc, #-312]	@ 80088b0 <__kernel_rem_pio2f+0x2f8>
 80089e8:	440b      	add	r3, r1
 80089ea:	2c00      	cmp	r4, #0
 80089ec:	da05      	bge.n	80089fa <__kernel_rem_pio2f+0x442>
 80089ee:	b10e      	cbz	r6, 80089f4 <__kernel_rem_pio2f+0x43c>
 80089f0:	eef1 7a67 	vneg.f32	s15, s15
 80089f4:	edc7 7a00 	vstr	s15, [r7]
 80089f8:	e7b2      	b.n	8008960 <__kernel_rem_pio2f+0x3a8>
 80089fa:	ed33 7a01 	vldmdb	r3!, {s14}
 80089fe:	3c01      	subs	r4, #1
 8008a00:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008a04:	e7f1      	b.n	80089ea <__kernel_rem_pio2f+0x432>
 8008a06:	ed73 7a01 	vldmdb	r3!, {s15}
 8008a0a:	3a01      	subs	r2, #1
 8008a0c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8008a10:	e7d2      	b.n	80089b8 <__kernel_rem_pio2f+0x400>
 8008a12:	eef0 7a47 	vmov.f32	s15, s14
 8008a16:	e7d4      	b.n	80089c2 <__kernel_rem_pio2f+0x40a>
 8008a18:	ecb2 7a01 	vldmia	r2!, {s14}
 8008a1c:	3301      	adds	r3, #1
 8008a1e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008a22:	e7d6      	b.n	80089d2 <__kernel_rem_pio2f+0x41a>
 8008a24:	ed72 7a01 	vldmdb	r2!, {s15}
 8008a28:	edd2 6a01 	vldr	s13, [r2, #4]
 8008a2c:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8008a30:	3801      	subs	r0, #1
 8008a32:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008a36:	ed82 7a00 	vstr	s14, [r2]
 8008a3a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008a3e:	edc2 7a01 	vstr	s15, [r2, #4]
 8008a42:	e79c      	b.n	800897e <__kernel_rem_pio2f+0x3c6>
 8008a44:	ed73 7a01 	vldmdb	r3!, {s15}
 8008a48:	edd3 6a01 	vldr	s13, [r3, #4]
 8008a4c:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8008a50:	3a01      	subs	r2, #1
 8008a52:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8008a56:	ed83 7a00 	vstr	s14, [r3]
 8008a5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008a5e:	edc3 7a01 	vstr	s15, [r3, #4]
 8008a62:	e78f      	b.n	8008984 <__kernel_rem_pio2f+0x3cc>
 8008a64:	ed33 7a01 	vldmdb	r3!, {s14}
 8008a68:	3c01      	subs	r4, #1
 8008a6a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008a6e:	e78f      	b.n	8008990 <__kernel_rem_pio2f+0x3d8>
 8008a70:	eef1 6a66 	vneg.f32	s13, s13
 8008a74:	eeb1 7a47 	vneg.f32	s14, s14
 8008a78:	edc7 6a00 	vstr	s13, [r7]
 8008a7c:	ed87 7a01 	vstr	s14, [r7, #4]
 8008a80:	eef1 7a67 	vneg.f32	s15, s15
 8008a84:	e790      	b.n	80089a8 <__kernel_rem_pio2f+0x3f0>
 8008a86:	bf00      	nop

08008a88 <scalbnf>:
 8008a88:	ee10 3a10 	vmov	r3, s0
 8008a8c:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 8008a90:	d02b      	beq.n	8008aea <scalbnf+0x62>
 8008a92:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 8008a96:	d302      	bcc.n	8008a9e <scalbnf+0x16>
 8008a98:	ee30 0a00 	vadd.f32	s0, s0, s0
 8008a9c:	4770      	bx	lr
 8008a9e:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 8008aa2:	d123      	bne.n	8008aec <scalbnf+0x64>
 8008aa4:	4b24      	ldr	r3, [pc, #144]	@ (8008b38 <scalbnf+0xb0>)
 8008aa6:	eddf 7a25 	vldr	s15, [pc, #148]	@ 8008b3c <scalbnf+0xb4>
 8008aaa:	4298      	cmp	r0, r3
 8008aac:	ee20 0a27 	vmul.f32	s0, s0, s15
 8008ab0:	db17      	blt.n	8008ae2 <scalbnf+0x5a>
 8008ab2:	ee10 3a10 	vmov	r3, s0
 8008ab6:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8008aba:	3a19      	subs	r2, #25
 8008abc:	f24c 3150 	movw	r1, #50000	@ 0xc350
 8008ac0:	4288      	cmp	r0, r1
 8008ac2:	dd15      	ble.n	8008af0 <scalbnf+0x68>
 8008ac4:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 8008b40 <scalbnf+0xb8>
 8008ac8:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 8008b44 <scalbnf+0xbc>
 8008acc:	ee10 3a10 	vmov	r3, s0
 8008ad0:	eeb0 7a67 	vmov.f32	s14, s15
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	bfb8      	it	lt
 8008ad8:	eef0 7a66 	vmovlt.f32	s15, s13
 8008adc:	ee27 0a87 	vmul.f32	s0, s15, s14
 8008ae0:	4770      	bx	lr
 8008ae2:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8008b48 <scalbnf+0xc0>
 8008ae6:	ee27 0a80 	vmul.f32	s0, s15, s0
 8008aea:	4770      	bx	lr
 8008aec:	0dd2      	lsrs	r2, r2, #23
 8008aee:	e7e5      	b.n	8008abc <scalbnf+0x34>
 8008af0:	4410      	add	r0, r2
 8008af2:	28fe      	cmp	r0, #254	@ 0xfe
 8008af4:	dce6      	bgt.n	8008ac4 <scalbnf+0x3c>
 8008af6:	2800      	cmp	r0, #0
 8008af8:	dd06      	ble.n	8008b08 <scalbnf+0x80>
 8008afa:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8008afe:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8008b02:	ee00 3a10 	vmov	s0, r3
 8008b06:	4770      	bx	lr
 8008b08:	f110 0f16 	cmn.w	r0, #22
 8008b0c:	da09      	bge.n	8008b22 <scalbnf+0x9a>
 8008b0e:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 8008b48 <scalbnf+0xc0>
 8008b12:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 8008b4c <scalbnf+0xc4>
 8008b16:	ee10 3a10 	vmov	r3, s0
 8008b1a:	eeb0 7a67 	vmov.f32	s14, s15
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	e7d9      	b.n	8008ad6 <scalbnf+0x4e>
 8008b22:	3019      	adds	r0, #25
 8008b24:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8008b28:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8008b2c:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 8008b50 <scalbnf+0xc8>
 8008b30:	ee07 3a90 	vmov	s15, r3
 8008b34:	e7d7      	b.n	8008ae6 <scalbnf+0x5e>
 8008b36:	bf00      	nop
 8008b38:	ffff3cb0 	.word	0xffff3cb0
 8008b3c:	4c000000 	.word	0x4c000000
 8008b40:	7149f2ca 	.word	0x7149f2ca
 8008b44:	f149f2ca 	.word	0xf149f2ca
 8008b48:	0da24260 	.word	0x0da24260
 8008b4c:	8da24260 	.word	0x8da24260
 8008b50:	33000000 	.word	0x33000000

08008b54 <floorf>:
 8008b54:	ee10 3a10 	vmov	r3, s0
 8008b58:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8008b5c:	3a7f      	subs	r2, #127	@ 0x7f
 8008b5e:	2a16      	cmp	r2, #22
 8008b60:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8008b64:	dc2b      	bgt.n	8008bbe <floorf+0x6a>
 8008b66:	2a00      	cmp	r2, #0
 8008b68:	da12      	bge.n	8008b90 <floorf+0x3c>
 8008b6a:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8008bd0 <floorf+0x7c>
 8008b6e:	ee30 0a27 	vadd.f32	s0, s0, s15
 8008b72:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8008b76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008b7a:	dd06      	ble.n	8008b8a <floorf+0x36>
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	da24      	bge.n	8008bca <floorf+0x76>
 8008b80:	2900      	cmp	r1, #0
 8008b82:	4b14      	ldr	r3, [pc, #80]	@ (8008bd4 <floorf+0x80>)
 8008b84:	bf08      	it	eq
 8008b86:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 8008b8a:	ee00 3a10 	vmov	s0, r3
 8008b8e:	4770      	bx	lr
 8008b90:	4911      	ldr	r1, [pc, #68]	@ (8008bd8 <floorf+0x84>)
 8008b92:	4111      	asrs	r1, r2
 8008b94:	420b      	tst	r3, r1
 8008b96:	d0fa      	beq.n	8008b8e <floorf+0x3a>
 8008b98:	eddf 7a0d 	vldr	s15, [pc, #52]	@ 8008bd0 <floorf+0x7c>
 8008b9c:	ee30 0a27 	vadd.f32	s0, s0, s15
 8008ba0:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8008ba4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008ba8:	ddef      	ble.n	8008b8a <floorf+0x36>
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	bfbe      	ittt	lt
 8008bae:	f44f 0000 	movlt.w	r0, #8388608	@ 0x800000
 8008bb2:	fa40 f202 	asrlt.w	r2, r0, r2
 8008bb6:	189b      	addlt	r3, r3, r2
 8008bb8:	ea23 0301 	bic.w	r3, r3, r1
 8008bbc:	e7e5      	b.n	8008b8a <floorf+0x36>
 8008bbe:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 8008bc2:	d3e4      	bcc.n	8008b8e <floorf+0x3a>
 8008bc4:	ee30 0a00 	vadd.f32	s0, s0, s0
 8008bc8:	4770      	bx	lr
 8008bca:	2300      	movs	r3, #0
 8008bcc:	e7dd      	b.n	8008b8a <floorf+0x36>
 8008bce:	bf00      	nop
 8008bd0:	7149f2ca 	.word	0x7149f2ca
 8008bd4:	bf800000 	.word	0xbf800000
 8008bd8:	007fffff 	.word	0x007fffff

08008bdc <_init>:
 8008bdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008bde:	bf00      	nop
 8008be0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008be2:	bc08      	pop	{r3}
 8008be4:	469e      	mov	lr, r3
 8008be6:	4770      	bx	lr

08008be8 <_fini>:
 8008be8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008bea:	bf00      	nop
 8008bec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008bee:	bc08      	pop	{r3}
 8008bf0:	469e      	mov	lr, r3
 8008bf2:	4770      	bx	lr
